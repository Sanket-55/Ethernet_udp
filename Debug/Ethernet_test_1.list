
Ethernet_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9e8  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de8  0800db6c  0800db6c  0000eb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f954  0800f954  00011070  2**0
                  CONTENTS
  4 .ARM          00000008  0800f954  0800f954  00010954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f95c  0800f95c  00011070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f95c  0800f95c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f960  0800f960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800f964  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e84  20000070  0800f9d4  00011070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ef4  0800f9d4  00011ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4ac  00000000  00000000  00011099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f4a  00000000  00000000  0002c545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00031490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8f  00000000  00000000  00032878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8a7  00000000  00000000  00033807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260b9  00000000  00000000  0005f0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3fa3  00000000  00000000  00085167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015910a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  00159150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0015e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000070 	.word	0x20000070
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800db54 	.word	0x0800db54

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000074 	.word	0x20000074
 80001c0:	0800db54 	.word	0x0800db54

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fc14 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f838 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f8d2 	bl	8000664 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004c0:	f000 f87c 	bl	80005bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004c4:	f000 f8a4 	bl	8000610 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80004c8:	f003 fa00 	bl	80038cc <MX_LWIP_Init>
  //udpServer_init ();
  udp_modbus_pcb = udp_new();
 80004cc:	f00a f9d5 	bl	800a87a <udp_new>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b11      	ldr	r3, [pc, #68]	@ (800051c <main+0x6c>)
 80004d6:	601a      	str	r2, [r3, #0]
    if (udp_modbus_pcb == NULL) {
 80004d8:	4b10      	ldr	r3, [pc, #64]	@ (800051c <main+0x6c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d101      	bne.n	80004e4 <main+0x34>
        Error_Handler(); // Handle PCB creation failure
 80004e0:	f000 f96e 	bl	80007c0 <Error_Handler>
    }

    if (udp_bind(udp_modbus_pcb, IP_ADDR_ANY, 502) != ERR_OK) {
 80004e4:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <main+0x6c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80004ec:	490c      	ldr	r1, [pc, #48]	@ (8000520 <main+0x70>)
 80004ee:	4618      	mov	r0, r3
 80004f0:	f00a f942 	bl	800a778 <udp_bind>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <main+0x4e>
        Error_Handler(); // Handle binding failure
 80004fa:	f000 f961 	bl	80007c0 <Error_Handler>
    }

    // Set UDP receive callback
    udp_recv(udp_modbus_pcb, udp_receive_callback, NULL);
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <main+0x6c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	4907      	ldr	r1, [pc, #28]	@ (8000524 <main+0x74>)
 8000506:	4618      	mov	r0, r3
 8000508:	f00a f9a6 	bl	800a858 <udp_recv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ethernetif_input(&gnetif);
 800050c:	4806      	ldr	r0, [pc, #24]	@ (8000528 <main+0x78>)
 800050e:	f003 fdcd 	bl	80040ac <ethernetif_input>

	 	  sys_check_timeouts();
 8000512:	f009 fe7f 	bl	800a214 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000516:	bf00      	nop
 8000518:	e7f8      	b.n	800050c <main+0x5c>
 800051a:	bf00      	nop
 800051c:	200005b0 	.word	0x200005b0
 8000520:	0800f90c 	.word	0x0800f90c
 8000524:	08000ba1 	.word	0x08000ba1
 8000528:	200005bc 	.word	0x200005bc

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b092      	sub	sp, #72	@ 0x48
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f00c fcdf 	bl	800cefe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054e:	2302      	movs	r3, #2
 8000550:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2310      	movs	r3, #16
 8000558:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	2300      	movs	r3, #0
 8000560:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000562:	230d      	movs	r3, #13
 8000564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000566:	23c3      	movs	r3, #195	@ 0xc3
 8000568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800056e:	2305      	movs	r3, #5
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	4618      	mov	r0, r3
 8000578:	f002 f8e6 	bl	8002748 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000582:	f000 f91d 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000592:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2103      	movs	r1, #3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fb24 	bl	8002bf0 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005ae:	f000 f907 	bl	80007c0 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3748      	adds	r7, #72	@ 0x48
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_USART3_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_USART3_UART_Init+0x4c>)
 80005f4:	f002 fd42 	bl	800307c <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f8df 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000008c 	.word	0x2000008c
 800060c:	40004800 	.word	0x40004800

08000610 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000616:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800061a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800061c:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800061e:	2204      	movs	r2, #4
 8000620:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000624:	2202      	movs	r2, #2
 8000626:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000630:	2202      	movs	r2, #2
 8000632:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000636:	2201      	movs	r2, #1
 8000638:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000642:	2201      	movs	r2, #1
 8000644:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800064e:	f001 ff6b 	bl	8002528 <HAL_PCD_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f8b2 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000d4 	.word	0x200000d4

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	@ 0x30
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a4b      	ldr	r2, [pc, #300]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	4b45      	ldr	r3, [pc, #276]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a44      	ldr	r2, [pc, #272]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b42      	ldr	r3, [pc, #264]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b3e      	ldr	r3, [pc, #248]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b3b      	ldr	r3, [pc, #236]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b37      	ldr	r3, [pc, #220]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a36      	ldr	r2, [pc, #216]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b34      	ldr	r3, [pc, #208]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b30      	ldr	r3, [pc, #192]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a2f      	ldr	r2, [pc, #188]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a28      	ldr	r2, [pc, #160]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 8000710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_GPIO_Init+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000728:	4822      	ldr	r0, [pc, #136]	@ (80007b4 <MX_GPIO_Init+0x150>)
 800072a:	f001 fee5 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2140      	movs	r1, #64	@ 0x40
 8000732:	4821      	ldr	r0, [pc, #132]	@ (80007b8 <MX_GPIO_Init+0x154>)
 8000734:	f001 fee0 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	481b      	ldr	r0, [pc, #108]	@ (80007bc <MX_GPIO_Init+0x158>)
 8000750:	f001 fd34 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000754:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <MX_GPIO_Init+0x150>)
 800076e:	f001 fd25 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000772:	2340      	movs	r3, #64	@ 0x40
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <MX_GPIO_Init+0x154>)
 800078a:	f001 fd17 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_GPIO_Init+0x154>)
 80007a2:	f001 fd0b 	bl	80021bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a6:	bf00      	nop
 80007a8:	3730      	adds	r7, #48	@ 0x30
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020400 	.word	0x40020400
 80007b8:	40021800 	.word	0x40021800
 80007bc:	40020800 	.word	0x40020800

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <handle_modbus_request>:
#include "modbus_layer.h"
#include <string.h>

// Parses a Modbus request and prepares a response
void handle_modbus_request(uint8_t *request, uint16_t request_length, uint8_t *response, uint16_t *response_length) {
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	@ 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	460b      	mov	r3, r1
 80007da:	817b      	strh	r3, [r7, #10]
    // Check minimum Modbus request length
    if (request_length < 6) {
 80007dc:	897b      	ldrh	r3, [r7, #10]
 80007de:	2b05      	cmp	r3, #5
 80007e0:	d803      	bhi.n	80007ea <handle_modbus_request+0x1e>
        *response_length = 0; // Invalid request
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	801a      	strh	r2, [r3, #0]
        return;
 80007e8:	e03a      	b.n	8000860 <handle_modbus_request+0x94>
    }

    uint16_t transaction_id = (request[0] << 8) | request[1];
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	83fb      	strh	r3, [r7, #30]
    uint16_t protocol_id = (request[2] << 8) | request[3];
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3302      	adds	r3, #2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	021b      	lsls	r3, r3, #8
 8000808:	b21a      	sxth	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3303      	adds	r3, #3
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	83bb      	strh	r3, [r7, #28]
    uint16_t length_field = (request[4] << 8) | request[5];
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3304      	adds	r3, #4
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21a      	sxth	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3305      	adds	r3, #5
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b21b      	sxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	b21b      	sxth	r3, r3
 800082e:	837b      	strh	r3, [r7, #26]
    uint8_t unit_id = request[6];
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	799b      	ldrb	r3, [r3, #6]
 8000834:	767b      	strb	r3, [r7, #25]
//        *response_length = 0; // Invalid protocol
//        return;
//    }

    // Prepare a "Hi" response
    uint16_t index = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	82fb      	strh	r3, [r7, #22]
//    response[index++] = (protocol_id >> 8) & 0xFF;    // Protocol ID (High Byte)
//    response[index++] = protocol_id & 0xFF;           // Protocol ID (Low Byte)
//    response[index++] = 0x00;                         // Response Length (High Byte)
//    response[index++] = 3;                            // Response Length (Low Byte)
//    response[index++] = unit_id;                      // Unit ID
    response[index++] = 'H';                          // 'H'
 800083a:	8afb      	ldrh	r3, [r7, #22]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	82fa      	strh	r2, [r7, #22]
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	2248      	movs	r2, #72	@ 0x48
 8000848:	701a      	strb	r2, [r3, #0]
    response[index++] = 'i';                          // 'i'
 800084a:	8afb      	ldrh	r3, [r7, #22]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	82fa      	strh	r2, [r7, #22]
 8000850:	461a      	mov	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	2269      	movs	r2, #105	@ 0x69
 8000858:	701a      	strb	r2, [r3, #0]

    *response_length = index;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	8afa      	ldrh	r2, [r7, #22]
 800085e:	801a      	strh	r2, [r3, #0]
}
 8000860:	3724      	adds	r7, #36	@ 0x24
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <HAL_MspInit+0x48>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <HAL_MspInit+0x48>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087c:	6453      	str	r3, [r2, #68]	@ 0x44
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <HAL_MspInit+0x48>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_MspInit+0x48>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <HAL_MspInit+0x48>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_MspInit+0x48>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	@ (8000938 <HAL_UART_MspInit+0x84>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12c      	bne.n	8000930 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	4a17      	ldr	r2, [pc, #92]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	@ (800093c <HAL_UART_MspInit+0x88>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800090e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000920:	2307      	movs	r3, #7
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <HAL_UART_MspInit+0x8c>)
 800092c:	f001 fc46 	bl	80021bc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004800 	.word	0x40004800
 800093c:	40023800 	.word	0x40023800
 8000940:	40020c00 	.word	0x40020c00

08000944 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000964:	d13f      	bne.n	80009e6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a20      	ldr	r2, [pc, #128]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000982:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000994:	230a      	movs	r3, #10
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <HAL_PCD_MspInit+0xb0>)
 80009a0:	f001 fc0c 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480e      	ldr	r0, [pc, #56]	@ (80009f4 <HAL_PCD_MspInit+0xb0>)
 80009ba:	f001 fbff 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 80009c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c2:	4a0b      	ldr	r2, [pc, #44]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_PCD_MspInit+0xac>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f99c 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
  }

  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e009      	b.n	8000ab0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf1      	blt.n	8000a9c <_write+0x12>
  }
  return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_close>:

int _close(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae8:	605a      	str	r2, [r3, #4]
  return 0;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <_isatty>:

int _isatty(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr

08000b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d205      	bcs.n	8000b60 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <_sbrk+0x6c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20020000 	.word	0x20020000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	200005b4 	.word	0x200005b4
 8000b8c:	20006ef8 	.word	0x20006ef8
 8000b90:	20006ee4 	.word	0x20006ee4

08000b94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <udp_receive_callback>:
//   }
//}

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */
void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, uint16_t port) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b0c7      	sub	sp, #284	@ 0x11c
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000baa:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000bae:	6020      	str	r0, [r4, #0]
 8000bb0:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8000bb4:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8000bb8:	6001      	str	r1, [r0, #0]
 8000bba:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000bbe:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000bc2:	600a      	str	r2, [r1, #0]
 8000bc4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000bc8:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000bcc:	6013      	str	r3, [r2, #0]
    uint8_t response[256];
    uint16_t response_length = 0;
 8000bce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bd2:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	801a      	strh	r2, [r3, #0]

    // Step 1: Handle Modbus request
    handle_modbus_request((uint8_t *)p->payload, p->len, response, &response_length);
 8000bda:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6858      	ldr	r0, [r3, #4]
 8000be6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	895b      	ldrh	r3, [r3, #10]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f107 0312 	add.w	r3, r7, #18
 8000bf8:	f107 0214 	add.w	r2, r7, #20
 8000bfc:	f7ff fde6 	bl	80007cc <handle_modbus_request>

    // Step 2: Send response if valid
    if (response_length > 0) {
 8000c00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c04:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d031      	beq.n	8000c72 <udp_receive_callback+0xd2>
        struct pbuf *resp_buf = pbuf_alloc(PBUF_TRANSPORT, response_length, PBUF_RAM);
 8000c0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c12:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f004 f8b9 	bl	8004d94 <pbuf_alloc>
 8000c22:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
        if (resp_buf != NULL) {
 8000c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d021      	beq.n	8000c72 <udp_receive_callback+0xd2>
            memcpy(resp_buf->payload, response, response_length);
 8000c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c32:	6858      	ldr	r0, [r3, #4]
 8000c34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c38:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f00c f9d0 	bl	800cfea <memcpy>
            udp_sendto(pcb, resp_buf, addr, port);
 8000c4a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8000c4e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000c52:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000c56:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000c5a:	f5a1 7088 	sub.w	r0, r1, #272	@ 0x110
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000c64:	6800      	ldr	r0, [r0, #0]
 8000c66:	f009 fc85 	bl	800a574 <udp_sendto>
            pbuf_free(resp_buf);
 8000c6a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8000c6e:	f004 fc09 	bl	8005484 <pbuf_free>
        }
    }

    // Free the received packet
    pbuf_free(p);
 8000c72:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000c76:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	f004 fc02 	bl	8005484 <pbuf_free>
}
 8000c80:	bf00      	nop
 8000c82:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000c90:	f7ff ff80 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cba:	f00c f96f 	bl	800cf9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fbf7 	bl	80004b0 <main>
  bx  lr
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd0:	0800f964 	.word	0x0800f964
  ldr r2, =_sbss
 8000cd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd8:	20006ef4 	.word	0x20006ef4

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f92b 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fda8 	bl	8000868 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f935 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f90b 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	@ (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200005b8 	.word	0x200005b8

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <HAL_GetTick+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	200005b8 	.word	0x200005b8

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff fff0 	bl	8000da8 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffe0 	bl	8000da8 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff90 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff49 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000fdc:	4ba3      	ldr	r3, [pc, #652]	@ (800126c <HAL_ETH_Init+0x2a0>)
 8000fde:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e173      	b.n	80012da <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f002 fd8c 	bl	8003b24 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b97      	ldr	r3, [pc, #604]	@ (8001270 <HAL_ETH_Init+0x2a4>)
 8001012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001014:	4a96      	ldr	r2, [pc, #600]	@ (8001270 <HAL_ETH_Init+0x2a4>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101a:	6453      	str	r3, [r2, #68]	@ 0x44
 800101c:	4b94      	ldr	r3, [pc, #592]	@ (8001270 <HAL_ETH_Init+0x2a4>)
 800101e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001028:	4b92      	ldr	r3, [pc, #584]	@ (8001274 <HAL_ETH_Init+0x2a8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a91      	ldr	r2, [pc, #580]	@ (8001274 <HAL_ETH_Init+0x2a8>)
 800102e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001032:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001034:	4b8f      	ldr	r3, [pc, #572]	@ (8001274 <HAL_ETH_Init+0x2a8>)
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	498d      	ldr	r1, [pc, #564]	@ (8001274 <HAL_ETH_Init+0x2a8>)
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001058:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800105a:	f7ff fea5 	bl	8000da8 <HAL_GetTick>
 800105e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001060:	e011      	b.n	8001086 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001062:	f7ff fea1 	bl	8000da8 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001070:	d909      	bls.n	8001086 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e129      	b.n	80012da <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e4      	bne.n	8001062 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f023 031c 	bic.w	r3, r3, #28
 80010a6:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010a8:	f001 ff9a 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 80010ac:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4a71      	ldr	r2, [pc, #452]	@ (8001278 <HAL_ETH_Init+0x2ac>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d908      	bls.n	80010c8 <HAL_ETH_Init+0xfc>
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4a70      	ldr	r2, [pc, #448]	@ (800127c <HAL_ETH_Init+0x2b0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d804      	bhi.n	80010c8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e01a      	b.n	80010fe <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4a6c      	ldr	r2, [pc, #432]	@ (800127c <HAL_ETH_Init+0x2b0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d908      	bls.n	80010e2 <HAL_ETH_Init+0x116>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	4a66      	ldr	r2, [pc, #408]	@ (800126c <HAL_ETH_Init+0x2a0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d204      	bcs.n	80010e2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f043 030c 	orr.w	r3, r3, #12
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	e00d      	b.n	80010fe <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4a61      	ldr	r2, [pc, #388]	@ (800126c <HAL_ETH_Init+0x2a0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d303      	bcc.n	80010f2 <HAL_ETH_Init+0x126>
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4a64      	ldr	r2, [pc, #400]	@ (8001280 <HAL_ETH_Init+0x2b4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d904      	bls.n	80010fc <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e000      	b.n	80010fe <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80010fc:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001106:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800110a:	2100      	movs	r1, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fb8e 	bl	800182e <HAL_ETH_WritePHYRegister>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fd44 	bl	8001bac <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0d4      	b.n	80012da <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001130:	20ff      	movs	r0, #255	@ 0xff
 8001132:	f7ff fe43 	bl	8000dbc <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80a2 	beq.w	8001284 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001140:	f7ff fe32 	bl	8000da8 <HAL_GetTick>
 8001144:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	461a      	mov	r2, r3
 800114c:	2101      	movs	r1, #1
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fb05 	bl	800175e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001154:	f7ff fe28 	bl	8000da8 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001162:	4293      	cmp	r3, r2
 8001164:	d90f      	bls.n	8001186 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fd1d 	bl	8001bac <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e0a9      	b.n	80012da <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0da      	beq.n	8001146 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001190:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001194:	2100      	movs	r1, #0
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 fb49 	bl	800182e <HAL_ETH_WritePHYRegister>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011a6:	6939      	ldr	r1, [r7, #16]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fcff 	bl	8001bac <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e08f      	b.n	80012da <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80011ba:	f7ff fdf5 	bl	8000da8 <HAL_GetTick>
 80011be:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	461a      	mov	r2, r3
 80011c6:	2101      	movs	r1, #1
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fac8 	bl	800175e <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80011ce:	f7ff fdeb 	bl	8000da8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011dc:	4293      	cmp	r3, r2
 80011de:	d90f      	bls.n	8001200 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fce0 	bl	8001bac <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e06c      	b.n	80012da <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0da      	beq.n	80011c0 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	461a      	mov	r2, r3
 8001210:	2110      	movs	r1, #16
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 faa3 	bl	800175e <HAL_ETH_ReadPHYRegister>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001222:	6939      	ldr	r1, [r7, #16]
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 fcc1 	bl	8001bac <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e051      	b.n	80012da <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	e002      	b.n	8001250 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	e032      	b.n	80012c8 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	e02d      	b.n	80012c8 <HAL_ETH_Init+0x2fc>
 800126c:	03938700 	.word	0x03938700
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	01312cff 	.word	0x01312cff
 800127c:	02160ebf 	.word	0x02160ebf
 8001280:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001294:	4313      	orrs	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fac6 	bl	800182e <HAL_ETH_WritePHYRegister>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00b      	beq.n	80012c0 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fc7c 	bl	8001bac <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e00c      	b.n	80012da <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80012c0:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80012c4:	f7ff fd7a 	bl	8000dbc <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80012c8:	6939      	ldr	r1, [r7, #16]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fc6e 	bl	8001bac <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop

080012e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ETH_DMATxDescListInit+0x20>
 8001300:	2302      	movs	r3, #2
 8001302:	e051      	b.n	80013a8 <HAL_ETH_DMATxDescListInit+0xc4>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2202      	movs	r2, #2
 8001310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e030      	b.n	8001382 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	015b      	lsls	r3, r3, #5
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001330:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	429a      	cmp	r2, r3
 8001362:	d208      	bcs.n	8001376 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	015b      	lsls	r3, r3, #5
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	461a      	mov	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	e002      	b.n	800137c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d3ca      	bcc.n	8001320 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001394:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b087      	sub	sp, #28
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_ETH_DMARxDescListInit+0x20>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e055      	b.n	800147e <HAL_ETH_DMARxDescListInit+0xcc>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2202      	movs	r2, #2
 80013de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e034      	b.n	8001458 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	015b      	lsls	r3, r3, #5
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	4413      	add	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013fe:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001406:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	461a      	mov	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3b01      	subs	r3, #1
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	429a      	cmp	r2, r3
 8001438:	d208      	bcs.n	800144c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	015b      	lsls	r3, r3, #5
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	461a      	mov	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	e002      	b.n	8001452 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d3c6      	bcc.n	80013ee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800146a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_ETH_TransmitFrame+0x24>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e0cc      	b.n	8001646 <HAL_ETH_TransmitFrame+0x1be>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0b7      	b.n	8001646 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da09      	bge.n	80014f4 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2212      	movs	r2, #18
 80014e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0a8      	b.n	8001646 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d915      	bls.n	800152a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4a53      	ldr	r2, [pc, #332]	@ (8001650 <HAL_ETH_TransmitFrame+0x1c8>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <HAL_ETH_TransmitFrame+0x1c8>)
 800150e:	fba3 1302 	umull	r1, r3, r3, r2
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e001      	b.n	800152e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800152a:	2301      	movs	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d11c      	bne.n	800156e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8001542:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800154e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800155e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800156c:	e04b      	b.n	8001606 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	e044      	b.n	80015fe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001582:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001598:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80015a2:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d116      	bne.n	80015dc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80015bc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4a24      	ldr	r2, [pc, #144]	@ (8001654 <HAL_ETH_TransmitFrame+0x1cc>)
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80015ce:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015da:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015ea:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	3301      	adds	r3, #1
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3b6      	bcc.n	8001574 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001620:	461a      	mov	r2, r3
 8001622:	2304      	movs	r3, #4
 8001624:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162e:	461a      	mov	r2, r3
 8001630:	2300      	movs	r3, #0
 8001632:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	ac02b00b 	.word	0xac02b00b
 8001654:	fffffa0c 	.word	0xfffffa0c

08001658 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ETH_GetReceivedFrame+0x1a>
 800166e:	2302      	movs	r3, #2
 8001670:	e070      	b.n	8001754 <HAL_ETH_GetReceivedFrame+0xfc>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db5a      	blt.n	8001742 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d030      	beq.n	80016fc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d103      	bne.n	80016b4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016c8:	3b04      	subs	r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e02b      	b.n	8001754 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001706:	2b00      	cmp	r3, #0
 8001708:	d010      	beq.n	800172c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	461a      	mov	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	629a      	str	r2, [r3, #40]	@ 0x28
 800172a:	e00a      	b.n	8001742 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	460b      	mov	r3, r1
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b82      	cmp	r3, #130	@ 0x82
 800177e:	d101      	bne.n	8001784 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001780:	2302      	movs	r3, #2
 8001782:	e050      	b.n	8001826 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2282      	movs	r2, #130	@ 0x82
 8001788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 031c 	and.w	r3, r3, #28
 800179a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8a1b      	ldrh	r3, [r3, #16]
 80017a0:	02db      	lsls	r3, r3, #11
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80017aa:	897b      	ldrh	r3, [r7, #10]
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f023 0302 	bic.w	r3, r3, #2
 80017be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d0:	f7ff faea 	bl	8000da8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017d6:	e015      	b.n	8001804 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80017d8:	f7ff fae6 	bl	8000da8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e6:	d309      	bcc.n	80017fc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e014      	b.n	8001826 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e4      	bne.n	80017d8 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	b29b      	uxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	460b      	mov	r3, r1
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b42      	cmp	r3, #66	@ 0x42
 800184e:	d101      	bne.n	8001854 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
 8001852:	e04e      	b.n	80018f2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2242      	movs	r2, #66	@ 0x42
 8001858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 031c 	and.w	r3, r3, #28
 800186a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8a1b      	ldrh	r3, [r3, #16]
 8001870:	02db      	lsls	r3, r3, #11
 8001872:	b29b      	uxth	r3, r3
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4313      	orrs	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018aa:	f7ff fa7d 	bl	8000da8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018b0:	e015      	b.n	80018de <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80018b2:	f7ff fa79 	bl	8000da8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c0:	d309      	bcc.n	80018d6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e00d      	b.n	80018f2 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e4      	bne.n	80018b2 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_ETH_Start+0x16>
 800190c:	2302      	movs	r3, #2
 800190e:	e01f      	b.n	8001950 <HAL_ETH_Start+0x56>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fb3f 	bl	8001fa4 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fb76 	bl	8002018 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fc01 	bl	8002134 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fbaa 	bl	800208c <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fbd1 	bl	80020e0 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_ETH_Stop+0x16>
 800196a:	2302      	movs	r3, #2
 800196c:	e01f      	b.n	80019ae <HAL_ETH_Stop+0x56>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fb99 	bl	80020b6 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fbc0 	bl	800210a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fb61 	bl	8002052 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fbcf 	bl	8002134 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fb21 	bl	8001fde <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_ETH_ConfigMAC+0x1c>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e0e4      	b.n	8001b9e <HAL_ETH_ConfigMAC+0x1e6>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80b1 	beq.w	8001b4e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba8 <HAL_ETH_ConfigMAC+0x1f0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001a04:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001a0a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001a10:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001a16:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001a1c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001a22:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001a28:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001a2e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001a34:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001a3a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8001a40:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8001a46:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff f9ac 	bl	8000dbc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001a74:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8001a7a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8001a80:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 8001a86:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8001a8c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8001a92:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001a9e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001aa0:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff f986 	bl	8000dbc <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001aca:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ae8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8001aee:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8001af4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 8001afa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8001b00:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff f94f 	bl	8000dbc <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff f93c 	bl	8000dbc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	61da      	str	r2, [r3, #28]
 8001b4c:	e01e      	b.n	8001b8c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001b5c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f7ff f91c 	bl	8000dbc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	ff20810f 	.word	0xff20810f

08001bac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0b0      	sub	sp, #192	@ 0xc0
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bc8:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bd0:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bf8:	e001      	b.n	8001bfe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c02:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c18:	2340      	movs	r3, #64	@ 0x40
 8001c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c84:	4baa      	ldr	r3, [pc, #680]	@ (8001f30 <ETH_MACDMAConfig+0x384>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001c8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8001c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001c90:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8001c94:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8001c98:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001c9e:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001ca0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8001ca2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001ca4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8001ca6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001cac:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8001cb0:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8001cb4:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8001cb8:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001cbc:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8001cc0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001cc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001cd4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff f86b 	bl	8000dbc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001cee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001cf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8001cf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001cf4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001cf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8001cf8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8001cfe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8001d04:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8001d0a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8001d10:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d14:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d1c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001d1e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff f846 	bl	8000dbc <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d38:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d42:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001d4c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d5c:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d60:	4013      	ands	r3, r2
 8001d62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d6a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001d70:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8001d76:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8001d7c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8001d82:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8001d88:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001d8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d9c:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7ff f807 	bl	8000dbc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001db6:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001db8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8001dbc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7fe fff2 	bl	8000dbc <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001de0:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001de6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dea:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001df0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001df4:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e06:	2304      	movs	r3, #4
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e14:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e40:	4b3c      	ldr	r3, [pc, #240]	@ (8001f34 <ETH_MACDMAConfig+0x388>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001e48:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001e4c:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001e4e:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8001e50:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001e52:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8001e54:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001e56:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8001e58:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001e5a:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8001e5c:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8001e60:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001e64:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 8001e68:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001e6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e82:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7fe ff92 	bl	8000dbc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ea6:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001eac:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 8001eb0:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001eb4:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8001eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 8001eb8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ebc:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8001ebe:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8001ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001ec2:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ecc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ed0:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7fe ff6b 	bl	8000dbc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ef4:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10d      	bne.n	8001f1a <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f18:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f808 	bl	8001f38 <ETH_MACAddressConfig>
}
 8001f28:	bf00      	nop
 8001f2a:	37c0      	adds	r7, #192	@ 0xc0
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	ff20810f 	.word	0xff20810f
 8001f34:	f8de3f23 	.word	0xf8de3f23

08001f38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3305      	adds	r3, #5
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	3204      	adds	r2, #4
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <ETH_MACAddressConfig+0x64>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3303      	adds	r3, #3
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	061a      	lsls	r2, r3, #24
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3301      	adds	r3, #1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <ETH_MACAddressConfig+0x68>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6013      	str	r3, [r2, #0]
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40028040 	.word	0x40028040
 8001fa0:	40028044 	.word	0x40028044

08001fa4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f000 f8d9 	bl	8002180 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002002:	2001      	movs	r0, #1
 8002004:	f000 f8bc 	bl	8002180 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0204 	orr.w	r2, r2, #4
 8002032:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800203c:	2001      	movs	r0, #1
 800203e:	f000 f89f 	bl	8002180 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0204 	bic.w	r2, r2, #4
 800206c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 f882 	bl	8002180 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020aa:	6193      	str	r3, [r2, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020d4:	6193      	str	r3, [r2, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020fe:	6193      	str	r3, [r2, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002128:	6193      	str	r3, [r2, #24]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002152:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002156:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002164:	2001      	movs	r0, #1
 8002166:	f000 f80b 	bl	8002180 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002174:	6193      	str	r3, [r2, #24]
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <ETH_Delay+0x34>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <ETH_Delay+0x38>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a5b      	lsrs	r3, r3, #9
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800219c:	bf00      	nop
  }
  while (Delay --);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <ETH_Delay+0x1c>
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000000 	.word	0x20000000
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	e16f      	b.n	80024ac <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8161 	beq.w	80024a6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d005      	beq.n	80021fc <HAL_GPIO_Init+0x40>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d130      	bne.n	800225e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002232:	2201      	movs	r2, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0201 	and.w	r2, r3, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b03      	cmp	r3, #3
 8002268:	d017      	beq.n	800229a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d123      	bne.n	80022ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	6939      	ldr	r1, [r7, #16]
 80022ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0203 	and.w	r2, r3, #3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80bb 	beq.w	80024a6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	4b64      	ldr	r3, [pc, #400]	@ (80024c8 <HAL_GPIO_Init+0x30c>)
 8002336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002338:	4a63      	ldr	r2, [pc, #396]	@ (80024c8 <HAL_GPIO_Init+0x30c>)
 800233a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002340:	4b61      	ldr	r3, [pc, #388]	@ (80024c8 <HAL_GPIO_Init+0x30c>)
 8002342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800234c:	4a5f      	ldr	r2, [pc, #380]	@ (80024cc <HAL_GPIO_Init+0x310>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a57      	ldr	r2, [pc, #348]	@ (80024d0 <HAL_GPIO_Init+0x314>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d031      	beq.n	80023dc <HAL_GPIO_Init+0x220>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a56      	ldr	r2, [pc, #344]	@ (80024d4 <HAL_GPIO_Init+0x318>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d02b      	beq.n	80023d8 <HAL_GPIO_Init+0x21c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a55      	ldr	r2, [pc, #340]	@ (80024d8 <HAL_GPIO_Init+0x31c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d025      	beq.n	80023d4 <HAL_GPIO_Init+0x218>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a54      	ldr	r2, [pc, #336]	@ (80024dc <HAL_GPIO_Init+0x320>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d01f      	beq.n	80023d0 <HAL_GPIO_Init+0x214>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a53      	ldr	r2, [pc, #332]	@ (80024e0 <HAL_GPIO_Init+0x324>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d019      	beq.n	80023cc <HAL_GPIO_Init+0x210>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_GPIO_Init+0x328>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_GPIO_Init+0x20c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a51      	ldr	r2, [pc, #324]	@ (80024e8 <HAL_GPIO_Init+0x32c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00d      	beq.n	80023c4 <HAL_GPIO_Init+0x208>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_GPIO_Init+0x330>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <HAL_GPIO_Init+0x204>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a4f      	ldr	r2, [pc, #316]	@ (80024f0 <HAL_GPIO_Init+0x334>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_GPIO_Init+0x200>
 80023b8:	2308      	movs	r3, #8
 80023ba:	e010      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023bc:	2309      	movs	r3, #9
 80023be:	e00e      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023c0:	2307      	movs	r3, #7
 80023c2:	e00c      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023c4:	2306      	movs	r3, #6
 80023c6:	e00a      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023c8:	2305      	movs	r3, #5
 80023ca:	e008      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023cc:	2304      	movs	r3, #4
 80023ce:	e006      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023d0:	2303      	movs	r3, #3
 80023d2:	e004      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_GPIO_Init+0x222>
 80023dc:	2300      	movs	r3, #0
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	4093      	lsls	r3, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023f0:	4936      	ldr	r1, [pc, #216]	@ (80024cc <HAL_GPIO_Init+0x310>)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002422:	4a34      	ldr	r2, [pc, #208]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800244c:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002452:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002476:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024a0:	4a14      	ldr	r2, [pc, #80]	@ (80024f4 <HAL_GPIO_Init+0x338>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f47f ae88 	bne.w	80021cc <HAL_GPIO_Init+0x10>
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40021400 	.word	0x40021400
 80024e8:	40021800 	.word	0x40021800
 80024ec:	40021c00 	.word	0x40021c00
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002514:	e003      	b.n	800251e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e101      	b.n	800273e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7fe f9f5 	bl	8000944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002568:	d102      	bne.n	8002570 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 ff14 	bl	80033a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7c1a      	ldrb	r2, [r3, #16]
 8002582:	f88d 2000 	strb.w	r2, [sp]
 8002586:	3304      	adds	r3, #4
 8002588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258a:	f000 feb1 	bl	80032f0 <USB_CoreInit>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0ce      	b.n	800273e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 ff0b 	bl	80033c2 <USB_SetCurrentMode>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0bf      	b.n	800273e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e04a      	b.n	800265a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3315      	adds	r3, #21
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3314      	adds	r3, #20
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	b298      	uxth	r0, r3
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	332e      	adds	r3, #46	@ 0x2e
 8002600:	4602      	mov	r2, r0
 8002602:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3318      	adds	r3, #24
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	331c      	adds	r3, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3320      	adds	r3, #32
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3324      	adds	r3, #36	@ 0x24
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3301      	adds	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	429a      	cmp	r2, r3
 8002662:	d3af      	bcc.n	80025c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e044      	b.n	80026f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	3301      	adds	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	791b      	ldrb	r3, [r3, #4]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3b5      	bcc.n	800266a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7c1a      	ldrb	r2, [r3, #16]
 8002706:	f88d 2000 	strb.w	r2, [sp]
 800270a:	3304      	adds	r3, #4
 800270c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270e:	f000 fea5 	bl	800345c <USB_DevInit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e00c      	b.n	800273e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f86a 	bl	8003810 <USB_DevDisconnect>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e23b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d050      	beq.n	8002808 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002766:	4b9e      	ldr	r3, [pc, #632]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d00c      	beq.n	800278c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002772:	4b9b      	ldr	r3, [pc, #620]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277a:	2b08      	cmp	r3, #8
 800277c:	d112      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4b98      	ldr	r3, [pc, #608]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800278a:	d10b      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	4b94      	ldr	r3, [pc, #592]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d036      	beq.n	8002806 <HAL_RCC_OscConfig+0xbe>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d132      	bne.n	8002806 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e216      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4b8e      	ldr	r3, [pc, #568]	@ (80029e4 <HAL_RCC_OscConfig+0x29c>)
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d013      	beq.n	80027de <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7fe faf7 	bl	8000da8 <HAL_GetTick>
 80027ba:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027be:	f7fe faf3 	bl	8000da8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	@ 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e200      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d0:	4b83      	ldr	r3, [pc, #524]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x76>
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fae3 	bl	8000da8 <HAL_GetTick>
 80027e2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e6:	f7fe fadf 	bl	8000da8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	@ 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1ec      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f8:	4b79      	ldr	r3, [pc, #484]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x9e>
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d077      	beq.n	8002904 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002814:	4b72      	ldr	r3, [pc, #456]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002820:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002828:	2b08      	cmp	r3, #8
 800282a:	d126      	bne.n	800287a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282c:	4b6c      	ldr	r3, [pc, #432]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d120      	bne.n	800287a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002838:	4b69      	ldr	r3, [pc, #420]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_OscConfig+0x108>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e1c0      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b63      	ldr	r3, [pc, #396]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	21f8      	movs	r1, #248	@ 0xf8
 800285e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	69b9      	ldr	r1, [r7, #24]
 8002862:	fa91 f1a1 	rbit	r1, r1
 8002866:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002868:	6979      	ldr	r1, [r7, #20]
 800286a:	fab1 f181 	clz	r1, r1
 800286e:	b2c9      	uxtb	r1, r1
 8002870:	408b      	lsls	r3, r1
 8002872:	495b      	ldr	r1, [pc, #364]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002878:	e044      	b.n	8002904 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d02a      	beq.n	80028d8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002882:	4b59      	ldr	r3, [pc, #356]	@ (80029e8 <HAL_RCC_OscConfig+0x2a0>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fa8e 	bl	8000da8 <HAL_GetTick>
 800288c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002890:	f7fe fa8a 	bl	8000da8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e197      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b4f      	ldr	r3, [pc, #316]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b4c      	ldr	r3, [pc, #304]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	21f8      	movs	r1, #248	@ 0xf8
 80028bc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6939      	ldr	r1, [r7, #16]
 80028c0:	fa91 f1a1 	rbit	r1, r1
 80028c4:	60f9      	str	r1, [r7, #12]
  return result;
 80028c6:	68f9      	ldr	r1, [r7, #12]
 80028c8:	fab1 f181 	clz	r1, r1
 80028cc:	b2c9      	uxtb	r1, r1
 80028ce:	408b      	lsls	r3, r1
 80028d0:	4943      	ldr	r1, [pc, #268]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
 80028d6:	e015      	b.n	8002904 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d8:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_RCC_OscConfig+0x2a0>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fa63 	bl	8000da8 <HAL_GetTick>
 80028e2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe fa5f 	bl	8000da8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e16c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f8:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d030      	beq.n	8002972 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002918:	4b34      	ldr	r3, [pc, #208]	@ (80029ec <HAL_RCC_OscConfig+0x2a4>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fa43 	bl	8000da8 <HAL_GetTick>
 8002922:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe fa3f 	bl	8000da8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e14c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002938:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1de>
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_RCC_OscConfig+0x2a4>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7fe fa2c 	bl	8000da8 <HAL_GetTick>
 8002950:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002954:	f7fe fa28 	bl	8000da8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e135      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002966:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8087 	beq.w	8002a8e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d110      	bne.n	80029b4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	4a11      	ldr	r2, [pc, #68]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029b4:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <HAL_RCC_OscConfig+0x2a8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	@ (80029f0 <HAL_RCC_OscConfig+0x2a8>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_RCC_OscConfig+0x2a8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d122      	bne.n	8002a12 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_RCC_OscConfig+0x2a8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a07      	ldr	r2, [pc, #28]	@ (80029f0 <HAL_RCC_OscConfig+0x2a8>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d8:	f7fe f9e6 	bl	8000da8 <HAL_GetTick>
 80029dc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	e012      	b.n	8002a06 <HAL_RCC_OscConfig+0x2be>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40023802 	.word	0x40023802
 80029e8:	42470000 	.word	0x42470000
 80029ec:	42470e80 	.word	0x42470e80
 80029f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe f9d8 	bl	8000da8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0e5      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b75      	ldr	r3, [pc, #468]	@ (8002bdc <HAL_RCC_OscConfig+0x494>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	4b72      	ldr	r3, [pc, #456]	@ (8002be0 <HAL_RCC_OscConfig+0x498>)
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7fe f9c0 	bl	8000da8 <HAL_GetTick>
 8002a28:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7fe f9bc 	bl	8000da8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0c7      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	4b68      	ldr	r3, [pc, #416]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ee      	beq.n	8002a2c <HAL_RCC_OscConfig+0x2e4>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe f9aa 	bl	8000da8 <HAL_GetTick>
 8002a54:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe f9a6 	bl	8000da8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0b1      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ee      	bne.n	8002a58 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a82:	4b58      	ldr	r3, [pc, #352]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a57      	ldr	r2, [pc, #348]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 809c 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a98:	4b52      	ldr	r3, [pc, #328]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d061      	beq.n	8002b68 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d146      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b4e      	ldr	r3, [pc, #312]	@ (8002be8 <HAL_RCC_OscConfig+0x4a0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe f979 	bl	8000da8 <HAL_GetTick>
 8002ab6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe f975 	bl	8000da8 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b64      	cmp	r3, #100	@ 0x64
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e082      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002acc:	4b45      	ldr	r3, [pc, #276]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad8:	4b42      	ldr	r3, [pc, #264]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4b43      	ldr	r3, [pc, #268]	@ (8002bec <HAL_RCC_OscConfig+0x4a4>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	69d1      	ldr	r1, [r2, #28]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6a12      	ldr	r2, [r2, #32]
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aee:	0192      	lsls	r2, r2, #6
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002af6:	0612      	lsls	r2, r2, #24
 8002af8:	4311      	orrs	r1, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002afe:	0852      	lsrs	r2, r2, #1
 8002b00:	3a01      	subs	r2, #1
 8002b02:	0412      	lsls	r2, r2, #16
 8002b04:	430a      	orrs	r2, r1
 8002b06:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_RCC_OscConfig+0x4a0>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe f949 	bl	8000da8 <HAL_GetTick>
 8002b16:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe f945 	bl	8000da8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	@ 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e052      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x3d2>
 8002b38:	e04a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <HAL_RCC_OscConfig+0x4a0>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe f932 	bl	8000da8 <HAL_GetTick>
 8002b44:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe f92e 	bl	8000da8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e03b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b22      	ldr	r3, [pc, #136]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x400>
 8002b66:	e033      	b.n	8002bd0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e02e      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x49c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d121      	bne.n	8002bcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d11a      	bne.n	8002bcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ba2:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d111      	bne.n	8002bcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3728      	adds	r7, #40	@ 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	40023870 	.word	0x40023870
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470060 	.word	0x42470060
 8002bec:	f0bc8000 	.word	0xf0bc8000

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0d2      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b6b      	ldr	r3, [pc, #428]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d90c      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b68      	ldr	r3, [pc, #416]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b66      	ldr	r3, [pc, #408]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0be      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c44:	4b5c      	ldr	r3, [pc, #368]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a5b      	ldr	r2, [pc, #364]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002c5c:	4b56      	ldr	r3, [pc, #344]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a55      	ldr	r2, [pc, #340]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b53      	ldr	r3, [pc, #332]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4950      	ldr	r1, [pc, #320]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d040      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e085      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b44      	ldr	r3, [pc, #272]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e079      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b40      	ldr	r3, [pc, #256]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e071      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4939      	ldr	r1, [pc, #228]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe f866 	bl	8000da8 <HAL_GetTick>
 8002cdc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fe f862 	bl	8000da8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e059      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b2a      	ldr	r3, [pc, #168]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d20c      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e03c      	b.n	8002daa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	491b      	ldr	r1, [pc, #108]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b17      	ldr	r3, [pc, #92]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4913      	ldr	r1, [pc, #76]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002d6e:	f000 f82b 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002d72:	4601      	mov	r1, r0
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d7c:	22f0      	movs	r2, #240	@ 0xf0
 8002d7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	fa92 f2a2 	rbit	r2, r2
 8002d86:	60fa      	str	r2, [r7, #12]
  return result;
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	fab2 f282 	clz	r2, r2
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	40d3      	lsrs	r3, r2
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <HAL_RCC_ClockConfig+0x1cc>)
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
 8002d96:	fa21 f303 	lsr.w	r3, r1, r3
 8002d9a:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d9e:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1d4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd ffbe 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	0800f824 	.word	0x0800f824
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dcc:	b094      	sub	sp, #80	@ 0x50
 8002dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd8:	2300      	movs	r3, #0
 8002dda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de0:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d00d      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x40>
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	f200 80e7 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x34>
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dfa:	e0e1      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b76      	ldr	r3, [pc, #472]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x210>)
 8002dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e00:	e0e1      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e02:	4b76      	ldr	r3, [pc, #472]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x214>)
 8002e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e06:	e0de      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e08:	4b72      	ldr	r3, [pc, #456]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e10:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e12:	4b70      	ldr	r3, [pc, #448]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d065      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	2200      	movs	r2, #0
 8002e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e32:	2300      	movs	r3, #0
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	f04f 0000 	mov.w	r0, #0
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	0159      	lsls	r1, r3, #5
 8002e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4c:	0150      	lsls	r0, r2, #5
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4621      	mov	r1, r4
 8002e54:	1a51      	subs	r1, r2, r1
 8002e56:	6139      	str	r1, [r7, #16]
 8002e58:	4629      	mov	r1, r5
 8002e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	018b      	lsls	r3, r1, #6
 8002e70:	4651      	mov	r1, sl
 8002e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e76:	4651      	mov	r1, sl
 8002e78:	018a      	lsls	r2, r1, #6
 8002e7a:	46d4      	mov	ip, sl
 8002e7c:	ebb2 080c 	subs.w	r8, r2, ip
 8002e80:	4659      	mov	r1, fp
 8002e82:	eb63 0901 	sbc.w	r9, r3, r1
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9a:	4690      	mov	r8, r2
 8002e9c:	4699      	mov	r9, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	eb18 0303 	adds.w	r3, r8, r3
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	eb49 0303 	adc.w	r3, r9, r3
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eba:	4629      	mov	r1, r5
 8002ebc:	024b      	lsls	r3, r1, #9
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002ec8:	4601      	mov	r1, r0
 8002eca:	024a      	lsls	r2, r1, #9
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002edc:	f7fd f972 	bl	80001c4 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee8:	e05c      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	f04f 0000 	mov.w	r0, #0
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	0159      	lsls	r1, r3, #5
 8002f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f16:	0150      	lsls	r0, r2, #5
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	46c4      	mov	ip, r8
 8002f1e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002f22:	4640      	mov	r0, r8
 8002f24:	4649      	mov	r1, r9
 8002f26:	468c      	mov	ip, r1
 8002f28:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f40:	ebb2 040a 	subs.w	r4, r2, sl
 8002f44:	eb63 050b 	sbc.w	r5, r3, fp
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	00eb      	lsls	r3, r5, #3
 8002f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	460b      	mov	r3, r1
 8002f64:	eb45 0303 	adc.w	r3, r5, r3
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f76:	4629      	mov	r1, r5
 8002f78:	028b      	lsls	r3, r1, #10
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	4604      	mov	r4, r0
 8002f80:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f84:	4601      	mov	r1, r0
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	61fa      	str	r2, [r7, #28]
 8002f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f98:	f7fd f914 	bl	80001c4 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x210>)
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3750      	adds	r7, #80	@ 0x50
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	007a1200 	.word	0x007a1200

08002fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b02      	ldr	r3, [pc, #8]	@ (8002ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002ffa:	f7ff fff1 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003008:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800300c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	fa92 f2a2 	rbit	r2, r2
 8003014:	603a      	str	r2, [r7, #0]
  return result;
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	40d3      	lsrs	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	0800f834 	.word	0x0800f834

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800303e:	f7ff ffcf 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003042:	4601      	mov	r1, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800304c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003050:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	fa92 f2a2 	rbit	r2, r2
 8003058:	603a      	str	r2, [r7, #0]
  return result;
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	fab2 f282 	clz	r2, r2
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	40d3      	lsrs	r3, r2
 8003064:	4a04      	ldr	r2, [pc, #16]	@ (8003078 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003066:	5cd3      	ldrb	r3, [r2, r3]
 8003068:	fa21 f303 	lsr.w	r3, r1, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	0800f834 	.word	0x0800f834

0800307c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e042      	b.n	8003114 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fc06 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f82b 	bl	800311c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4313      	orrs	r3, r2
 8003150:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800315c:	f023 030c 	bic.w	r3, r3, #12
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	430b      	orrs	r3, r1
 8003168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a57      	ldr	r2, [pc, #348]	@ (80032e4 <UART_SetConfig+0x1c8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <UART_SetConfig+0x78>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <UART_SetConfig+0x1cc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7ff ff50 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	e002      	b.n	80031a2 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800319c:	f7ff ff2a 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 80031a0:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031aa:	d14c      	bne.n	8003246 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	4a4a      	ldr	r2, [pc, #296]	@ (80032ec <UART_SetConfig+0x1d0>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	0119      	lsls	r1, r3, #4
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009a      	lsls	r2, r3, #2
 80031d6:	441a      	add	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e2:	4b42      	ldr	r3, [pc, #264]	@ (80032ec <UART_SetConfig+0x1d0>)
 80031e4:	fba3 0302 	umull	r0, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2064      	movs	r0, #100	@ 0x64
 80031ec:	fb00 f303 	mul.w	r3, r0, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	3332      	adds	r3, #50	@ 0x32
 80031f6:	4a3d      	ldr	r2, [pc, #244]	@ (80032ec <UART_SetConfig+0x1d0>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003204:	4419      	add	r1, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009a      	lsls	r2, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fbb2 f2f3 	udiv	r2, r2, r3
 800321c:	4b33      	ldr	r3, [pc, #204]	@ (80032ec <UART_SetConfig+0x1d0>)
 800321e:	fba3 0302 	umull	r0, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2064      	movs	r0, #100	@ 0x64
 8003226:	fb00 f303 	mul.w	r3, r0, r3
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	3332      	adds	r3, #50	@ 0x32
 8003230:	4a2e      	ldr	r2, [pc, #184]	@ (80032ec <UART_SetConfig+0x1d0>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	f003 0207 	and.w	r2, r3, #7
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	440a      	add	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003244:	e04a      	b.n	80032dc <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	4a23      	ldr	r2, [pc, #140]	@ (80032ec <UART_SetConfig+0x1d0>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	0119      	lsls	r1, r3, #4
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f2f3 	udiv	r2, r2, r3
 800327c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <UART_SetConfig+0x1d0>)
 800327e:	fba3 0302 	umull	r0, r3, r3, r2
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2064      	movs	r0, #100	@ 0x64
 8003286:	fb00 f303 	mul.w	r3, r0, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	3332      	adds	r3, #50	@ 0x32
 8003290:	4a16      	ldr	r2, [pc, #88]	@ (80032ec <UART_SetConfig+0x1d0>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800329c:	4419      	add	r1, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <UART_SetConfig+0x1d0>)
 80032b6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2064      	movs	r0, #100	@ 0x64
 80032be:	fb00 f303 	mul.w	r3, r0, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	3332      	adds	r3, #50	@ 0x32
 80032c8:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <UART_SetConfig+0x1d0>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	440a      	add	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40011000 	.word	0x40011000
 80032e8:	40011400 	.word	0x40011400
 80032ec:	51eb851f 	.word	0x51eb851f

080032f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032f0:	b084      	sub	sp, #16
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	f107 001c 	add.w	r0, r7, #28
 80032fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003302:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003306:	2b01      	cmp	r3, #1
 8003308:	d123      	bne.n	8003352 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800331e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003332:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa8f 	bl	800386a <USB_CoreReset>
 800334c:	4603      	mov	r3, r0
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e010      	b.n	8003374 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fa83 	bl	800386a <USB_CoreReset>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003374:	7fbb      	ldrb	r3, [r7, #30]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10b      	bne.n	8003392 <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f043 0206 	orr.w	r2, r3, #6
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800339e:	b004      	add	sp, #16
 80033a0:	4770      	bx	lr

080033a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d115      	bne.n	8003410 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033f0:	200a      	movs	r0, #10
 80033f2:	f7fd fce3 	bl	8000dbc <HAL_Delay>
      ms += 10U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	330a      	adds	r3, #10
 80033fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa27 	bl	8003850 <USB_GetMode>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d01e      	beq.n	8003446 <USB_SetCurrentMode+0x84>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2bc7      	cmp	r3, #199	@ 0xc7
 800340c:	d9f0      	bls.n	80033f0 <USB_SetCurrentMode+0x2e>
 800340e:	e01a      	b.n	8003446 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d115      	bne.n	8003442 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003422:	200a      	movs	r0, #10
 8003424:	f7fd fcca 	bl	8000dbc <HAL_Delay>
      ms += 10U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	330a      	adds	r3, #10
 800342c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa0e 	bl	8003850 <USB_GetMode>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <USB_SetCurrentMode+0x84>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2bc7      	cmp	r3, #199	@ 0xc7
 800343e:	d9f0      	bls.n	8003422 <USB_SetCurrentMode+0x60>
 8003440:	e001      	b.n	8003446 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e005      	b.n	8003452 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2bc8      	cmp	r3, #200	@ 0xc8
 800344a:	d101      	bne.n	8003450 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800345c:	b084      	sub	sp, #16
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800346a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e009      	b.n	8003490 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	3340      	adds	r3, #64	@ 0x40
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	2200      	movs	r2, #0
 8003488:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	3301      	adds	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b0e      	cmp	r3, #14
 8003494:	d9f2      	bls.n	800347c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003496:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11c      	bne.n	80034d8 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80034d6:	e00b      	b.n	80034f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80034f6:	461a      	mov	r2, r3
 80034f8:	2300      	movs	r3, #0
 80034fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10d      	bne.n	8003520 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800350c:	2100      	movs	r1, #0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f966 	bl	80037e0 <USB_SetDevSpeed>
 8003514:	e008      	b.n	8003528 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003516:	2101      	movs	r1, #1
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f961 	bl	80037e0 <USB_SetDevSpeed>
 800351e:	e003      	b.n	8003528 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003520:	2103      	movs	r1, #3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f95c 	bl	80037e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003528:	2110      	movs	r1, #16
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8fa 	bl	8003724 <USB_FlushTxFifo>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f923 	bl	8003786 <USB_FlushRxFifo>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003550:	461a      	mov	r2, r3
 8003552:	2300      	movs	r3, #0
 8003554:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355c:	461a      	mov	r2, r3
 800355e:	2300      	movs	r3, #0
 8003560:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003568:	461a      	mov	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	e043      	b.n	80035fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800358a:	d118      	bne.n	80035be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359e:	461a      	mov	r2, r3
 80035a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e013      	b.n	80035d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b4:	461a      	mov	r2, r3
 80035b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e008      	b.n	80035d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ca:	461a      	mov	r2, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035dc:	461a      	mov	r2, r3
 80035de:	2300      	movs	r3, #0
 80035e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ee:	461a      	mov	r2, r3
 80035f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003600:	461a      	mov	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4293      	cmp	r3, r2
 8003606:	d3b5      	bcc.n	8003574 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e043      	b.n	8003696 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003624:	d118      	bne.n	8003658 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e013      	b.n	800366a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800364e:	461a      	mov	r2, r3
 8003650:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e008      	b.n	800366a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	2300      	movs	r3, #0
 8003668:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003676:	461a      	mov	r2, r3
 8003678:	2300      	movs	r3, #0
 800367a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003688:	461a      	mov	r2, r3
 800368a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800368e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	3301      	adds	r3, #1
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800369a:	461a      	mov	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4293      	cmp	r3, r2
 80036a0:	d3b5      	bcc.n	800360e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f043 0210 	orr.w	r2, r3, #16
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <USB_DevInit+0x2c4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f043 0208 	orr.w	r2, r3, #8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800371c:	b004      	add	sp, #16
 800371e:	4770      	bx	lr
 8003720:	803c3800 	.word	0x803c3800

08003724 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800373e:	d901      	bls.n	8003744 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e01b      	b.n	800377c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	daf2      	bge.n	8003732 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	019b      	lsls	r3, r3, #6
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003768:	d901      	bls.n	800376e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e006      	b.n	800377c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b20      	cmp	r3, #32
 8003778:	d0f0      	beq.n	800375c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3301      	adds	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800379e:	d901      	bls.n	80037a4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e018      	b.n	80037d6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	daf2      	bge.n	8003792 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2210      	movs	r2, #16
 80037b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3301      	adds	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037c2:	d901      	bls.n	80037c8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e006      	b.n	80037d6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d0f0      	beq.n	80037b6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800383e:	f043 0302 	orr.w	r3, r3, #2
 8003842:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0301 	and.w	r3, r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003882:	d901      	bls.n	8003888 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e01b      	b.n	80038c0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	daf2      	bge.n	8003876 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038ac:	d901      	bls.n	80038b2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e006      	b.n	80038c0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d0f0      	beq.n	80038a0 <USB_CoreReset+0x36>

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
	...

080038cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80038d2:	4b8a      	ldr	r3, [pc, #552]	@ (8003afc <MX_LWIP_Init+0x230>)
 80038d4:	22c0      	movs	r2, #192	@ 0xc0
 80038d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80038d8:	4b88      	ldr	r3, [pc, #544]	@ (8003afc <MX_LWIP_Init+0x230>)
 80038da:	22a8      	movs	r2, #168	@ 0xa8
 80038dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80038de:	4b87      	ldr	r3, [pc, #540]	@ (8003afc <MX_LWIP_Init+0x230>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 110;
 80038e4:	4b85      	ldr	r3, [pc, #532]	@ (8003afc <MX_LWIP_Init+0x230>)
 80038e6:	226e      	movs	r2, #110	@ 0x6e
 80038e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80038ea:	4b85      	ldr	r3, [pc, #532]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80038ec:	22ff      	movs	r2, #255	@ 0xff
 80038ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80038f0:	4b83      	ldr	r3, [pc, #524]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80038f2:	22ff      	movs	r2, #255	@ 0xff
 80038f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80038f6:	4b82      	ldr	r3, [pc, #520]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80038f8:	22ff      	movs	r2, #255	@ 0xff
 80038fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80038fc:	4b80      	ldr	r3, [pc, #512]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80038fe:	2200      	movs	r2, #0
 8003900:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003902:	4b80      	ldr	r3, [pc, #512]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003908:	4b7e      	ldr	r3, [pc, #504]	@ (8003b04 <MX_LWIP_Init+0x238>)
 800390a:	2200      	movs	r2, #0
 800390c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800390e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003910:	2200      	movs	r2, #0
 8003912:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003914:	4b7b      	ldr	r3, [pc, #492]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003916:	2200      	movs	r2, #0
 8003918:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800391a:	f000 fcc7 	bl	80042ac <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800391e:	4b77      	ldr	r3, [pc, #476]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	061a      	lsls	r2, r3, #24
 8003924:	4b75      	ldr	r3, [pc, #468]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	4b73      	ldr	r3, [pc, #460]	@ (8003afc <MX_LWIP_Init+0x230>)
 800392e:	789b      	ldrb	r3, [r3, #2]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	4313      	orrs	r3, r2
 8003934:	4a71      	ldr	r2, [pc, #452]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003936:	78d2      	ldrb	r2, [r2, #3]
 8003938:	4313      	orrs	r3, r2
 800393a:	061a      	lsls	r2, r3, #24
 800393c:	4b6f      	ldr	r3, [pc, #444]	@ (8003afc <MX_LWIP_Init+0x230>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	0619      	lsls	r1, r3, #24
 8003942:	4b6e      	ldr	r3, [pc, #440]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	4319      	orrs	r1, r3
 800394a:	4b6c      	ldr	r3, [pc, #432]	@ (8003afc <MX_LWIP_Init+0x230>)
 800394c:	789b      	ldrb	r3, [r3, #2]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	430b      	orrs	r3, r1
 8003952:	496a      	ldr	r1, [pc, #424]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003954:	78c9      	ldrb	r1, [r1, #3]
 8003956:	430b      	orrs	r3, r1
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800395e:	431a      	orrs	r2, r3
 8003960:	4b66      	ldr	r3, [pc, #408]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	0619      	lsls	r1, r3, #24
 8003966:	4b65      	ldr	r3, [pc, #404]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	4319      	orrs	r1, r3
 800396e:	4b63      	ldr	r3, [pc, #396]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	430b      	orrs	r3, r1
 8003976:	4961      	ldr	r1, [pc, #388]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003978:	78c9      	ldrb	r1, [r1, #3]
 800397a:	430b      	orrs	r3, r1
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003982:	431a      	orrs	r2, r3
 8003984:	4b5d      	ldr	r3, [pc, #372]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	0619      	lsls	r1, r3, #24
 800398a:	4b5c      	ldr	r3, [pc, #368]	@ (8003afc <MX_LWIP_Init+0x230>)
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	4319      	orrs	r1, r3
 8003992:	4b5a      	ldr	r3, [pc, #360]	@ (8003afc <MX_LWIP_Init+0x230>)
 8003994:	789b      	ldrb	r3, [r3, #2]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	430b      	orrs	r3, r1
 800399a:	4958      	ldr	r1, [pc, #352]	@ (8003afc <MX_LWIP_Init+0x230>)
 800399c:	78c9      	ldrb	r1, [r1, #3]
 800399e:	430b      	orrs	r3, r1
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	4313      	orrs	r3, r2
 80039a4:	4a58      	ldr	r2, [pc, #352]	@ (8003b08 <MX_LWIP_Init+0x23c>)
 80039a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80039a8:	4b55      	ldr	r3, [pc, #340]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	061a      	lsls	r2, r3, #24
 80039ae:	4b54      	ldr	r3, [pc, #336]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	4b52      	ldr	r3, [pc, #328]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039b8:	789b      	ldrb	r3, [r3, #2]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	4313      	orrs	r3, r2
 80039be:	4a50      	ldr	r2, [pc, #320]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039c0:	78d2      	ldrb	r2, [r2, #3]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	061a      	lsls	r2, r3, #24
 80039c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	0619      	lsls	r1, r3, #24
 80039cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	4319      	orrs	r1, r3
 80039d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039d6:	789b      	ldrb	r3, [r3, #2]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	430b      	orrs	r3, r1
 80039dc:	4948      	ldr	r1, [pc, #288]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039de:	78c9      	ldrb	r1, [r1, #3]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80039e8:	431a      	orrs	r2, r3
 80039ea:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	0619      	lsls	r1, r3, #24
 80039f0:	4b43      	ldr	r3, [pc, #268]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	4319      	orrs	r1, r3
 80039f8:	4b41      	ldr	r3, [pc, #260]	@ (8003b00 <MX_LWIP_Init+0x234>)
 80039fa:	789b      	ldrb	r3, [r3, #2]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	430b      	orrs	r3, r1
 8003a00:	493f      	ldr	r1, [pc, #252]	@ (8003b00 <MX_LWIP_Init+0x234>)
 8003a02:	78c9      	ldrb	r1, [r1, #3]
 8003a04:	430b      	orrs	r3, r1
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b00 <MX_LWIP_Init+0x234>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	0619      	lsls	r1, r3, #24
 8003a14:	4b3a      	ldr	r3, [pc, #232]	@ (8003b00 <MX_LWIP_Init+0x234>)
 8003a16:	785b      	ldrb	r3, [r3, #1]
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	4319      	orrs	r1, r3
 8003a1c:	4b38      	ldr	r3, [pc, #224]	@ (8003b00 <MX_LWIP_Init+0x234>)
 8003a1e:	789b      	ldrb	r3, [r3, #2]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	430b      	orrs	r3, r1
 8003a24:	4936      	ldr	r1, [pc, #216]	@ (8003b00 <MX_LWIP_Init+0x234>)
 8003a26:	78c9      	ldrb	r1, [r1, #3]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	0e1b      	lsrs	r3, r3, #24
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	4a37      	ldr	r2, [pc, #220]	@ (8003b0c <MX_LWIP_Init+0x240>)
 8003a30:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003a32:	4b34      	ldr	r3, [pc, #208]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	061a      	lsls	r2, r3, #24
 8003a38:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	4b30      	ldr	r3, [pc, #192]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a42:	789b      	ldrb	r3, [r3, #2]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4313      	orrs	r3, r2
 8003a48:	4a2e      	ldr	r2, [pc, #184]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a4a:	78d2      	ldrb	r2, [r2, #3]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	061a      	lsls	r2, r3, #24
 8003a50:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	0619      	lsls	r1, r3, #24
 8003a56:	4b2b      	ldr	r3, [pc, #172]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	4319      	orrs	r1, r3
 8003a5e:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a60:	789b      	ldrb	r3, [r3, #2]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	430b      	orrs	r3, r1
 8003a66:	4927      	ldr	r1, [pc, #156]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a68:	78c9      	ldrb	r1, [r1, #3]
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a72:	431a      	orrs	r2, r3
 8003a74:	4b23      	ldr	r3, [pc, #140]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	0619      	lsls	r1, r3, #24
 8003a7a:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	4319      	orrs	r1, r3
 8003a82:	4b20      	ldr	r3, [pc, #128]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a84:	789b      	ldrb	r3, [r3, #2]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	491e      	ldr	r1, [pc, #120]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a8c:	78c9      	ldrb	r1, [r1, #3]
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a96:	431a      	orrs	r2, r3
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	0619      	lsls	r1, r3, #24
 8003a9e:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	4319      	orrs	r1, r3
 8003aa6:	4b17      	ldr	r3, [pc, #92]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003aa8:	789b      	ldrb	r3, [r3, #2]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	430b      	orrs	r3, r1
 8003aae:	4915      	ldr	r1, [pc, #84]	@ (8003b04 <MX_LWIP_Init+0x238>)
 8003ab0:	78c9      	ldrb	r1, [r1, #3]
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	0e1b      	lsrs	r3, r3, #24
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <MX_LWIP_Init+0x244>)
 8003aba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003abc:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <MX_LWIP_Init+0x248>)
 8003abe:	9302      	str	r3, [sp, #8]
 8003ac0:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <MX_LWIP_Init+0x24c>)
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4b11      	ldr	r3, [pc, #68]	@ (8003b10 <MX_LWIP_Init+0x244>)
 8003aca:	4a10      	ldr	r2, [pc, #64]	@ (8003b0c <MX_LWIP_Init+0x240>)
 8003acc:	490e      	ldr	r1, [pc, #56]	@ (8003b08 <MX_LWIP_Init+0x23c>)
 8003ace:	4813      	ldr	r0, [pc, #76]	@ (8003b1c <MX_LWIP_Init+0x250>)
 8003ad0:	f000 ffec 	bl	8004aac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003ad4:	4811      	ldr	r0, [pc, #68]	@ (8003b1c <MX_LWIP_Init+0x250>)
 8003ad6:	f001 f8cb 	bl	8004c70 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003ada:	4810      	ldr	r0, [pc, #64]	@ (8003b1c <MX_LWIP_Init+0x250>)
 8003adc:	f001 f8d6 	bl	8004c8c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003ae0:	490f      	ldr	r1, [pc, #60]	@ (8003b20 <MX_LWIP_Init+0x254>)
 8003ae2:	480e      	ldr	r0, [pc, #56]	@ (8003b1c <MX_LWIP_Init+0x250>)
 8003ae4:	f001 f916 	bl	8004d14 <netif_set_link_callback>

/* USER CODE BEGIN 3 */
  netif_set_up(&gnetif);
 8003ae8:	480c      	ldr	r0, [pc, #48]	@ (8003b1c <MX_LWIP_Init+0x250>)
 8003aea:	f001 f8cf 	bl	8004c8c <netif_set_up>
  netif_set_default(&gnetif);
 8003aee:	480b      	ldr	r0, [pc, #44]	@ (8003b1c <MX_LWIP_Init+0x250>)
 8003af0:	f001 f8be 	bl	8004c70 <netif_set_default>


/* USER CODE END 3 */
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200005fc 	.word	0x200005fc
 8003b00:	20000600 	.word	0x20000600
 8003b04:	20000604 	.word	0x20000604
 8003b08:	200005f0 	.word	0x200005f0
 8003b0c:	200005f4 	.word	0x200005f4
 8003b10:	200005f8 	.word	0x200005f8
 8003b14:	0800caf5 	.word	0x0800caf5
 8003b18:	080040ed 	.word	0x080040ed
 8003b1c:	200005bc 	.word	0x200005bc
 8003b20:	08004159 	.word	0x08004159

08003b24 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	@ 0x38
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a55      	ldr	r2, [pc, #340]	@ (8003c98 <HAL_ETH_MspInit+0x174>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	f040 80a4 	bne.w	8003c90 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	4b53      	ldr	r3, [pc, #332]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	4a52      	ldr	r2, [pc, #328]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b58:	4b50      	ldr	r3, [pc, #320]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b60:	623b      	str	r3, [r7, #32]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	4b4c      	ldr	r3, [pc, #304]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b74:	4b49      	ldr	r3, [pc, #292]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	4b45      	ldr	r3, [pc, #276]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	4a44      	ldr	r2, [pc, #272]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b90:	4b42      	ldr	r3, [pc, #264]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003ba6:	f043 0304 	orr.w	r3, r3, #4
 8003baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bac:	4b3b      	ldr	r3, [pc, #236]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	4b37      	ldr	r3, [pc, #220]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	4a36      	ldr	r2, [pc, #216]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bc8:	4b34      	ldr	r3, [pc, #208]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	4b30      	ldr	r3, [pc, #192]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bde:	f043 0302 	orr.w	r3, r3, #2
 8003be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	4b29      	ldr	r3, [pc, #164]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c00:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <HAL_ETH_MspInit+0x178>)
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003c0c:	2332      	movs	r3, #50	@ 0x32
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c10:	2302      	movs	r3, #2
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c1c:	230b      	movs	r3, #11
 8003c1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c24:	4619      	mov	r1, r3
 8003c26:	481e      	ldr	r0, [pc, #120]	@ (8003ca0 <HAL_ETH_MspInit+0x17c>)
 8003c28:	f7fe fac8 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003c2c:	2386      	movs	r3, #134	@ 0x86
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c3c:	230b      	movs	r3, #11
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c44:	4619      	mov	r1, r3
 8003c46:	4817      	ldr	r0, [pc, #92]	@ (8003ca4 <HAL_ETH_MspInit+0x180>)
 8003c48:	f7fe fab8 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003c4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c52:	2302      	movs	r3, #2
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c5e:	230b      	movs	r3, #11
 8003c60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c66:	4619      	mov	r1, r3
 8003c68:	480f      	ldr	r0, [pc, #60]	@ (8003ca8 <HAL_ETH_MspInit+0x184>)
 8003c6a:	f7fe faa7 	bl	80021bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003c6e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c80:	230b      	movs	r3, #11
 8003c82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4808      	ldr	r0, [pc, #32]	@ (8003cac <HAL_ETH_MspInit+0x188>)
 8003c8c:	f7fe fa96 	bl	80021bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3738      	adds	r7, #56	@ 0x38
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40028000 	.word	0x40028000
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020800 	.word	0x40020800
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40021800 	.word	0x40021800

08003cb0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8003df4 <low_level_init+0x144>)
 8003cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8003df8 <low_level_init+0x148>)
 8003cc0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8003df4 <low_level_init+0x144>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8003df4 <low_level_init+0x144>)
 8003cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cce:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003cd0:	4b48      	ldr	r3, [pc, #288]	@ (8003df4 <low_level_init+0x144>)
 8003cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cd6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003cd8:	4b46      	ldr	r3, [pc, #280]	@ (8003df4 <low_level_init+0x144>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003ce2:	2380      	movs	r3, #128	@ 0x80
 8003ce4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003ce6:	23e1      	movs	r3, #225	@ 0xe1
 8003ce8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003cea:	2300      	movs	r3, #0
 8003cec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8003df4 <low_level_init+0x144>)
 8003cf8:	f107 0308 	add.w	r3, r7, #8
 8003cfc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003df4 <low_level_init+0x144>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003d04:	4b3b      	ldr	r3, [pc, #236]	@ (8003df4 <low_level_init+0x144>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003df4 <low_level_init+0x144>)
 8003d0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d10:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003d12:	4838      	ldr	r0, [pc, #224]	@ (8003df4 <low_level_init+0x144>)
 8003d14:	f7fd f95a 	bl	8000fcc <HAL_ETH_Init>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003d34:	2304      	movs	r3, #4
 8003d36:	4a31      	ldr	r2, [pc, #196]	@ (8003dfc <low_level_init+0x14c>)
 8003d38:	4931      	ldr	r1, [pc, #196]	@ (8003e00 <low_level_init+0x150>)
 8003d3a:	482e      	ldr	r0, [pc, #184]	@ (8003df4 <low_level_init+0x144>)
 8003d3c:	f7fd fad2 	bl	80012e4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003d40:	2304      	movs	r3, #4
 8003d42:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <low_level_init+0x154>)
 8003d44:	4930      	ldr	r1, [pc, #192]	@ (8003e08 <low_level_init+0x158>)
 8003d46:	482b      	ldr	r0, [pc, #172]	@ (8003df4 <low_level_init+0x144>)
 8003d48:	f7fd fb33 	bl	80013b2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2206      	movs	r2, #6
 8003d50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003d54:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <low_level_init+0x144>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003d60:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <low_level_init+0x144>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	785a      	ldrb	r2, [r3, #1]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003d6c:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <low_level_init+0x144>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	789a      	ldrb	r2, [r3, #2]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003d78:	4b1e      	ldr	r3, [pc, #120]	@ (8003df4 <low_level_init+0x144>)
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	78da      	ldrb	r2, [r3, #3]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003d84:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <low_level_init+0x144>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	791a      	ldrb	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003d90:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <low_level_init+0x144>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	795a      	ldrb	r2, [r3, #5]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003da2:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003daa:	f043 030a 	orr.w	r3, r3, #10
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003db6:	480f      	ldr	r0, [pc, #60]	@ (8003df4 <low_level_init+0x144>)
 8003db8:	f7fd fd9f 	bl	80018fa <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003dbc:	f107 0310 	add.w	r3, r7, #16
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	211d      	movs	r1, #29
 8003dc4:	480b      	ldr	r0, [pc, #44]	@ (8003df4 <low_level_init+0x144>)
 8003dc6:	f7fd fcca 	bl	800175e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f043 030b 	orr.w	r3, r3, #11
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	211d      	movs	r1, #29
 8003dd8:	4806      	ldr	r0, [pc, #24]	@ (8003df4 <low_level_init+0x144>)
 8003dda:	f7fd fd28 	bl	800182e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	461a      	mov	r2, r3
 8003de4:	211d      	movs	r1, #29
 8003de6:	4803      	ldr	r0, [pc, #12]	@ (8003df4 <low_level_init+0x144>)
 8003de8:	f7fd fcb9 	bl	800175e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003dec:	bf00      	nop
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	200036a8 	.word	0x200036a8
 8003df8:	40028000 	.word	0x40028000
 8003dfc:	20001ed8 	.word	0x20001ed8
 8003e00:	20000688 	.word	0x20000688
 8003e04:	20000708 	.word	0x20000708
 8003e08:	20000608 	.word	0x20000608

08003e0c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	@ 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003e16:	4b4b      	ldr	r3, [pc, #300]	@ (8003f44 <low_level_output+0x138>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003e2e:	4b45      	ldr	r3, [pc, #276]	@ (8003f44 <low_level_output+0x138>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	e05a      	b.n	8003ef4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da03      	bge.n	8003e4e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003e46:	23f8      	movs	r3, #248	@ 0xf8
 8003e48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8003e4c:	e05c      	b.n	8003f08 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	895b      	ldrh	r3, [r3, #10]
 8003e52:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003e58:	e02f      	b.n	8003eba <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	18d0      	adds	r0, r2, r3
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	18d1      	adds	r1, r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8003e6e:	3304      	adds	r3, #4
 8003e70:	461a      	mov	r2, r3
 8003e72:	f009 f8ba 	bl	800cfea <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	da03      	bge.n	8003e8c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003e84:	23f8      	movs	r3, #248	@ 0xf8
 8003e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8003e8a:	e03d      	b.n	8003f08 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003e9c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003ea8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003eb4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d8c8      	bhi.n	8003e5a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	18d0      	adds	r0, r2, r3
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f009 f886 	bl	800cfea <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1a1      	bne.n	8003e3e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003efa:	6979      	ldr	r1, [r7, #20]
 8003efc:	4811      	ldr	r0, [pc, #68]	@ (8003f44 <low_level_output+0x138>)
 8003efe:	f7fd fac3 	bl	8001488 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003f08:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <low_level_output+0x138>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <low_level_output+0x138>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f22:	461a      	mov	r2, r3
 8003f24:	2320      	movs	r3, #32
 8003f26:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003f28:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <low_level_output+0x138>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f30:	461a      	mov	r2, r3
 8003f32:	2300      	movs	r3, #0
 8003f34:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003f36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3728      	adds	r7, #40	@ 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200036a8 	.word	0x200036a8

08003f48 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003f6c:	484e      	ldr	r0, [pc, #312]	@ (80040a8 <low_level_input+0x160>)
 8003f6e:	f7fd fb73 	bl	8001658 <HAL_ETH_GetReceivedFrame>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <low_level_input+0x34>

    return NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e090      	b.n	800409e <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80040a8 <low_level_input+0x160>)
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f80:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003f82:	4b49      	ldr	r3, [pc, #292]	@ (80040a8 <low_level_input+0x160>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
 8003f90:	2203      	movs	r2, #3
 8003f92:	4619      	mov	r1, r3
 8003f94:	2004      	movs	r0, #4
 8003f96:	f000 fefd 	bl	8004d94 <pbuf_alloc>
 8003f9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d04b      	beq.n	800403a <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003fa2:	4b41      	ldr	r3, [pc, #260]	@ (80040a8 <low_level_input+0x160>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb0:	e040      	b.n	8004034 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	895b      	ldrh	r3, [r3, #10]
 8003fb6:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003fbc:	e021      	b.n	8004002 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	18d0      	adds	r0, r2, r3
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	18d1      	adds	r1, r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f009 f808 	bl	800cfea <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003ff0:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003ffc:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800400c:	4293      	cmp	r3, r2
 800400e:	d8d6      	bhi.n	8003fbe <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	18d0      	adds	r0, r2, r3
 8004018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4619      	mov	r1, r3
 8004022:	f008 ffe2 	bl	800cfea <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1bb      	bne.n	8003fb2 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800403a:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <low_level_input+0x160>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	e00b      	b.n	800405e <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	3301      	adds	r3, #1
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <low_level_input+0x160>)
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d3ee      	bcc.n	8004046 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004068:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <low_level_input+0x160>)
 800406a:	2200      	movs	r2, #0
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800406e:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <low_level_input+0x160>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004080:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <low_level_input+0x160>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004088:	461a      	mov	r2, r3
 800408a:	2380      	movs	r3, #128	@ 0x80
 800408c:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <low_level_input+0x160>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004096:	461a      	mov	r2, r3
 8004098:	2300      	movs	r3, #0
 800409a:	6093      	str	r3, [r2, #8]
  }
  return p;
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3730      	adds	r7, #48	@ 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200036a8 	.word	0x200036a8

080040ac <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff47 	bl	8003f48 <low_level_input>
 80040ba:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	4798      	blx	r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80040d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f001 f9d3 	bl	8005484 <pbuf_free>
    p = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e000      	b.n	80040e6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80040e4:	bf00      	nop
  }
}
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <ethernetif_init+0x1c>
 80040fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004134 <ethernetif_init+0x48>)
 80040fc:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8004100:	490d      	ldr	r1, [pc, #52]	@ (8004138 <ethernetif_init+0x4c>)
 8004102:	480e      	ldr	r0, [pc, #56]	@ (800413c <ethernetif_init+0x50>)
 8004104:	f008 fe96 	bl	800ce34 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2273      	movs	r2, #115	@ 0x73
 800410c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->name[1] = IFNAME1;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2274      	movs	r2, #116	@ 0x74
 8004114:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a09      	ldr	r2, [pc, #36]	@ (8004140 <ethernetif_init+0x54>)
 800411c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <ethernetif_init+0x58>)
 8004122:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fdc3 	bl	8003cb0 <low_level_init>

  return ERR_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	0800db6c 	.word	0x0800db6c
 8004138:	0800db88 	.word	0x0800db88
 800413c:	0800db98 	.word	0x0800db98
 8004140:	0800b0e1 	.word	0x0800b0e1
 8004144:	08003e0d 	.word	0x08003e0d

08004148 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800414c:	f7fc fe2c 	bl	8000da8 <HAL_GetTick>
 8004150:	4603      	mov	r3, r0
}
 8004152:	4618      	mov	r0, r3
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d05d      	beq.n	8004236 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800417a:	4b34      	ldr	r3, [pc, #208]	@ (800424c <ethernetif_update_config+0xf4>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d03f      	beq.n	8004202 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004182:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004186:	2100      	movs	r1, #0
 8004188:	4830      	ldr	r0, [pc, #192]	@ (800424c <ethernetif_update_config+0xf4>)
 800418a:	f7fd fb50 	bl	800182e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800418e:	f7fc fe0b 	bl	8000da8 <HAL_GetTick>
 8004192:	4603      	mov	r3, r0
 8004194:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	461a      	mov	r2, r3
 800419c:	2101      	movs	r1, #1
 800419e:	482b      	ldr	r0, [pc, #172]	@ (800424c <ethernetif_update_config+0xf4>)
 80041a0:	f7fd fadd 	bl	800175e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80041a4:	f7fc fe00 	bl	8000da8 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041b2:	d828      	bhi.n	8004206 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0eb      	beq.n	8004196 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80041be:	f107 0308 	add.w	r3, r7, #8
 80041c2:	461a      	mov	r2, r3
 80041c4:	2110      	movs	r1, #16
 80041c6:	4821      	ldr	r0, [pc, #132]	@ (800424c <ethernetif_update_config+0xf4>)
 80041c8:	f7fd fac9 	bl	800175e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80041d6:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <ethernetif_update_config+0xf4>)
 80041d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	e002      	b.n	80041e6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80041e0:	4b1a      	ldr	r3, [pc, #104]	@ (800424c <ethernetif_update_config+0xf4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80041f0:	4b16      	ldr	r3, [pc, #88]	@ (800424c <ethernetif_update_config+0xf4>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	e016      	b.n	8004226 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80041f8:	4b14      	ldr	r3, [pc, #80]	@ (800424c <ethernetif_update_config+0xf4>)
 80041fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	e011      	b.n	8004226 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <ethernetif_update_config+0xb0>
          goto error;
 8004206:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004208:	4b10      	ldr	r3, [pc, #64]	@ (800424c <ethernetif_update_config+0xf4>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	08db      	lsrs	r3, r3, #3
 800420e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004210:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <ethernetif_update_config+0xf4>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004218:	4313      	orrs	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	2100      	movs	r1, #0
 8004220:	480a      	ldr	r0, [pc, #40]	@ (800424c <ethernetif_update_config+0xf4>)
 8004222:	f7fd fb04 	bl	800182e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004226:	2100      	movs	r1, #0
 8004228:	4808      	ldr	r0, [pc, #32]	@ (800424c <ethernetif_update_config+0xf4>)
 800422a:	f7fd fbc5 	bl	80019b8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800422e:	4807      	ldr	r0, [pc, #28]	@ (800424c <ethernetif_update_config+0xf4>)
 8004230:	f7fd fb63 	bl	80018fa <HAL_ETH_Start>
 8004234:	e002      	b.n	800423c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004236:	4805      	ldr	r0, [pc, #20]	@ (800424c <ethernetif_update_config+0xf4>)
 8004238:	f7fd fb8e 	bl	8001958 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f807 	bl	8004250 <ethernetif_notify_conn_changed>
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200036a8 	.word	0x200036a8

08004250 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	ba5b      	rev16	r3, r3
 8004270:	b29b      	uxth	r3, r3
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	061a      	lsls	r2, r3, #24
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	0e1b      	lsrs	r3, r3, #24
 80042a0:	4313      	orrs	r3, r2
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80042b6:	f000 f8a7 	bl	8004408 <mem_init>
  memp_init();
 80042ba:	f000 fb37 	bl	800492c <memp_init>
  pbuf_init();
  netif_init();
 80042be:	f000 fbef 	bl	8004aa0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80042c2:	f005 fff9 	bl	800a2b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80042c6:	f001 fb55 	bl	8005974 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80042ca:	f005 fed7 	bl	800a07c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80042e0:	4b40      	ldr	r3, [pc, #256]	@ (80043e4 <plug_holes+0x10c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d206      	bcs.n	80042f8 <plug_holes+0x20>
 80042ea:	4b3f      	ldr	r3, [pc, #252]	@ (80043e8 <plug_holes+0x110>)
 80042ec:	f240 125d 	movw	r2, #349	@ 0x15d
 80042f0:	493e      	ldr	r1, [pc, #248]	@ (80043ec <plug_holes+0x114>)
 80042f2:	483f      	ldr	r0, [pc, #252]	@ (80043f0 <plug_holes+0x118>)
 80042f4:	f008 fd9e 	bl	800ce34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80042f8:	4b3e      	ldr	r3, [pc, #248]	@ (80043f4 <plug_holes+0x11c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d306      	bcc.n	8004310 <plug_holes+0x38>
 8004302:	4b39      	ldr	r3, [pc, #228]	@ (80043e8 <plug_holes+0x110>)
 8004304:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004308:	493b      	ldr	r1, [pc, #236]	@ (80043f8 <plug_holes+0x120>)
 800430a:	4839      	ldr	r0, [pc, #228]	@ (80043f0 <plug_holes+0x118>)
 800430c:	f008 fd92 	bl	800ce34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	791b      	ldrb	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <plug_holes+0x4e>
 8004318:	4b33      	ldr	r3, [pc, #204]	@ (80043e8 <plug_holes+0x110>)
 800431a:	f240 125f 	movw	r2, #351	@ 0x15f
 800431e:	4937      	ldr	r1, [pc, #220]	@ (80043fc <plug_holes+0x124>)
 8004320:	4833      	ldr	r0, [pc, #204]	@ (80043f0 <plug_holes+0x118>)
 8004322:	f008 fd87 	bl	800ce34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800432e:	d906      	bls.n	800433e <plug_holes+0x66>
 8004330:	4b2d      	ldr	r3, [pc, #180]	@ (80043e8 <plug_holes+0x110>)
 8004332:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 8004336:	4932      	ldr	r1, [pc, #200]	@ (8004400 <plug_holes+0x128>)
 8004338:	482d      	ldr	r0, [pc, #180]	@ (80043f0 <plug_holes+0x118>)
 800433a:	f008 fd7b 	bl	800ce34 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800433e:	4b29      	ldr	r3, [pc, #164]	@ (80043e4 <plug_holes+0x10c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	8812      	ldrh	r2, [r2, #0]
 8004346:	4413      	add	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	429a      	cmp	r2, r3
 8004350:	d01f      	beq.n	8004392 <plug_holes+0xba>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	791b      	ldrb	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11b      	bne.n	8004392 <plug_holes+0xba>
 800435a:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <plug_holes+0x11c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	429a      	cmp	r2, r3
 8004362:	d016      	beq.n	8004392 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004364:	4b27      	ldr	r3, [pc, #156]	@ (8004404 <plug_holes+0x12c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	429a      	cmp	r2, r3
 800436c:	d102      	bne.n	8004374 <plug_holes+0x9c>
      lfree = mem;
 800436e:	4a25      	ldr	r2, [pc, #148]	@ (8004404 <plug_holes+0x12c>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800437c:	4b19      	ldr	r3, [pc, #100]	@ (80043e4 <plug_holes+0x10c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	1ad1      	subs	r1, r2, r3
 8004384:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <plug_holes+0x10c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	4413      	add	r3, r2
 800438e:	b28a      	uxth	r2, r1
 8004390:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <plug_holes+0x10c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	8852      	ldrh	r2, [r2, #2]
 800439a:	4413      	add	r3, r2
 800439c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d01a      	beq.n	80043dc <plug_holes+0x104>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80043ae:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <plug_holes+0x12c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d102      	bne.n	80043be <plug_holes+0xe6>
      lfree = pmem;
 80043b8:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <plug_holes+0x12c>)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80043c6:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <plug_holes+0x10c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	1ad1      	subs	r1, r2, r3
 80043ce:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <plug_holes+0x10c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	8812      	ldrh	r2, [r2, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	b28a      	uxth	r2, r1
 80043da:	805a      	strh	r2, [r3, #2]
  }
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20003d5c 	.word	0x20003d5c
 80043e8:	0800dbc0 	.word	0x0800dbc0
 80043ec:	0800dbf0 	.word	0x0800dbf0
 80043f0:	0800dc08 	.word	0x0800dc08
 80043f4:	20003d60 	.word	0x20003d60
 80043f8:	0800dc30 	.word	0x0800dc30
 80043fc:	0800dc4c 	.word	0x0800dc4c
 8004400:	0800dc68 	.word	0x0800dc68
 8004404:	20003d64 	.word	0x20003d64

08004408 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800440e:	4b18      	ldr	r3, [pc, #96]	@ (8004470 <mem_init+0x68>)
 8004410:	3303      	adds	r3, #3
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	461a      	mov	r2, r3
 8004418:	4b16      	ldr	r3, [pc, #88]	@ (8004474 <mem_init+0x6c>)
 800441a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800441c:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <mem_init+0x6c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004428:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8004436:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <mem_init+0x6c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800443e:	4a0e      	ldr	r2, [pc, #56]	@ (8004478 <mem_init+0x70>)
 8004440:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <mem_init+0x70>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <mem_init+0x70>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004452:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004454:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <mem_init+0x70>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800445c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800445e:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <mem_init+0x6c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a06      	ldr	r2, [pc, #24]	@ (800447c <mem_init+0x74>)
 8004464:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	20003708 	.word	0x20003708
 8004474:	20003d5c 	.word	0x20003d5c
 8004478:	20003d60 	.word	0x20003d60
 800447c:	20003d64 	.word	0x20003d64

08004480 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d043      	beq.n	8004516 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d006      	beq.n	80044a6 <mem_free+0x26>
 8004498:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <mem_free+0xa4>)
 800449a:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 800449e:	4922      	ldr	r1, [pc, #136]	@ (8004528 <mem_free+0xa8>)
 80044a0:	4822      	ldr	r0, [pc, #136]	@ (800452c <mem_free+0xac>)
 80044a2:	f008 fcc7 	bl	800ce34 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80044a6:	4b22      	ldr	r3, [pc, #136]	@ (8004530 <mem_free+0xb0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d304      	bcc.n	80044ba <mem_free+0x3a>
 80044b0:	4b20      	ldr	r3, [pc, #128]	@ (8004534 <mem_free+0xb4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d306      	bcc.n	80044c8 <mem_free+0x48>
 80044ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004524 <mem_free+0xa4>)
 80044bc:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80044c0:	491d      	ldr	r1, [pc, #116]	@ (8004538 <mem_free+0xb8>)
 80044c2:	481a      	ldr	r0, [pc, #104]	@ (800452c <mem_free+0xac>)
 80044c4:	f008 fcb6 	bl	800ce34 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80044c8:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <mem_free+0xb0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d323      	bcc.n	800451a <mem_free+0x9a>
 80044d2:	4b18      	ldr	r3, [pc, #96]	@ (8004534 <mem_free+0xb4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d21e      	bcs.n	800451a <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3b08      	subs	r3, #8
 80044e0:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	791b      	ldrb	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <mem_free+0x78>
 80044ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <mem_free+0xa4>)
 80044ec:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 80044f0:	4912      	ldr	r1, [pc, #72]	@ (800453c <mem_free+0xbc>)
 80044f2:	480e      	ldr	r0, [pc, #56]	@ (800452c <mem_free+0xac>)
 80044f4:	f008 fc9e 	bl	800ce34 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80044fe:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <mem_free+0xc0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d202      	bcs.n	800450e <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004508:	4a0d      	ldr	r2, [pc, #52]	@ (8004540 <mem_free+0xc0>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff fee2 	bl	80042d8 <plug_holes>
 8004514:	e002      	b.n	800451c <mem_free+0x9c>
    return;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <mem_free+0x9c>
    return;
 800451a:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	0800dbc0 	.word	0x0800dbc0
 8004528:	0800dc94 	.word	0x0800dc94
 800452c:	0800dc08 	.word	0x0800dc08
 8004530:	20003d5c 	.word	0x20003d5c
 8004534:	20003d60 	.word	0x20003d60
 8004538:	0800dcb8 	.word	0x0800dcb8
 800453c:	0800dcd0 	.word	0x0800dcd0
 8004540:	20003d64 	.word	0x20003d64

08004544 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	3303      	adds	r3, #3
 8004554:	b29b      	uxth	r3, r3
 8004556:	f023 0303 	bic.w	r3, r3, #3
 800455a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	2b0b      	cmp	r3, #11
 8004560:	d801      	bhi.n	8004566 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004562:	230c      	movs	r3, #12
 8004564:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800456c:	d901      	bls.n	8004572 <mem_trim+0x2e>
    return NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	e0b1      	b.n	80046d6 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004572:	4b5b      	ldr	r3, [pc, #364]	@ (80046e0 <mem_trim+0x19c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d304      	bcc.n	8004586 <mem_trim+0x42>
 800457c:	4b59      	ldr	r3, [pc, #356]	@ (80046e4 <mem_trim+0x1a0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	d306      	bcc.n	8004594 <mem_trim+0x50>
 8004586:	4b58      	ldr	r3, [pc, #352]	@ (80046e8 <mem_trim+0x1a4>)
 8004588:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800458c:	4957      	ldr	r1, [pc, #348]	@ (80046ec <mem_trim+0x1a8>)
 800458e:	4858      	ldr	r0, [pc, #352]	@ (80046f0 <mem_trim+0x1ac>)
 8004590:	f008 fc50 	bl	800ce34 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004594:	4b52      	ldr	r3, [pc, #328]	@ (80046e0 <mem_trim+0x19c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d304      	bcc.n	80045a8 <mem_trim+0x64>
 800459e:	4b51      	ldr	r3, [pc, #324]	@ (80046e4 <mem_trim+0x1a0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d301      	bcc.n	80045ac <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	e094      	b.n	80046d6 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b08      	subs	r3, #8
 80045b0:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80045b2:	4b4b      	ldr	r3, [pc, #300]	@ (80046e0 <mem_trim+0x19c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	881a      	ldrh	r2, [r3, #0]
 80045c0:	8a7b      	ldrh	r3, [r7, #18]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b08      	subs	r3, #8
 80045c8:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	8a3b      	ldrh	r3, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d906      	bls.n	80045e0 <mem_trim+0x9c>
 80045d2:	4b45      	ldr	r3, [pc, #276]	@ (80046e8 <mem_trim+0x1a4>)
 80045d4:	f240 2206 	movw	r2, #518	@ 0x206
 80045d8:	4946      	ldr	r1, [pc, #280]	@ (80046f4 <mem_trim+0x1b0>)
 80045da:	4845      	ldr	r0, [pc, #276]	@ (80046f0 <mem_trim+0x1ac>)
 80045dc:	f008 fc2a 	bl	800ce34 <iprintf>
  if (newsize > size) {
 80045e0:	887a      	ldrh	r2, [r7, #2]
 80045e2:	8a3b      	ldrh	r3, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d901      	bls.n	80045ec <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e074      	b.n	80046d6 <mem_trim+0x192>
  }
  if (newsize == size) {
 80045ec:	887a      	ldrh	r2, [r7, #2]
 80045ee:	8a3b      	ldrh	r3, [r7, #16]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d101      	bne.n	80045f8 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	e06e      	b.n	80046d6 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80045f8:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <mem_trim+0x19c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	8812      	ldrh	r2, [r2, #0]
 8004600:	4413      	add	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d131      	bne.n	8004670 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004612:	8a7a      	ldrh	r2, [r7, #18]
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	4413      	add	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	3308      	adds	r3, #8
 800461c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800461e:	4b36      	ldr	r3, [pc, #216]	@ (80046f8 <mem_trim+0x1b4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	429a      	cmp	r2, r3
 8004626:	d105      	bne.n	8004634 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004628:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <mem_trim+0x19c>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	897b      	ldrh	r3, [r7, #10]
 800462e:	4413      	add	r3, r2
 8004630:	4a31      	ldr	r2, [pc, #196]	@ (80046f8 <mem_trim+0x1b4>)
 8004632:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004634:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <mem_trim+0x19c>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	897b      	ldrh	r3, [r7, #10]
 800463a:	4413      	add	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	893a      	ldrh	r2, [r7, #8]
 8004648:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8a7a      	ldrh	r2, [r7, #18]
 800464e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	897a      	ldrh	r2, [r7, #10]
 8004654:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800465e:	d039      	beq.n	80046d4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004660:	4b1f      	ldr	r3, [pc, #124]	@ (80046e0 <mem_trim+0x19c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	8812      	ldrh	r2, [r2, #0]
 8004668:	4413      	add	r3, r2
 800466a:	897a      	ldrh	r2, [r7, #10]
 800466c:	805a      	strh	r2, [r3, #2]
 800466e:	e031      	b.n	80046d4 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004670:	887b      	ldrh	r3, [r7, #2]
 8004672:	f103 0214 	add.w	r2, r3, #20
 8004676:	8a3b      	ldrh	r3, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d82b      	bhi.n	80046d4 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800467c:	8a7a      	ldrh	r2, [r7, #18]
 800467e:	887b      	ldrh	r3, [r7, #2]
 8004680:	4413      	add	r3, r2
 8004682:	b29b      	uxth	r3, r3
 8004684:	3308      	adds	r3, #8
 8004686:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004688:	4b15      	ldr	r3, [pc, #84]	@ (80046e0 <mem_trim+0x19c>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	897b      	ldrh	r3, [r7, #10]
 800468e:	4413      	add	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004692:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <mem_trim+0x1b4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	429a      	cmp	r2, r3
 800469a:	d202      	bcs.n	80046a2 <mem_trim+0x15e>
      lfree = mem2;
 800469c:	4a16      	ldr	r2, [pc, #88]	@ (80046f8 <mem_trim+0x1b4>)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	881a      	ldrh	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8a7a      	ldrh	r2, [r7, #18]
 80046b4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	897a      	ldrh	r2, [r7, #10]
 80046ba:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046c4:	d006      	beq.n	80046d4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <mem_trim+0x19c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	8812      	ldrh	r2, [r2, #0]
 80046ce:	4413      	add	r3, r2
 80046d0:	897a      	ldrh	r2, [r7, #10]
 80046d2:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80046d4:	687b      	ldr	r3, [r7, #4]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20003d5c 	.word	0x20003d5c
 80046e4:	20003d60 	.word	0x20003d60
 80046e8:	0800dbc0 	.word	0x0800dbc0
 80046ec:	0800dce4 	.word	0x0800dce4
 80046f0:	0800dc08 	.word	0x0800dc08
 80046f4:	0800dcfc 	.word	0x0800dcfc
 80046f8:	20003d64 	.word	0x20003d64

080046fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <mem_malloc+0x14>
    return NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	e0c7      	b.n	80048a0 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	3303      	adds	r3, #3
 8004714:	b29b      	uxth	r3, r3
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	2b0b      	cmp	r3, #11
 8004720:	d801      	bhi.n	8004726 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004722:	230c      	movs	r3, #12
 8004724:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800472c:	d901      	bls.n	8004732 <mem_malloc+0x36>
    return NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	e0b6      	b.n	80048a0 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004732:	4b5d      	ldr	r3, [pc, #372]	@ (80048a8 <mem_malloc+0x1ac>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b5d      	ldr	r3, [pc, #372]	@ (80048ac <mem_malloc+0x1b0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	83fb      	strh	r3, [r7, #30]
 800473e:	e0a7      	b.n	8004890 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004740:	4b5a      	ldr	r3, [pc, #360]	@ (80048ac <mem_malloc+0x1b0>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	8bfb      	ldrh	r3, [r7, #30]
 8004746:	4413      	add	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	791b      	ldrb	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f040 8098 	bne.w	8004884 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	8bfb      	ldrh	r3, [r7, #30]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f1a3 0208 	sub.w	r2, r3, #8
 8004762:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004764:	429a      	cmp	r2, r3
 8004766:	f0c0 808d 	bcc.w	8004884 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	8bfb      	ldrh	r3, [r7, #30]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f1a3 0208 	sub.w	r2, r3, #8
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	3314      	adds	r3, #20
 800477c:	429a      	cmp	r2, r3
 800477e:	d327      	bcc.n	80047d0 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004780:	8bfa      	ldrh	r2, [r7, #30]
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	4413      	add	r3, r2
 8004786:	b29b      	uxth	r3, r3
 8004788:	3308      	adds	r3, #8
 800478a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800478c:	4b47      	ldr	r3, [pc, #284]	@ (80048ac <mem_malloc+0x1b0>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	8a7b      	ldrh	r3, [r7, #18]
 8004792:	4413      	add	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	881a      	ldrh	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8bfa      	ldrh	r2, [r7, #30]
 80047a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	8a7a      	ldrh	r2, [r7, #18]
 80047ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2201      	movs	r2, #1
 80047b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80047be:	d00a      	beq.n	80047d6 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80047c0:	4b3a      	ldr	r3, [pc, #232]	@ (80048ac <mem_malloc+0x1b0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	8812      	ldrh	r2, [r2, #0]
 80047c8:	4413      	add	r3, r2
 80047ca:	8a7a      	ldrh	r2, [r7, #18]
 80047cc:	805a      	strh	r2, [r3, #2]
 80047ce:	e002      	b.n	80047d6 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2201      	movs	r2, #1
 80047d4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80047d6:	4b34      	ldr	r3, [pc, #208]	@ (80048a8 <mem_malloc+0x1ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d127      	bne.n	8004830 <mem_malloc+0x134>
          struct mem *cur = lfree;
 80047e0:	4b31      	ldr	r3, [pc, #196]	@ (80048a8 <mem_malloc+0x1ac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80047e6:	e005      	b.n	80047f4 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80047e8:	4b30      	ldr	r3, [pc, #192]	@ (80048ac <mem_malloc+0x1b0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	8812      	ldrh	r2, [r2, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	791b      	ldrb	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <mem_malloc+0x10a>
 80047fc:	4b2c      	ldr	r3, [pc, #176]	@ (80048b0 <mem_malloc+0x1b4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d1f0      	bne.n	80047e8 <mem_malloc+0xec>
          }
          lfree = cur;
 8004806:	4a28      	ldr	r2, [pc, #160]	@ (80048a8 <mem_malloc+0x1ac>)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800480c:	4b26      	ldr	r3, [pc, #152]	@ (80048a8 <mem_malloc+0x1ac>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <mem_malloc+0x1b4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d00b      	beq.n	8004830 <mem_malloc+0x134>
 8004818:	4b23      	ldr	r3, [pc, #140]	@ (80048a8 <mem_malloc+0x1ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	791b      	ldrb	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <mem_malloc+0x134>
 8004822:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <mem_malloc+0x1b8>)
 8004824:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8004828:	4923      	ldr	r1, [pc, #140]	@ (80048b8 <mem_malloc+0x1bc>)
 800482a:	4824      	ldr	r0, [pc, #144]	@ (80048bc <mem_malloc+0x1c0>)
 800482c:	f008 fb02 	bl	800ce34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4413      	add	r3, r2
 8004836:	3308      	adds	r3, #8
 8004838:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <mem_malloc+0x1b4>)
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	4293      	cmp	r3, r2
 800483e:	d906      	bls.n	800484e <mem_malloc+0x152>
 8004840:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <mem_malloc+0x1b8>)
 8004842:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8004846:	491e      	ldr	r1, [pc, #120]	@ (80048c0 <mem_malloc+0x1c4>)
 8004848:	481c      	ldr	r0, [pc, #112]	@ (80048bc <mem_malloc+0x1c0>)
 800484a:	f008 faf3 	bl	800ce34 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <mem_malloc+0x16a>
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <mem_malloc+0x1b8>)
 800485a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800485e:	4919      	ldr	r1, [pc, #100]	@ (80048c4 <mem_malloc+0x1c8>)
 8004860:	4816      	ldr	r0, [pc, #88]	@ (80048bc <mem_malloc+0x1c0>)
 8004862:	f008 fae7 	bl	800ce34 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <mem_malloc+0x182>
 8004870:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <mem_malloc+0x1b8>)
 8004872:	f240 22d7 	movw	r2, #727	@ 0x2d7
 8004876:	4914      	ldr	r1, [pc, #80]	@ (80048c8 <mem_malloc+0x1cc>)
 8004878:	4810      	ldr	r0, [pc, #64]	@ (80048bc <mem_malloc+0x1c0>)
 800487a:	f008 fadb 	bl	800ce34 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	3308      	adds	r3, #8
 8004882:	e00d      	b.n	80048a0 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004884:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <mem_malloc+0x1b0>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	8bfb      	ldrh	r3, [r7, #30]
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004890:	8bfa      	ldrh	r2, [r7, #30]
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8004898:	429a      	cmp	r2, r3
 800489a:	f4ff af51 	bcc.w	8004740 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20003d64 	.word	0x20003d64
 80048ac:	20003d5c 	.word	0x20003d5c
 80048b0:	20003d60 	.word	0x20003d60
 80048b4:	0800dbc0 	.word	0x0800dbc0
 80048b8:	0800dd1c 	.word	0x0800dd1c
 80048bc:	0800dc08 	.word	0x0800dc08
 80048c0:	0800dd38 	.word	0x0800dd38
 80048c4:	0800dd68 	.word	0x0800dd68
 80048c8:	0800dd98 	.word	0x0800dd98

080048cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	3303      	adds	r3, #3
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e011      	b.n	8004912 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4413      	add	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	885b      	ldrh	r3, [r3, #2]
 8004916:	461a      	mov	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4293      	cmp	r3, r2
 800491c:	dbe7      	blt.n	80048ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
	...

0800492c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004932:	2300      	movs	r3, #0
 8004934:	80fb      	strh	r3, [r7, #6]
 8004936:	e009      	b.n	800494c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	4a08      	ldr	r2, [pc, #32]	@ (800495c <memp_init+0x30>)
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ffc3 	bl	80048cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	3301      	adds	r3, #1
 800494a:	80fb      	strh	r3, [r7, #6]
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d9f2      	bls.n	8004938 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	0800f8a8 	.word	0x0800f8a8

08004960 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d006      	beq.n	8004998 <do_memp_malloc_pool+0x38>
 800498a:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <do_memp_malloc_pool+0x48>)
 800498c:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8004990:	4906      	ldr	r1, [pc, #24]	@ (80049ac <do_memp_malloc_pool+0x4c>)
 8004992:	4807      	ldr	r0, [pc, #28]	@ (80049b0 <do_memp_malloc_pool+0x50>)
 8004994:	f008 fa4e 	bl	800ce34 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	e000      	b.n	800499e <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	0800ddbc 	.word	0x0800ddbc
 80049ac:	0800ddec 	.word	0x0800ddec
 80049b0:	0800de10 	.word	0x0800de10

080049b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d908      	bls.n	80049d6 <memp_malloc+0x22>
 80049c4:	4b0a      	ldr	r3, [pc, #40]	@ (80049f0 <memp_malloc+0x3c>)
 80049c6:	f240 1287 	movw	r2, #391	@ 0x187
 80049ca:	490a      	ldr	r1, [pc, #40]	@ (80049f4 <memp_malloc+0x40>)
 80049cc:	480a      	ldr	r0, [pc, #40]	@ (80049f8 <memp_malloc+0x44>)
 80049ce:	f008 fa31 	bl	800ce34 <iprintf>
 80049d2:	2300      	movs	r3, #0
 80049d4:	e008      	b.n	80049e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	4a08      	ldr	r2, [pc, #32]	@ (80049fc <memp_malloc+0x48>)
 80049da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ffbe 	bl	8004960 <do_memp_malloc_pool>
 80049e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80049e6:	68fb      	ldr	r3, [r7, #12]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	0800ddbc 	.word	0x0800ddbc
 80049f4:	0800de4c 	.word	0x0800de4c
 80049f8:	0800de10 	.word	0x0800de10
 80049fc:	0800f8a8 	.word	0x0800f8a8

08004a00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d006      	beq.n	8004a22 <do_memp_free_pool+0x22>
 8004a14:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <do_memp_free_pool+0x40>)
 8004a16:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8004a1a:	490a      	ldr	r1, [pc, #40]	@ (8004a44 <do_memp_free_pool+0x44>)
 8004a1c:	480a      	ldr	r0, [pc, #40]	@ (8004a48 <do_memp_free_pool+0x48>)
 8004a1e:	f008 fa09 	bl	800ce34 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	0800ddbc 	.word	0x0800ddbc
 8004a44:	0800de6c 	.word	0x0800de6c
 8004a48:	0800de10 	.word	0x0800de10

08004a4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	6039      	str	r1, [r7, #0]
 8004a56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d907      	bls.n	8004a6e <memp_free+0x22>
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <memp_free+0x44>)
 8004a60:	f240 12db 	movw	r2, #475	@ 0x1db
 8004a64:	490b      	ldr	r1, [pc, #44]	@ (8004a94 <memp_free+0x48>)
 8004a66:	480c      	ldr	r0, [pc, #48]	@ (8004a98 <memp_free+0x4c>)
 8004a68:	f008 f9e4 	bl	800ce34 <iprintf>
 8004a6c:	e00c      	b.n	8004a88 <memp_free+0x3c>

  if (mem == NULL) {
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	4a09      	ldr	r2, [pc, #36]	@ (8004a9c <memp_free+0x50>)
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ffbe 	bl	8004a00 <do_memp_free_pool>
 8004a84:	e000      	b.n	8004a88 <memp_free+0x3c>
    return;
 8004a86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	0800ddbc 	.word	0x0800ddbc
 8004a94:	0800de8c 	.word	0x0800de8c
 8004a98:	0800de10 	.word	0x0800de10
 8004a9c:	0800f8a8 	.word	0x0800f8a8

08004aa0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <netif_add+0x20>
 8004ac0:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <netif_add+0x9c>)
 8004ac2:	22fb      	movs	r2, #251	@ 0xfb
 8004ac4:	4921      	ldr	r1, [pc, #132]	@ (8004b4c <netif_add+0xa0>)
 8004ac6:	4822      	ldr	r0, [pc, #136]	@ (8004b50 <netif_add+0xa4>)
 8004ac8:	f008 f9b4 	bl	800ce34 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8004afa:	4b16      	ldr	r3, [pc, #88]	@ (8004b54 <netif_add+0xa8>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	b2d1      	uxtb	r1, r2
 8004b02:	4a14      	ldr	r2, [pc, #80]	@ (8004b54 <netif_add+0xa8>)
 8004b04:	7011      	strb	r1, [r2, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
  netif->input = input;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f81f 	bl	8004b5c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	4798      	blx	r3
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <netif_add+0x82>
    return NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e007      	b.n	8004b3e <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <netif_add+0xac>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004b36:	4a08      	ldr	r2, [pc, #32]	@ (8004b58 <netif_add+0xac>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	0800dea8 	.word	0x0800dea8
 8004b4c:	0800dedc 	.word	0x0800dedc
 8004b50:	0800def4 	.word	0x0800def4
 8004b54:	20006c48 	.word	0x20006c48
 8004b58:	20006c40 	.word	0x20006c40

08004b5c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <netif_set_addr+0x1c>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10c      	bne.n	8004b92 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f81a 	bl	8004bb4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f861 	bl	8004c4a <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f84a 	bl	8004c24 <netif_set_gw>
 8004b90:	e00c      	b.n	8004bac <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f858 	bl	8004c4a <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f841 	bl	8004c24 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f805 	bl	8004bb4 <netif_set_ipaddr>
  }
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <netif_set_ipaddr+0x18>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e002      	b.n	8004bd2 <netif_set_ipaddr+0x1e>
 8004bcc:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <netif_set_ipaddr+0x6c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d01c      	beq.n	8004c18 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	f107 020c 	add.w	r2, r7, #12
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f002 f859 	bl	8006ca0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	f107 020c 	add.w	r2, r7, #12
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f005 fe55 	bl	800a8a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <netif_set_ipaddr+0x56>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	e000      	b.n	8004c0c <netif_set_ipaddr+0x58>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f85d 	bl	8004cd2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	0800f90c 	.word	0x0800f90c

08004c24 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <netif_set_gw+0x16>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	e000      	b.n	8004c3c <netif_set_gw+0x18>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr

08004c4a <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <netif_set_netmask+0x16>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	e000      	b.n	8004c62 <netif_set_netmask+0x18>
 8004c60:	2300      	movs	r3, #0
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr

08004c70 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004c78:	4a03      	ldr	r2, [pc, #12]	@ (8004c88 <netif_set_default+0x18>)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	20006c44 	.word	0x20006c44

08004c8c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d113      	bne.n	8004cca <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f804 	bl	8004cd2 <netif_issue_reports>
    }
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d011      	beq.n	8004d0c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3304      	adds	r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f006 fcce 	bl	800b6a8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  if (netif) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	61da      	str	r2, [r3, #28]
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d74 <pbuf_free_ooseq+0x40>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d40:	4b0d      	ldr	r3, [pc, #52]	@ (8004d78 <pbuf_free_ooseq+0x44>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	e00f      	b.n	8004d68 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 fce0 	bl	800671a <tcp_segs_free>
      pcb->ooseq = NULL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8004d60:	e005      	b.n	8004d6e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ec      	bne.n	8004d48 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20006c49 	.word	0x20006c49
 8004d78:	20006c58 	.word	0x20006c58

08004d7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <pbuf_pool_is_empty+0x14>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20006c49 	.word	0x20006c49

08004d94 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	80bb      	strh	r3, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d81c      	bhi.n	8004de6 <pbuf_alloc+0x52>
 8004dac:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <pbuf_alloc+0x20>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004dc9 	.word	0x08004dc9
 8004db8:	08004dcf 	.word	0x08004dcf
 8004dbc:	08004dd5 	.word	0x08004dd5
 8004dc0:	08004ddb 	.word	0x08004ddb
 8004dc4:	08004de1 	.word	0x08004de1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004dc8:	2336      	movs	r3, #54	@ 0x36
 8004dca:	82fb      	strh	r3, [r7, #22]
    break;
 8004dcc:	e014      	b.n	8004df8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004dce:	2322      	movs	r3, #34	@ 0x22
 8004dd0:	82fb      	strh	r3, [r7, #22]
    break;
 8004dd2:	e011      	b.n	8004df8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004dd4:	230e      	movs	r3, #14
 8004dd6:	82fb      	strh	r3, [r7, #22]
    break;
 8004dd8:	e00e      	b.n	8004df8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	82fb      	strh	r3, [r7, #22]
    break;
 8004dde:	e00b      	b.n	8004df8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	82fb      	strh	r3, [r7, #22]
    break;
 8004de4:	e008      	b.n	8004df8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8004de6:	4ba1      	ldr	r3, [pc, #644]	@ (800506c <pbuf_alloc+0x2d8>)
 8004de8:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8004dec:	49a0      	ldr	r1, [pc, #640]	@ (8005070 <pbuf_alloc+0x2dc>)
 8004dee:	48a1      	ldr	r0, [pc, #644]	@ (8005074 <pbuf_alloc+0x2e0>)
 8004df0:	f008 f820 	bl	800ce34 <iprintf>
    return NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e15c      	b.n	80050b2 <pbuf_alloc+0x31e>
  }

  switch (type) {
 8004df8:	79bb      	ldrb	r3, [r7, #6]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d00d      	beq.n	8004e1a <pbuf_alloc+0x86>
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	f300 8146 	bgt.w	8005090 <pbuf_alloc+0x2fc>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80d0 	beq.w	8004faa <pbuf_alloc+0x216>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f2c0 8140 	blt.w	8005090 <pbuf_alloc+0x2fc>
 8004e10:	3b01      	subs	r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	f200 813c 	bhi.w	8005090 <pbuf_alloc+0x2fc>
 8004e18:	e10d      	b.n	8005036 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004e1a:	2008      	movs	r0, #8
 8004e1c:	f7ff fdca 	bl	80049b4 <memp_malloc>
 8004e20:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8004e28:	f7ff ffa8 	bl	8004d7c <pbuf_pool_is_empty>
      return NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e140      	b.n	80050b2 <pbuf_alloc+0x31e>
    }
    p->type = type;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	79ba      	ldrb	r2, [r7, #6]
 8004e34:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004e3c:	8afb      	ldrh	r3, [r7, #22]
 8004e3e:	3310      	adds	r3, #16
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	3303      	adds	r3, #3
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d006      	beq.n	8004e6a <pbuf_alloc+0xd6>
 8004e5c:	4b83      	ldr	r3, [pc, #524]	@ (800506c <pbuf_alloc+0x2d8>)
 8004e5e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004e62:	4985      	ldr	r1, [pc, #532]	@ (8005078 <pbuf_alloc+0x2e4>)
 8004e64:	4883      	ldr	r0, [pc, #524]	@ (8005074 <pbuf_alloc+0x2e0>)
 8004e66:	f007 ffe5 	bl	800ce34 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	88ba      	ldrh	r2, [r7, #4]
 8004e6e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004e70:	8afb      	ldrh	r3, [r7, #22]
 8004e72:	3303      	adds	r3, #3
 8004e74:	f023 0303 	bic.w	r3, r3, #3
 8004e78:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8004e7c:	88bb      	ldrh	r3, [r7, #4]
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	bf28      	it	cs
 8004e82:	4613      	movcs	r3, r2
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	8952      	ldrh	r2, [r2, #10]
 8004e92:	441a      	add	r2, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d906      	bls.n	8004eac <pbuf_alloc+0x118>
 8004e9e:	4b73      	ldr	r3, [pc, #460]	@ (800506c <pbuf_alloc+0x2d8>)
 8004ea0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8004ea4:	4975      	ldr	r1, [pc, #468]	@ (800507c <pbuf_alloc+0x2e8>)
 8004ea6:	4873      	ldr	r0, [pc, #460]	@ (8005074 <pbuf_alloc+0x2e0>)
 8004ea8:	f007 ffc4 	bl	800ce34 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004eac:	8afb      	ldrh	r3, [r7, #22]
 8004eae:	3303      	adds	r3, #3
 8004eb0:	f023 0303 	bic.w	r3, r3, #3
 8004eb4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004eb8:	d106      	bne.n	8004ec8 <pbuf_alloc+0x134>
 8004eba:	4b6c      	ldr	r3, [pc, #432]	@ (800506c <pbuf_alloc+0x2d8>)
 8004ebc:	f240 1231 	movw	r2, #305	@ 0x131
 8004ec0:	496f      	ldr	r1, [pc, #444]	@ (8005080 <pbuf_alloc+0x2ec>)
 8004ec2:	486c      	ldr	r0, [pc, #432]	@ (8005074 <pbuf_alloc+0x2e0>)
 8004ec4:	f007 ffb6 	bl	800ce34 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004ed2:	88bb      	ldrh	r3, [r7, #4]
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	8952      	ldrh	r2, [r2, #10]
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8004edc:	e061      	b.n	8004fa2 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004ede:	2008      	movs	r0, #8
 8004ee0:	f7ff fd68 	bl	80049b4 <memp_malloc>
 8004ee4:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8004eec:	f7ff ff46 	bl	8004d7c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8004ef0:	69f8      	ldr	r0, [r7, #28]
 8004ef2:	f000 fac7 	bl	8005484 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e0db      	b.n	80050b2 <pbuf_alloc+0x31e>
      }
      q->type = type;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	79ba      	ldrb	r2, [r7, #6]
 8004efe:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	dd06      	ble.n	8004f2a <pbuf_alloc+0x196>
 8004f1c:	4b53      	ldr	r3, [pc, #332]	@ (800506c <pbuf_alloc+0x2d8>)
 8004f1e:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8004f22:	4958      	ldr	r1, [pc, #352]	@ (8005084 <pbuf_alloc+0x2f0>)
 8004f24:	4853      	ldr	r0, [pc, #332]	@ (8005074 <pbuf_alloc+0x2e0>)
 8004f26:	f007 ff85 	bl	800ce34 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004f3a:	bf28      	it	cs
 8004f3c:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f103 0210 	add.w	r2, r3, #16
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <pbuf_alloc+0x1d6>
 8004f5c:	4b43      	ldr	r3, [pc, #268]	@ (800506c <pbuf_alloc+0x2d8>)
 8004f5e:	f240 1251 	movw	r2, #337	@ 0x151
 8004f62:	4949      	ldr	r1, [pc, #292]	@ (8005088 <pbuf_alloc+0x2f4>)
 8004f64:	4843      	ldr	r0, [pc, #268]	@ (8005074 <pbuf_alloc+0x2e0>)
 8004f66:	f007 ff65 	bl	800ce34 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	8952      	ldrh	r2, [r2, #10]
 8004f72:	441a      	add	r2, r3
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d906      	bls.n	8004f8c <pbuf_alloc+0x1f8>
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800506c <pbuf_alloc+0x2d8>)
 8004f80:	f240 1253 	movw	r2, #339	@ 0x153
 8004f84:	493d      	ldr	r1, [pc, #244]	@ (800507c <pbuf_alloc+0x2e8>)
 8004f86:	483b      	ldr	r0, [pc, #236]	@ (8005074 <pbuf_alloc+0x2e0>)
 8004f88:	f007 ff54 	bl	800ce34 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	895b      	ldrh	r3, [r3, #10]
 8004f96:	461a      	mov	r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dc9a      	bgt.n	8004ede <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8004fa8:	e07c      	b.n	80050a4 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8004faa:	8afb      	ldrh	r3, [r7, #22]
 8004fac:	3313      	adds	r3, #19
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f023 0303 	bic.w	r3, r3, #3
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	88bb      	ldrh	r3, [r7, #4]
 8004fb8:	3303      	adds	r3, #3
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f023 0303 	bic.w	r3, r3, #3
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8004fc6:	897a      	ldrh	r2, [r7, #10]
 8004fc8:	88bb      	ldrh	r3, [r7, #4]
 8004fca:	3303      	adds	r3, #3
 8004fcc:	f023 0303 	bic.w	r3, r3, #3
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d201      	bcs.n	8004fd8 <pbuf_alloc+0x244>
        return NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e06c      	b.n	80050b2 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8004fd8:	897b      	ldrh	r3, [r7, #10]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fb8e 	bl	80046fc <mem_malloc>
 8004fe0:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <pbuf_alloc+0x258>
      return NULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e062      	b.n	80050b2 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8004fec:	8afb      	ldrh	r3, [r7, #22]
 8004fee:	3310      	adds	r3, #16
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3303      	adds	r3, #3
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	88ba      	ldrh	r2, [r7, #4]
 8005004:	811a      	strh	r2, [r3, #8]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	891a      	ldrh	r2, [r3, #8]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
    p->type = type;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	79ba      	ldrb	r2, [r7, #6]
 8005018:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d03d      	beq.n	80050a2 <pbuf_alloc+0x30e>
 8005026:	4b11      	ldr	r3, [pc, #68]	@ (800506c <pbuf_alloc+0x2d8>)
 8005028:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 800502c:	4917      	ldr	r1, [pc, #92]	@ (800508c <pbuf_alloc+0x2f8>)
 800502e:	4811      	ldr	r0, [pc, #68]	@ (8005074 <pbuf_alloc+0x2e0>)
 8005030:	f007 ff00 	bl	800ce34 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8005034:	e035      	b.n	80050a2 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005036:	2007      	movs	r0, #7
 8005038:	f7ff fcbc 	bl	80049b4 <memp_malloc>
 800503c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	e034      	b.n	80050b2 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2200      	movs	r2, #0
 800504c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	88ba      	ldrh	r2, [r7, #4]
 8005052:	811a      	strh	r2, [r3, #8]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	891a      	ldrh	r2, [r3, #8]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
    p->type = type;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	79ba      	ldrb	r2, [r7, #6]
 8005066:	731a      	strb	r2, [r3, #12]
    break;
 8005068:	e01c      	b.n	80050a4 <pbuf_alloc+0x310>
 800506a:	bf00      	nop
 800506c:	0800df1c 	.word	0x0800df1c
 8005070:	0800df4c 	.word	0x0800df4c
 8005074:	0800df68 	.word	0x0800df68
 8005078:	0800df90 	.word	0x0800df90
 800507c:	0800dfc0 	.word	0x0800dfc0
 8005080:	0800dff4 	.word	0x0800dff4
 8005084:	0800e028 	.word	0x0800e028
 8005088:	0800e03c 	.word	0x0800e03c
 800508c:	0800e06c 	.word	0x0800e06c
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <pbuf_alloc+0x328>)
 8005092:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8005096:	490a      	ldr	r1, [pc, #40]	@ (80050c0 <pbuf_alloc+0x32c>)
 8005098:	480a      	ldr	r0, [pc, #40]	@ (80050c4 <pbuf_alloc+0x330>)
 800509a:	f007 fecb 	bl	800ce34 <iprintf>
    return NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	e007      	b.n	80050b2 <pbuf_alloc+0x31e>
    break;
 80050a2:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2201      	movs	r2, #1
 80050a8:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2200      	movs	r2, #0
 80050ae:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80050b0:	69fb      	ldr	r3, [r7, #28]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	0800df1c 	.word	0x0800df1c
 80050c0:	0800e098 	.word	0x0800e098
 80050c4:	0800df68 	.word	0x0800df68

080050c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4603      	mov	r3, r0
 80050d2:	71fb      	strb	r3, [r7, #7]
 80050d4:	460b      	mov	r3, r1
 80050d6:	80bb      	strh	r3, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d81b      	bhi.n	800511a <pbuf_alloced_custom+0x52>
 80050e2:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <pbuf_alloced_custom+0x20>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	080050fd 	.word	0x080050fd
 80050ec:	08005103 	.word	0x08005103
 80050f0:	08005109 	.word	0x08005109
 80050f4:	0800510f 	.word	0x0800510f
 80050f8:	08005115 	.word	0x08005115
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80050fc:	2336      	movs	r3, #54	@ 0x36
 80050fe:	81fb      	strh	r3, [r7, #14]
    break;
 8005100:	e014      	b.n	800512c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005102:	2322      	movs	r3, #34	@ 0x22
 8005104:	81fb      	strh	r3, [r7, #14]
    break;
 8005106:	e011      	b.n	800512c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005108:	230e      	movs	r3, #14
 800510a:	81fb      	strh	r3, [r7, #14]
    break;
 800510c:	e00e      	b.n	800512c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800510e:	2300      	movs	r3, #0
 8005110:	81fb      	strh	r3, [r7, #14]
    break;
 8005112:	e00b      	b.n	800512c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	81fb      	strh	r3, [r7, #14]
    break;
 8005118:	e008      	b.n	800512c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800511a:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <pbuf_alloced_custom+0xc8>)
 800511c:	f240 12c5 	movw	r2, #453	@ 0x1c5
 8005120:	491c      	ldr	r1, [pc, #112]	@ (8005194 <pbuf_alloced_custom+0xcc>)
 8005122:	481d      	ldr	r0, [pc, #116]	@ (8005198 <pbuf_alloced_custom+0xd0>)
 8005124:	f007 fe86 	bl	800ce34 <iprintf>
    return NULL;
 8005128:	2300      	movs	r3, #0
 800512a:	e02d      	b.n	8005188 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	3303      	adds	r3, #3
 8005130:	f023 0203 	bic.w	r2, r3, #3
 8005134:	88bb      	ldrh	r3, [r7, #4]
 8005136:	441a      	add	r2, r3
 8005138:	8bbb      	ldrh	r3, [r7, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	d901      	bls.n	8005142 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	e022      	b.n	8005188 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	3303      	adds	r3, #3
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	441a      	add	r2, r3
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	e002      	b.n	8005166 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2202      	movs	r2, #2
 800516a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	88ba      	ldrh	r2, [r7, #4]
 8005170:	811a      	strh	r2, [r3, #8]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	891a      	ldrh	r2, [r3, #8]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	79ba      	ldrb	r2, [r7, #6]
 800517e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2201      	movs	r2, #1
 8005184:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8005186:	683b      	ldr	r3, [r7, #0]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	0800df1c 	.word	0x0800df1c
 8005194:	0800e0b4 	.word	0x0800e0b4
 8005198:	0800df68 	.word	0x0800df68

0800519c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <pbuf_realloc+0x20>
 80051ae:	4b4b      	ldr	r3, [pc, #300]	@ (80052dc <pbuf_realloc+0x140>)
 80051b0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80051b4:	494a      	ldr	r1, [pc, #296]	@ (80052e0 <pbuf_realloc+0x144>)
 80051b6:	484b      	ldr	r0, [pc, #300]	@ (80052e4 <pbuf_realloc+0x148>)
 80051b8:	f007 fe3c 	bl	800ce34 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7b1b      	ldrb	r3, [r3, #12]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d012      	beq.n	80051ea <pbuf_realloc+0x4e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7b1b      	ldrb	r3, [r3, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d00e      	beq.n	80051ea <pbuf_realloc+0x4e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	7b1b      	ldrb	r3, [r3, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <pbuf_realloc+0x4e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	7b1b      	ldrb	r3, [r3, #12]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d006      	beq.n	80051ea <pbuf_realloc+0x4e>
 80051dc:	4b3f      	ldr	r3, [pc, #252]	@ (80052dc <pbuf_realloc+0x140>)
 80051de:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80051e2:	4941      	ldr	r1, [pc, #260]	@ (80052e8 <pbuf_realloc+0x14c>)
 80051e4:	483f      	ldr	r0, [pc, #252]	@ (80052e4 <pbuf_realloc+0x148>)
 80051e6:	f007 fe25 	bl	800ce34 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	891b      	ldrh	r3, [r3, #8]
 80051ee:	887a      	ldrh	r2, [r7, #2]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d26e      	bcs.n	80052d2 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80051f4:	887b      	ldrh	r3, [r7, #2]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	8912      	ldrh	r2, [r2, #8]
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	827b      	strh	r3, [r7, #18]
  q = p;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005206:	e025      	b.n	8005254 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	895b      	ldrh	r3, [r3, #10]
 800520c:	8a7a      	ldrh	r2, [r7, #18]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005218:	4293      	cmp	r3, r2
 800521a:	dd06      	ble.n	800522a <pbuf_realloc+0x8e>
 800521c:	4b2f      	ldr	r3, [pc, #188]	@ (80052dc <pbuf_realloc+0x140>)
 800521e:	f240 220b 	movw	r2, #523	@ 0x20b
 8005222:	4932      	ldr	r1, [pc, #200]	@ (80052ec <pbuf_realloc+0x150>)
 8005224:	482f      	ldr	r0, [pc, #188]	@ (80052e4 <pbuf_realloc+0x148>)
 8005226:	f007 fe05 	bl	800ce34 <iprintf>
    q->tot_len += (u16_t)grow;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	891a      	ldrh	r2, [r3, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	b29b      	uxth	r3, r3
 8005232:	4413      	add	r3, r2
 8005234:	b29a      	uxth	r2, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <pbuf_realloc+0xb8>
 8005246:	4b25      	ldr	r3, [pc, #148]	@ (80052dc <pbuf_realloc+0x140>)
 8005248:	f240 220f 	movw	r2, #527	@ 0x20f
 800524c:	4928      	ldr	r1, [pc, #160]	@ (80052f0 <pbuf_realloc+0x154>)
 800524e:	4825      	ldr	r0, [pc, #148]	@ (80052e4 <pbuf_realloc+0x148>)
 8005250:	f007 fdf0 	bl	800ce34 <iprintf>
  while (rem_len > q->len) {
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	895b      	ldrh	r3, [r3, #10]
 8005258:	8a7a      	ldrh	r2, [r7, #18]
 800525a:	429a      	cmp	r2, r3
 800525c:	d8d4      	bhi.n	8005208 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	7b1b      	ldrb	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d121      	bne.n	80052aa <pbuf_realloc+0x10e>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	895b      	ldrh	r3, [r3, #10]
 800526a:	8a7a      	ldrh	r2, [r7, #18]
 800526c:	429a      	cmp	r2, r3
 800526e:	d01c      	beq.n	80052aa <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	7b5b      	ldrb	r3, [r3, #13]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d116      	bne.n	80052aa <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	b29a      	uxth	r2, r3
 8005286:	8a7b      	ldrh	r3, [r7, #18]
 8005288:	4413      	add	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	4619      	mov	r1, r3
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f7ff f958 	bl	8004544 <mem_trim>
 8005294:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <pbuf_realloc+0x10e>
 800529c:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <pbuf_realloc+0x140>)
 800529e:	f240 221d 	movw	r2, #541	@ 0x21d
 80052a2:	4914      	ldr	r1, [pc, #80]	@ (80052f4 <pbuf_realloc+0x158>)
 80052a4:	480f      	ldr	r0, [pc, #60]	@ (80052e4 <pbuf_realloc+0x148>)
 80052a6:	f007 fdc5 	bl	800ce34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	8a7a      	ldrh	r2, [r7, #18]
 80052ae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	895a      	ldrh	r2, [r3, #10]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f8dd 	bl	8005484 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e000      	b.n	80052d4 <pbuf_realloc+0x138>
    return;
 80052d2:	bf00      	nop

}
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	0800df1c 	.word	0x0800df1c
 80052e0:	0800e0d8 	.word	0x0800e0d8
 80052e4:	0800df68 	.word	0x0800df68
 80052e8:	0800e0f0 	.word	0x0800e0f0
 80052ec:	0800e10c 	.word	0x0800e10c
 80052f0:	0800e120 	.word	0x0800e120
 80052f4:	0800e138 	.word	0x0800e138

080052f8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	807b      	strh	r3, [r7, #2]
 8005304:	4613      	mov	r3, r2
 8005306:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <pbuf_header_impl+0x24>
 800530e:	4b46      	ldr	r3, [pc, #280]	@ (8005428 <pbuf_header_impl+0x130>)
 8005310:	f240 223f 	movw	r2, #575	@ 0x23f
 8005314:	4945      	ldr	r1, [pc, #276]	@ (800542c <pbuf_header_impl+0x134>)
 8005316:	4846      	ldr	r0, [pc, #280]	@ (8005430 <pbuf_header_impl+0x138>)
 8005318:	f007 fd8c 	bl	800ce34 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800531c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <pbuf_header_impl+0x32>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <pbuf_header_impl+0x36>
    return 0;
 800532a:	2300      	movs	r3, #0
 800532c:	e078      	b.n	8005420 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800532e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005332:	2b00      	cmp	r3, #0
 8005334:	da10      	bge.n	8005358 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8005336:	887b      	ldrh	r3, [r7, #2]
 8005338:	425b      	negs	r3, r3
 800533a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	895b      	ldrh	r3, [r3, #10]
 8005340:	89fa      	ldrh	r2, [r7, #14]
 8005342:	429a      	cmp	r2, r3
 8005344:	d90a      	bls.n	800535c <pbuf_header_impl+0x64>
 8005346:	4b38      	ldr	r3, [pc, #224]	@ (8005428 <pbuf_header_impl+0x130>)
 8005348:	f240 2247 	movw	r2, #583	@ 0x247
 800534c:	4939      	ldr	r1, [pc, #228]	@ (8005434 <pbuf_header_impl+0x13c>)
 800534e:	4838      	ldr	r0, [pc, #224]	@ (8005430 <pbuf_header_impl+0x138>)
 8005350:	f007 fd70 	bl	800ce34 <iprintf>
 8005354:	2301      	movs	r3, #1
 8005356:	e063      	b.n	8005420 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8005358:	887b      	ldrh	r3, [r7, #2]
 800535a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	7b1b      	ldrb	r3, [r3, #12]
 8005360:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005368:	89bb      	ldrh	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <pbuf_header_impl+0x7c>
 800536e:	89bb      	ldrh	r3, [r7, #12]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d112      	bne.n	800539a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800537c:	425b      	negs	r3, r3
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3310      	adds	r3, #16
 800538c:	429a      	cmp	r2, r3
 800538e:	d238      	bcs.n	8005402 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8005396:	2301      	movs	r3, #1
 8005398:	e042      	b.n	8005420 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800539a:	89bb      	ldrh	r3, [r7, #12]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d002      	beq.n	80053a6 <pbuf_header_impl+0xae>
 80053a0:	89bb      	ldrh	r3, [r7, #12]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d124      	bne.n	80053f0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80053a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da0d      	bge.n	80053ca <pbuf_header_impl+0xd2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	895b      	ldrh	r3, [r3, #10]
 80053b2:	89fa      	ldrh	r2, [r7, #14]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d808      	bhi.n	80053ca <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053c0:	425b      	negs	r3, r3
 80053c2:	441a      	add	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	e011      	b.n	80053ee <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80053ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd0b      	ble.n	80053ea <pbuf_header_impl+0xf2>
 80053d2:	787b      	ldrb	r3, [r7, #1]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053e0:	425b      	negs	r3, r3
 80053e2:	441a      	add	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	e001      	b.n	80053ee <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e018      	b.n	8005420 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80053ee:	e008      	b.n	8005402 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80053f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <pbuf_header_impl+0x130>)
 80053f2:	f240 2277 	movw	r2, #631	@ 0x277
 80053f6:	4910      	ldr	r1, [pc, #64]	@ (8005438 <pbuf_header_impl+0x140>)
 80053f8:	480d      	ldr	r0, [pc, #52]	@ (8005430 <pbuf_header_impl+0x138>)
 80053fa:	f007 fd1b 	bl	800ce34 <iprintf>
    return 1;
 80053fe:	2301      	movs	r3, #1
 8005400:	e00e      	b.n	8005420 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	895a      	ldrh	r2, [r3, #10]
 8005406:	887b      	ldrh	r3, [r7, #2]
 8005408:	4413      	add	r3, r2
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	891a      	ldrh	r2, [r3, #8]
 8005414:	887b      	ldrh	r3, [r7, #2]
 8005416:	4413      	add	r3, r2
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	0800df1c 	.word	0x0800df1c
 800542c:	0800e154 	.word	0x0800e154
 8005430:	0800df68 	.word	0x0800df68
 8005434:	0800e160 	.word	0x0800e160
 8005438:	0800e180 	.word	0x0800e180

0800543c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8005448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800544c:	2200      	movs	r2, #0
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ff51 	bl	80052f8 <pbuf_header_impl>
 8005456:	4603      	mov	r3, r0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800546c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005470:	2201      	movs	r2, #1
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff3f 	bl	80052f8 <pbuf_header_impl>
 800547a:	4603      	mov	r3, r0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <pbuf_free+0x22>
 8005498:	4b3e      	ldr	r3, [pc, #248]	@ (8005594 <pbuf_free+0x110>)
 800549a:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800549e:	493e      	ldr	r1, [pc, #248]	@ (8005598 <pbuf_free+0x114>)
 80054a0:	483e      	ldr	r0, [pc, #248]	@ (800559c <pbuf_free+0x118>)
 80054a2:	f007 fcc7 	bl	800ce34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e070      	b.n	800558c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	7b1b      	ldrb	r3, [r3, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d012      	beq.n	80054d8 <pbuf_free+0x54>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7b1b      	ldrb	r3, [r3, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d00e      	beq.n	80054d8 <pbuf_free+0x54>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7b1b      	ldrb	r3, [r3, #12]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d00a      	beq.n	80054d8 <pbuf_free+0x54>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	7b1b      	ldrb	r3, [r3, #12]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d006      	beq.n	80054d8 <pbuf_free+0x54>
 80054ca:	4b32      	ldr	r3, [pc, #200]	@ (8005594 <pbuf_free+0x110>)
 80054cc:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80054d0:	4933      	ldr	r1, [pc, #204]	@ (80055a0 <pbuf_free+0x11c>)
 80054d2:	4832      	ldr	r0, [pc, #200]	@ (800559c <pbuf_free+0x118>)
 80054d4:	f007 fcae 	bl	800ce34 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80054dc:	e052      	b.n	8005584 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	89db      	ldrh	r3, [r3, #14]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <pbuf_free+0x70>
 80054e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005594 <pbuf_free+0x110>)
 80054e8:	f240 22eb 	movw	r2, #747	@ 0x2eb
 80054ec:	492d      	ldr	r1, [pc, #180]	@ (80055a4 <pbuf_free+0x120>)
 80054ee:	482b      	ldr	r0, [pc, #172]	@ (800559c <pbuf_free+0x118>)
 80054f0:	f007 fca0 	bl	800ce34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	89db      	ldrh	r3, [r3, #14]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	81da      	strh	r2, [r3, #14]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	89db      	ldrh	r3, [r3, #14]
 8005504:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005506:	8abb      	ldrh	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d139      	bne.n	8005580 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	7b1b      	ldrb	r3, [r3, #12]
 8005516:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	7b5b      	ldrb	r3, [r3, #13]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d011      	beq.n	8005548 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <pbuf_free+0xba>
 8005530:	4b18      	ldr	r3, [pc, #96]	@ (8005594 <pbuf_free+0x110>)
 8005532:	f240 22f9 	movw	r2, #761	@ 0x2f9
 8005536:	491c      	ldr	r1, [pc, #112]	@ (80055a8 <pbuf_free+0x124>)
 8005538:	4818      	ldr	r0, [pc, #96]	@ (800559c <pbuf_free+0x118>)
 800553a:	f007 fc7b 	bl	800ce34 <iprintf>
        pc->custom_free_function(p);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
 8005546:	e015      	b.n	8005574 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005548:	89fb      	ldrh	r3, [r7, #14]
 800554a:	2b03      	cmp	r3, #3
 800554c:	d104      	bne.n	8005558 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	2008      	movs	r0, #8
 8005552:	f7ff fa7b 	bl	8004a4c <memp_free>
 8005556:	e00d      	b.n	8005574 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005558:	89fb      	ldrh	r3, [r7, #14]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d002      	beq.n	8005564 <pbuf_free+0xe0>
 800555e:	89fb      	ldrh	r3, [r7, #14]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d104      	bne.n	800556e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	2007      	movs	r0, #7
 8005568:	f7ff fa70 	bl	8004a4c <memp_free>
 800556c:	e002      	b.n	8005574 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fe ff86 	bl	8004480 <mem_free>
        }
      }
      count++;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	3301      	adds	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	e001      	b.n	8005584 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1a9      	bne.n	80054de <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	0800df1c 	.word	0x0800df1c
 8005598:	0800e154 	.word	0x0800e154
 800559c:	0800df68 	.word	0x0800df68
 80055a0:	0800e190 	.word	0x0800e190
 80055a4:	0800e1a8 	.word	0x0800e1a8
 80055a8:	0800e1c0 	.word	0x0800e1c0

080055ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80055b8:	e005      	b.n	80055c6 <pbuf_clen+0x1a>
    ++len;
 80055ba:	89fb      	ldrh	r3, [r7, #14]
 80055bc:	3301      	adds	r3, #1
 80055be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f6      	bne.n	80055ba <pbuf_clen+0xe>
  }
  return len;
 80055cc:	89fb      	ldrh	r3, [r7, #14]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	89db      	ldrh	r3, [r3, #14]
 80055ea:	3301      	adds	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	89db      	ldrh	r3, [r3, #14]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <pbuf_ref+0x30>
 80055fa:	4b05      	ldr	r3, [pc, #20]	@ (8005610 <pbuf_ref+0x38>)
 80055fc:	f240 3239 	movw	r2, #825	@ 0x339
 8005600:	4904      	ldr	r1, [pc, #16]	@ (8005614 <pbuf_ref+0x3c>)
 8005602:	4805      	ldr	r0, [pc, #20]	@ (8005618 <pbuf_ref+0x40>)
 8005604:	f007 fc16 	bl	800ce34 <iprintf>
  }
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	0800df1c 	.word	0x0800df1c
 8005614:	0800e1e4 	.word	0x0800e1e4
 8005618:	0800df68 	.word	0x0800df68

0800561c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <pbuf_cat+0x16>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d107      	bne.n	8005642 <pbuf_cat+0x26>
 8005632:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <pbuf_cat+0x98>)
 8005634:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8005638:	491f      	ldr	r1, [pc, #124]	@ (80056b8 <pbuf_cat+0x9c>)
 800563a:	4820      	ldr	r0, [pc, #128]	@ (80056bc <pbuf_cat+0xa0>)
 800563c:	f007 fbfa 	bl	800ce34 <iprintf>
 8005640:	e034      	b.n	80056ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e00a      	b.n	800565e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	891a      	ldrh	r2, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	891b      	ldrh	r3, [r3, #8]
 8005650:	4413      	add	r3, r2
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	891a      	ldrh	r2, [r3, #8]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	895b      	ldrh	r3, [r3, #10]
 800566e:	429a      	cmp	r2, r3
 8005670:	d006      	beq.n	8005680 <pbuf_cat+0x64>
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <pbuf_cat+0x98>)
 8005674:	f240 3255 	movw	r2, #853	@ 0x355
 8005678:	4911      	ldr	r1, [pc, #68]	@ (80056c0 <pbuf_cat+0xa4>)
 800567a:	4810      	ldr	r0, [pc, #64]	@ (80056bc <pbuf_cat+0xa0>)
 800567c:	f007 fbda 	bl	800ce34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <pbuf_cat+0x7a>
 8005688:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <pbuf_cat+0x98>)
 800568a:	f240 3256 	movw	r2, #854	@ 0x356
 800568e:	490d      	ldr	r1, [pc, #52]	@ (80056c4 <pbuf_cat+0xa8>)
 8005690:	480a      	ldr	r0, [pc, #40]	@ (80056bc <pbuf_cat+0xa0>)
 8005692:	f007 fbcf 	bl	800ce34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	891a      	ldrh	r2, [r3, #8]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	891b      	ldrh	r3, [r3, #8]
 800569e:	4413      	add	r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	0800df1c 	.word	0x0800df1c
 80056b8:	0800e1f8 	.word	0x0800e1f8
 80056bc:	0800df68 	.word	0x0800df68
 80056c0:	0800e230 	.word	0x0800e230
 80056c4:	0800e260 	.word	0x0800e260

080056c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff ffa1 	bl	800561c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80056da:	6838      	ldr	r0, [r7, #0]
 80056dc:	f7ff ff7c 	bl	80055d8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80056f2:	2300      	movs	r3, #0
 80056f4:	81fb      	strh	r3, [r7, #14]
 80056f6:	2300      	movs	r3, #0
 80056f8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <pbuf_copy+0x2a>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <pbuf_copy+0x2a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	891a      	ldrh	r2, [r3, #8]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	891b      	ldrh	r3, [r3, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d209      	bcs.n	8005726 <pbuf_copy+0x3e>
 8005712:	4b54      	ldr	r3, [pc, #336]	@ (8005864 <pbuf_copy+0x17c>)
 8005714:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8005718:	4953      	ldr	r1, [pc, #332]	@ (8005868 <pbuf_copy+0x180>)
 800571a:	4854      	ldr	r0, [pc, #336]	@ (800586c <pbuf_copy+0x184>)
 800571c:	f007 fb8a 	bl	800ce34 <iprintf>
 8005720:	f06f 030f 	mvn.w	r3, #15
 8005724:	e099      	b.n	800585a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	895b      	ldrh	r3, [r3, #10]
 800572a:	461a      	mov	r2, r3
 800572c:	89fb      	ldrh	r3, [r7, #14]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	895b      	ldrh	r3, [r3, #10]
 8005734:	4619      	mov	r1, r3
 8005736:	89bb      	ldrh	r3, [r7, #12]
 8005738:	1acb      	subs	r3, r1, r3
 800573a:	429a      	cmp	r2, r3
 800573c:	db05      	blt.n	800574a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	895a      	ldrh	r2, [r3, #10]
 8005742:	89bb      	ldrh	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	817b      	strh	r3, [r7, #10]
 8005748:	e004      	b.n	8005754 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	895a      	ldrh	r2, [r3, #10]
 800574e:	89fb      	ldrh	r3, [r7, #14]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	89fb      	ldrh	r3, [r7, #14]
 800575a:	18d0      	adds	r0, r2, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	89bb      	ldrh	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	897a      	ldrh	r2, [r7, #10]
 8005766:	4619      	mov	r1, r3
 8005768:	f007 fc3f 	bl	800cfea <memcpy>
    offset_to += len;
 800576c:	89fa      	ldrh	r2, [r7, #14]
 800576e:	897b      	ldrh	r3, [r7, #10]
 8005770:	4413      	add	r3, r2
 8005772:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005774:	89ba      	ldrh	r2, [r7, #12]
 8005776:	897b      	ldrh	r3, [r7, #10]
 8005778:	4413      	add	r3, r2
 800577a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	895b      	ldrh	r3, [r3, #10]
 8005780:	89fa      	ldrh	r2, [r7, #14]
 8005782:	429a      	cmp	r2, r3
 8005784:	d906      	bls.n	8005794 <pbuf_copy+0xac>
 8005786:	4b37      	ldr	r3, [pc, #220]	@ (8005864 <pbuf_copy+0x17c>)
 8005788:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800578c:	4938      	ldr	r1, [pc, #224]	@ (8005870 <pbuf_copy+0x188>)
 800578e:	4837      	ldr	r0, [pc, #220]	@ (800586c <pbuf_copy+0x184>)
 8005790:	f007 fb50 	bl	800ce34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	895b      	ldrh	r3, [r3, #10]
 8005798:	89ba      	ldrh	r2, [r7, #12]
 800579a:	429a      	cmp	r2, r3
 800579c:	d906      	bls.n	80057ac <pbuf_copy+0xc4>
 800579e:	4b31      	ldr	r3, [pc, #196]	@ (8005864 <pbuf_copy+0x17c>)
 80057a0:	f240 32ce 	movw	r2, #974	@ 0x3ce
 80057a4:	4933      	ldr	r1, [pc, #204]	@ (8005874 <pbuf_copy+0x18c>)
 80057a6:	4831      	ldr	r0, [pc, #196]	@ (800586c <pbuf_copy+0x184>)
 80057a8:	f007 fb44 	bl	800ce34 <iprintf>
    if (offset_from >= p_from->len) {
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	895b      	ldrh	r3, [r3, #10]
 80057b0:	89ba      	ldrh	r2, [r7, #12]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d304      	bcc.n	80057c0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	895b      	ldrh	r3, [r3, #10]
 80057c4:	89fa      	ldrh	r2, [r7, #14]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d114      	bne.n	80057f4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <pbuf_copy+0x10c>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <pbuf_copy+0x10c>
 80057e0:	4b20      	ldr	r3, [pc, #128]	@ (8005864 <pbuf_copy+0x17c>)
 80057e2:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80057e6:	4924      	ldr	r1, [pc, #144]	@ (8005878 <pbuf_copy+0x190>)
 80057e8:	4820      	ldr	r0, [pc, #128]	@ (800586c <pbuf_copy+0x184>)
 80057ea:	f007 fb23 	bl	800ce34 <iprintf>
 80057ee:	f06f 030f 	mvn.w	r3, #15
 80057f2:	e032      	b.n	800585a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d013      	beq.n	8005822 <pbuf_copy+0x13a>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	895a      	ldrh	r2, [r3, #10]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	891b      	ldrh	r3, [r3, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d10d      	bne.n	8005822 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <pbuf_copy+0x13a>
 800580e:	4b15      	ldr	r3, [pc, #84]	@ (8005864 <pbuf_copy+0x17c>)
 8005810:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8005814:	4919      	ldr	r1, [pc, #100]	@ (800587c <pbuf_copy+0x194>)
 8005816:	4815      	ldr	r0, [pc, #84]	@ (800586c <pbuf_copy+0x184>)
 8005818:	f007 fb0c 	bl	800ce34 <iprintf>
 800581c:	f06f 0305 	mvn.w	r3, #5
 8005820:	e01b      	b.n	800585a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d013      	beq.n	8005850 <pbuf_copy+0x168>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	895a      	ldrh	r2, [r3, #10]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	891b      	ldrh	r3, [r3, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	d10d      	bne.n	8005850 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <pbuf_copy+0x168>
 800583c:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <pbuf_copy+0x17c>)
 800583e:	f240 32e2 	movw	r2, #994	@ 0x3e2
 8005842:	490e      	ldr	r1, [pc, #56]	@ (800587c <pbuf_copy+0x194>)
 8005844:	4809      	ldr	r0, [pc, #36]	@ (800586c <pbuf_copy+0x184>)
 8005846:	f007 faf5 	bl	800ce34 <iprintf>
 800584a:	f06f 0305 	mvn.w	r3, #5
 800584e:	e004      	b.n	800585a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f47f af67 	bne.w	8005726 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	0800df1c 	.word	0x0800df1c
 8005868:	0800e2ac 	.word	0x0800e2ac
 800586c:	0800df68 	.word	0x0800df68
 8005870:	0800e2dc 	.word	0x0800e2dc
 8005874:	0800e2f4 	.word	0x0800e2f4
 8005878:	0800e310 	.word	0x0800e310
 800587c:	0800e320 	.word	0x0800e320

08005880 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	4611      	mov	r1, r2
 800588c:	461a      	mov	r2, r3
 800588e:	460b      	mov	r3, r1
 8005890:	80fb      	strh	r3, [r7, #6]
 8005892:	4613      	mov	r3, r2
 8005894:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <pbuf_copy_partial+0x32>
 80058a0:	4b30      	ldr	r3, [pc, #192]	@ (8005964 <pbuf_copy_partial+0xe4>)
 80058a2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80058a6:	4930      	ldr	r1, [pc, #192]	@ (8005968 <pbuf_copy_partial+0xe8>)
 80058a8:	4830      	ldr	r0, [pc, #192]	@ (800596c <pbuf_copy_partial+0xec>)
 80058aa:	f007 fac3 	bl	800ce34 <iprintf>
 80058ae:	2300      	movs	r3, #0
 80058b0:	e054      	b.n	800595c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d108      	bne.n	80058ca <pbuf_copy_partial+0x4a>
 80058b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005964 <pbuf_copy_partial+0xe4>)
 80058ba:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80058be:	492c      	ldr	r1, [pc, #176]	@ (8005970 <pbuf_copy_partial+0xf0>)
 80058c0:	482a      	ldr	r0, [pc, #168]	@ (800596c <pbuf_copy_partial+0xec>)
 80058c2:	f007 fab7 	bl	800ce34 <iprintf>
 80058c6:	2300      	movs	r3, #0
 80058c8:	e048      	b.n	800595c <pbuf_copy_partial+0xdc>

  left = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <pbuf_copy_partial+0x5a>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <pbuf_copy_partial+0x5e>
    return 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	e03e      	b.n	800595c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e034      	b.n	800594e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80058e4:	88bb      	ldrh	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <pbuf_copy_partial+0x80>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	895b      	ldrh	r3, [r3, #10]
 80058ee:	88ba      	ldrh	r2, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d305      	bcc.n	8005900 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	895b      	ldrh	r3, [r3, #10]
 80058f8:	88ba      	ldrh	r2, [r7, #4]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	80bb      	strh	r3, [r7, #4]
 80058fe:	e023      	b.n	8005948 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	895a      	ldrh	r2, [r3, #10]
 8005904:	88bb      	ldrh	r3, [r7, #4]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800590a:	8b3a      	ldrh	r2, [r7, #24]
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	429a      	cmp	r2, r3
 8005910:	d901      	bls.n	8005916 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005916:	8b7b      	ldrh	r3, [r7, #26]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	18d0      	adds	r0, r2, r3
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	88bb      	ldrh	r3, [r7, #4]
 8005922:	4413      	add	r3, r2
 8005924:	8b3a      	ldrh	r2, [r7, #24]
 8005926:	4619      	mov	r1, r3
 8005928:	f007 fb5f 	bl	800cfea <memcpy>
      copied_total += buf_copy_len;
 800592c:	8afa      	ldrh	r2, [r7, #22]
 800592e:	8b3b      	ldrh	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005934:	8b7a      	ldrh	r2, [r7, #26]
 8005936:	8b3b      	ldrh	r3, [r7, #24]
 8005938:	4413      	add	r3, r2
 800593a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	8b3b      	ldrh	r3, [r7, #24]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <pbuf_copy_partial+0xda>
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1c4      	bne.n	80058e4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800595a:	8afb      	ldrh	r3, [r7, #22]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	0800df1c 	.word	0x0800df1c
 8005968:	0800e34c 	.word	0x0800e34c
 800596c:	0800df68 	.word	0x0800df68
 8005970:	0800e36c 	.word	0x0800e36c

08005974 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005984:	f000 fdfc 	bl	8006580 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005988:	4b07      	ldr	r3, [pc, #28]	@ (80059a8 <tcp_tmr+0x28>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	b2da      	uxtb	r2, r3
 8005990:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <tcp_tmr+0x28>)
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	4b04      	ldr	r3, [pc, #16]	@ (80059a8 <tcp_tmr+0x28>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80059a0:	f000 fb2a 	bl	8005ff8 <tcp_slowtmr>
  }
}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20006c61 	.word	0x20006c61

080059ac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e00a      	b.n	80059d2 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d102      	bne.n	80059cc <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f1      	bne.n	80059bc <tcp_remove_listener+0x10>
      }
   }
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr

080059e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <tcp_listen_closed+0x1a>
 80059f2:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <tcp_listen_closed+0x5c>)
 80059f4:	22c0      	movs	r2, #192	@ 0xc0
 80059f6:	4913      	ldr	r1, [pc, #76]	@ (8005a44 <tcp_listen_closed+0x60>)
 80059f8:	4813      	ldr	r0, [pc, #76]	@ (8005a48 <tcp_listen_closed+0x64>)
 80059fa:	f007 fa1b 	bl	800ce34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	7d1b      	ldrb	r3, [r3, #20]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d005      	beq.n	8005a12 <tcp_listen_closed+0x2e>
 8005a06:	4b0e      	ldr	r3, [pc, #56]	@ (8005a40 <tcp_listen_closed+0x5c>)
 8005a08:	22c1      	movs	r2, #193	@ 0xc1
 8005a0a:	4910      	ldr	r1, [pc, #64]	@ (8005a4c <tcp_listen_closed+0x68>)
 8005a0c:	480e      	ldr	r0, [pc, #56]	@ (8005a48 <tcp_listen_closed+0x64>)
 8005a0e:	f007 fa11 	bl	800ce34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005a12:	2301      	movs	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e00b      	b.n	8005a30 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005a18:	4a0d      	ldr	r2, [pc, #52]	@ (8005a50 <tcp_listen_closed+0x6c>)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ffc1 	bl	80059ac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d9f0      	bls.n	8005a18 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	0800e4a0 	.word	0x0800e4a0
 8005a44:	0800e4d0 	.word	0x0800e4d0
 8005a48:	0800e4dc 	.word	0x0800e4dc
 8005a4c:	0800e504 	.word	0x0800e504
 8005a50:	0800f8e4 	.word	0x0800f8e4

08005a54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d075      	beq.n	8005b52 <tcp_close_shutdown+0xfe>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	7d1b      	ldrb	r3, [r3, #20]
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d003      	beq.n	8005a76 <tcp_close_shutdown+0x22>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	7d1b      	ldrb	r3, [r3, #20]
 8005a72:	2b07      	cmp	r3, #7
 8005a74:	d16d      	bne.n	8005b52 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d104      	bne.n	8005a88 <tcp_close_shutdown+0x34>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a82:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005a86:	d064      	beq.n	8005b52 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	7e9b      	ldrb	r3, [r3, #26]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <tcp_close_shutdown+0x4e>
 8005a94:	4b5b      	ldr	r3, [pc, #364]	@ (8005c04 <tcp_close_shutdown+0x1b0>)
 8005a96:	f240 120f 	movw	r2, #271	@ 0x10f
 8005a9a:	495b      	ldr	r1, [pc, #364]	@ (8005c08 <tcp_close_shutdown+0x1b4>)
 8005a9c:	485b      	ldr	r0, [pc, #364]	@ (8005c0c <tcp_close_shutdown+0x1b8>)
 8005a9e:	f007 f9c9 	bl	800ce34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005aaa:	687c      	ldr	r4, [r7, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	1d1d      	adds	r5, r3, #4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8adb      	ldrh	r3, [r3, #22]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	8b12      	ldrh	r2, [r2, #24]
 8005ab8:	9201      	str	r2, [sp, #4]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	462b      	mov	r3, r5
 8005abe:	4622      	mov	r2, r4
 8005ac0:	f004 f85e 	bl	8009b80 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 ffd1 	bl	8006a6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005aca:	4b51      	ldr	r3, [pc, #324]	@ (8005c10 <tcp_close_shutdown+0x1bc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d105      	bne.n	8005ae0 <tcp_close_shutdown+0x8c>
 8005ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8005c10 <tcp_close_shutdown+0x1bc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	4a4d      	ldr	r2, [pc, #308]	@ (8005c10 <tcp_close_shutdown+0x1bc>)
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e013      	b.n	8005b08 <tcp_close_shutdown+0xb4>
 8005ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8005c10 <tcp_close_shutdown+0x1bc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e00c      	b.n	8005b02 <tcp_close_shutdown+0xae>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d104      	bne.n	8005afc <tcp_close_shutdown+0xa8>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	e005      	b.n	8005b08 <tcp_close_shutdown+0xb4>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ef      	bne.n	8005ae8 <tcp_close_shutdown+0x94>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	4b41      	ldr	r3, [pc, #260]	@ (8005c14 <tcp_close_shutdown+0x1c0>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	7d1b      	ldrb	r3, [r3, #20]
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d10c      	bne.n	8005b36 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	220a      	movs	r2, #10
 8005b20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005b22:	4b3d      	ldr	r3, [pc, #244]	@ (8005c18 <tcp_close_shutdown+0x1c4>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c18 <tcp_close_shutdown+0x1c4>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	f004 fa6e 	bl	800a010 <tcp_timer_needed>
 8005b34:	e00b      	b.n	8005b4e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005b36:	4b39      	ldr	r3, [pc, #228]	@ (8005c1c <tcp_close_shutdown+0x1c8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d102      	bne.n	8005b46 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005b40:	f003 faf2 	bl	8009128 <tcp_trigger_input_pcb_close>
 8005b44:	e003      	b.n	8005b4e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	2001      	movs	r0, #1
 8005b4a:	f7fe ff7f 	bl	8004a4c <memp_free>
        }
      }
      return ERR_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e053      	b.n	8005bfa <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	7d1b      	ldrb	r3, [r3, #20]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d03d      	beq.n	8005bd6 <tcp_close_shutdown+0x182>
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	dc47      	bgt.n	8005bee <tcp_close_shutdown+0x19a>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <tcp_close_shutdown+0x114>
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d02b      	beq.n	8005bbe <tcp_close_shutdown+0x16a>
 8005b66:	e042      	b.n	8005bee <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8adb      	ldrh	r3, [r3, #22]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d021      	beq.n	8005bb4 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005b70:	4b2b      	ldr	r3, [pc, #172]	@ (8005c20 <tcp_close_shutdown+0x1cc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d105      	bne.n	8005b86 <tcp_close_shutdown+0x132>
 8005b7a:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <tcp_close_shutdown+0x1cc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a27      	ldr	r2, [pc, #156]	@ (8005c20 <tcp_close_shutdown+0x1cc>)
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	e013      	b.n	8005bae <tcp_close_shutdown+0x15a>
 8005b86:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <tcp_close_shutdown+0x1cc>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	e00c      	b.n	8005ba8 <tcp_close_shutdown+0x154>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d104      	bne.n	8005ba2 <tcp_close_shutdown+0x14e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	e005      	b.n	8005bae <tcp_close_shutdown+0x15a>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ef      	bne.n	8005b8e <tcp_close_shutdown+0x13a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	f7fe ff48 	bl	8004a4c <memp_free>
    break;
 8005bbc:	e01c      	b.n	8005bf8 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff ff10 	bl	80059e4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4817      	ldr	r0, [pc, #92]	@ (8005c24 <tcp_close_shutdown+0x1d0>)
 8005bc8:	f000 ff92 	bl	8006af0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	2002      	movs	r0, #2
 8005bd0:	f7fe ff3c 	bl	8004a4c <memp_free>
    break;
 8005bd4:	e010      	b.n	8005bf8 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	480d      	ldr	r0, [pc, #52]	@ (8005c10 <tcp_close_shutdown+0x1bc>)
 8005bda:	f000 ff89 	bl	8006af0 <tcp_pcb_remove>
 8005bde:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <tcp_close_shutdown+0x1c0>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	2001      	movs	r0, #1
 8005be8:	f7fe ff30 	bl	8004a4c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005bec:	e004      	b.n	8005bf8 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f81a 	bl	8005c28 <tcp_close_shutdown_fin>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	e000      	b.n	8005bfa <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bdb0      	pop	{r4, r5, r7, pc}
 8005c02:	bf00      	nop
 8005c04:	0800e4a0 	.word	0x0800e4a0
 8005c08:	0800e51c 	.word	0x0800e51c
 8005c0c:	0800e4dc 	.word	0x0800e4dc
 8005c10:	20006c58 	.word	0x20006c58
 8005c14:	20006c60 	.word	0x20006c60
 8005c18:	20006c5c 	.word	0x20006c5c
 8005c1c:	20006c98 	.word	0x20006c98
 8005c20:	20006c50 	.word	0x20006c50
 8005c24:	20006c54 	.word	0x20006c54

08005c28 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <tcp_close_shutdown_fin+0x1c>
 8005c36:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf0 <tcp_close_shutdown_fin+0xc8>)
 8005c38:	f240 124d 	movw	r2, #333	@ 0x14d
 8005c3c:	492d      	ldr	r1, [pc, #180]	@ (8005cf4 <tcp_close_shutdown_fin+0xcc>)
 8005c3e:	482e      	ldr	r0, [pc, #184]	@ (8005cf8 <tcp_close_shutdown_fin+0xd0>)
 8005c40:	f007 f8f8 	bl	800ce34 <iprintf>

  switch (pcb->state) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	7d1b      	ldrb	r3, [r3, #20]
 8005c48:	2b07      	cmp	r3, #7
 8005c4a:	d020      	beq.n	8005c8e <tcp_close_shutdown_fin+0x66>
 8005c4c:	2b07      	cmp	r3, #7
 8005c4e:	dc2b      	bgt.n	8005ca8 <tcp_close_shutdown_fin+0x80>
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d002      	beq.n	8005c5a <tcp_close_shutdown_fin+0x32>
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d00d      	beq.n	8005c74 <tcp_close_shutdown_fin+0x4c>
 8005c58:	e026      	b.n	8005ca8 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f003 faee 	bl	800923c <tcp_send_fin>
 8005c60:	4603      	mov	r3, r0
 8005c62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d11f      	bne.n	8005cac <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2205      	movs	r2, #5
 8005c70:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005c72:	e01b      	b.n	8005cac <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f003 fae1 	bl	800923c <tcp_send_fin>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d114      	bne.n	8005cb0 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2205      	movs	r2, #5
 8005c8a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005c8c:	e010      	b.n	8005cb0 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f003 fad4 	bl	800923c <tcp_send_fin>
 8005c94:	4603      	mov	r3, r0
 8005c96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2209      	movs	r2, #9
 8005ca4:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005ca6:	e005      	b.n	8005cb4 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e01c      	b.n	8005ce6 <tcp_close_shutdown_fin+0xbe>
    break;
 8005cac:	bf00      	nop
 8005cae:	e002      	b.n	8005cb6 <tcp_close_shutdown_fin+0x8e>
    break;
 8005cb0:	bf00      	nop
 8005cb2:	e000      	b.n	8005cb6 <tcp_close_shutdown_fin+0x8e>
    break;
 8005cb4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f003 fcda 	bl	8009678 <tcp_output>
 8005cc4:	e00d      	b.n	8005ce2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d108      	bne.n	8005ce2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7e9b      	ldrb	r3, [r3, #26]
 8005cd4:	f043 0308 	orr.w	r3, r3, #8
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e001      	b.n	8005ce6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	0800e4a0 	.word	0x0800e4a0
 8005cf4:	0800e4d0 	.word	0x0800e4d0
 8005cf8:	0800e4dc 	.word	0x0800e4dc

08005cfc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7d1b      	ldrb	r3, [r3, #20]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d006      	beq.n	8005d1a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7e9b      	ldrb	r3, [r3, #26]
 8005d10:	f043 0310 	orr.w	r3, r3, #16
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff fe99 	bl	8005a54 <tcp_close_shutdown>
 8005d22:	4603      	mov	r3, r0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	@ 0x30
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7d1b      	ldrb	r3, [r3, #20]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d106      	bne.n	8005d4c <tcp_abandon+0x20>
 8005d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e74 <tcp_abandon+0x148>)
 8005d40:	f240 12df 	movw	r2, #479	@ 0x1df
 8005d44:	494c      	ldr	r1, [pc, #304]	@ (8005e78 <tcp_abandon+0x14c>)
 8005d46:	484d      	ldr	r0, [pc, #308]	@ (8005e7c <tcp_abandon+0x150>)
 8005d48:	f007 f874 	bl	800ce34 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	7d1b      	ldrb	r3, [r3, #20]
 8005d50:	2b0a      	cmp	r3, #10
 8005d52:	d108      	bne.n	8005d66 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	484a      	ldr	r0, [pc, #296]	@ (8005e80 <tcp_abandon+0x154>)
 8005d58:	f000 feca 	bl	8006af0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	2001      	movs	r0, #1
 8005d60:	f7fe fe74 	bl	8004a4c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8005d64:	e081      	b.n	8005e6a <tcp_abandon+0x13e>
    int send_rst = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d72:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d80:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	7d1b      	ldrb	r3, [r3, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d126      	bne.n	8005dde <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8adb      	ldrh	r3, [r3, #22]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02e      	beq.n	8005df6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d98:	4b3a      	ldr	r3, [pc, #232]	@ (8005e84 <tcp_abandon+0x158>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d105      	bne.n	8005dae <tcp_abandon+0x82>
 8005da2:	4b38      	ldr	r3, [pc, #224]	@ (8005e84 <tcp_abandon+0x158>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a36      	ldr	r2, [pc, #216]	@ (8005e84 <tcp_abandon+0x158>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	e013      	b.n	8005dd6 <tcp_abandon+0xaa>
 8005dae:	4b35      	ldr	r3, [pc, #212]	@ (8005e84 <tcp_abandon+0x158>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	e00c      	b.n	8005dd0 <tcp_abandon+0xa4>
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d104      	bne.n	8005dca <tcp_abandon+0x9e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	60da      	str	r2, [r3, #12]
 8005dc8:	e005      	b.n	8005dd6 <tcp_abandon+0xaa>
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ef      	bne.n	8005db6 <tcp_abandon+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60da      	str	r2, [r3, #12]
 8005ddc:	e00b      	b.n	8005df6 <tcp_abandon+0xca>
      send_rst = reset;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8adb      	ldrh	r3, [r3, #22]
 8005de6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4827      	ldr	r0, [pc, #156]	@ (8005e88 <tcp_abandon+0x15c>)
 8005dec:	f000 fe80 	bl	8006af0 <tcp_pcb_remove>
 8005df0:	4b26      	ldr	r3, [pc, #152]	@ (8005e8c <tcp_abandon+0x160>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fc89 	bl	800671a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fc80 	bl	800671a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fc77 	bl	800671a <tcp_segs_free>
    if (send_rst) {
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00c      	beq.n	8005e4c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1d19      	adds	r1, r3, #4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8b1b      	ldrh	r3, [r3, #24]
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	460b      	mov	r3, r1
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	69b8      	ldr	r0, [r7, #24]
 8005e48:	f003 fe9a 	bl	8009b80 <tcp_rst>
    last_state = pcb->state;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7d1b      	ldrb	r3, [r3, #20]
 8005e50:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	2001      	movs	r0, #1
 8005e56:	f7fe fdf9 	bl	8004a4c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <tcp_abandon+0x13e>
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f06f 010c 	mvn.w	r1, #12
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	4798      	blx	r3
}
 8005e6a:	bf00      	nop
 8005e6c:	3728      	adds	r7, #40	@ 0x28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	0800e4a0 	.word	0x0800e4a0
 8005e78:	0800e538 	.word	0x0800e538
 8005e7c:	0800e4dc 	.word	0x0800e4dc
 8005e80:	20006c5c 	.word	0x20006c5c
 8005e84:	20006c50 	.word	0x20006c50
 8005e88:	20006c58 	.word	0x20006c58
 8005e8c:	20006c60 	.word	0x20006c60

08005e90 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005e98:	2101      	movs	r1, #1
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff46 	bl	8005d2c <tcp_abandon>
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005eb8:	4413      	add	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8005ec4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8005ec8:	bf28      	it	cs
 8005eca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	db08      	blt.n	8005eec <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	e020      	b.n	8005f2e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	dd03      	ble.n	8005f02 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f00:	e014      	b.n	8005f2c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f14:	d306      	bcc.n	8005f24 <tcp_update_rcv_ann_wnd+0x7c>
 8005f16:	4b08      	ldr	r3, [pc, #32]	@ (8005f38 <tcp_update_rcv_ann_wnd+0x90>)
 8005f18:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8005f1c:	4907      	ldr	r1, [pc, #28]	@ (8005f3c <tcp_update_rcv_ann_wnd+0x94>)
 8005f1e:	4808      	ldr	r0, [pc, #32]	@ (8005f40 <tcp_update_rcv_ann_wnd+0x98>)
 8005f20:	f006 ff88 	bl	800ce34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8005f2c:	2300      	movs	r3, #0
  }
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	0800e4a0 	.word	0x0800e4a0
 8005f3c:	0800e5b8 	.word	0x0800e5b8
 8005f40:	0800e4dc 	.word	0x0800e4dc

08005f44 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	7d1b      	ldrb	r3, [r3, #20]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d106      	bne.n	8005f66 <tcp_recved+0x22>
 8005f58:	4b23      	ldr	r3, [pc, #140]	@ (8005fe8 <tcp_recved+0xa4>)
 8005f5a:	f240 321f 	movw	r2, #799	@ 0x31f
 8005f5e:	4923      	ldr	r1, [pc, #140]	@ (8005fec <tcp_recved+0xa8>)
 8005f60:	4823      	ldr	r0, [pc, #140]	@ (8005ff0 <tcp_recved+0xac>)
 8005f62:	f006 ff67 	bl	800ce34 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005f6a:	887b      	ldrh	r3, [r7, #2]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f78:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005f7c:	d904      	bls.n	8005f88 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005f84:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f86:	e017      	b.n	8005fb8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d113      	bne.n	8005fb8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7d1b      	ldrb	r3, [r3, #20]
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	d003      	beq.n	8005fa0 <tcp_recved+0x5c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	7d1b      	ldrb	r3, [r3, #20]
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	d104      	bne.n	8005faa <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005fa8:	e006      	b.n	8005fb8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005faa:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe8 <tcp_recved+0xa4>)
 8005fac:	f240 322d 	movw	r2, #813	@ 0x32d
 8005fb0:	4910      	ldr	r1, [pc, #64]	@ (8005ff4 <tcp_recved+0xb0>)
 8005fb2:	480f      	ldr	r0, [pc, #60]	@ (8005ff0 <tcp_recved+0xac>)
 8005fb4:	f006 ff3e 	bl	800ce34 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff ff75 	bl	8005ea8 <tcp_update_rcv_ann_wnd>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8005fc8:	db09      	blt.n	8005fde <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	7e9b      	ldrb	r3, [r3, #26]
 8005fce:	f043 0302 	orr.w	r3, r3, #2
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f003 fb4d 	bl	8009678 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	0800e4a0 	.word	0x0800e4a0
 8005fec:	0800e5d4 	.word	0x0800e5d4
 8005ff0:	0800e4dc 	.word	0x0800e4dc
 8005ff4:	0800e5fc 	.word	0x0800e5fc

08005ff8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005ff8:	b5b0      	push	{r4, r5, r7, lr}
 8005ffa:	b08c      	sub	sp, #48	@ 0x30
 8005ffc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8006002:	4b98      	ldr	r3, [pc, #608]	@ (8006264 <tcp_slowtmr+0x26c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	4a96      	ldr	r2, [pc, #600]	@ (8006264 <tcp_slowtmr+0x26c>)
 800600a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800600c:	4b96      	ldr	r3, [pc, #600]	@ (8006268 <tcp_slowtmr+0x270>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	4b94      	ldr	r3, [pc, #592]	@ (8006268 <tcp_slowtmr+0x270>)
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e000      	b.n	800601c <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800601a:	bf00      	nop
  prev = NULL;
 800601c:	2300      	movs	r3, #0
 800601e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006020:	4b92      	ldr	r3, [pc, #584]	@ (800626c <tcp_slowtmr+0x274>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8006026:	e227      	b.n	8006478 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	7d1b      	ldrb	r3, [r3, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <tcp_slowtmr+0x46>
 8006030:	4b8f      	ldr	r3, [pc, #572]	@ (8006270 <tcp_slowtmr+0x278>)
 8006032:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 8006036:	498f      	ldr	r1, [pc, #572]	@ (8006274 <tcp_slowtmr+0x27c>)
 8006038:	488f      	ldr	r0, [pc, #572]	@ (8006278 <tcp_slowtmr+0x280>)
 800603a:	f006 fefb 	bl	800ce34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	7d1b      	ldrb	r3, [r3, #20]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d106      	bne.n	8006054 <tcp_slowtmr+0x5c>
 8006046:	4b8a      	ldr	r3, [pc, #552]	@ (8006270 <tcp_slowtmr+0x278>)
 8006048:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800604c:	498b      	ldr	r1, [pc, #556]	@ (800627c <tcp_slowtmr+0x284>)
 800604e:	488a      	ldr	r0, [pc, #552]	@ (8006278 <tcp_slowtmr+0x280>)
 8006050:	f006 fef0 	bl	800ce34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	7d1b      	ldrb	r3, [r3, #20]
 8006058:	2b0a      	cmp	r3, #10
 800605a:	d106      	bne.n	800606a <tcp_slowtmr+0x72>
 800605c:	4b84      	ldr	r3, [pc, #528]	@ (8006270 <tcp_slowtmr+0x278>)
 800605e:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8006062:	4987      	ldr	r1, [pc, #540]	@ (8006280 <tcp_slowtmr+0x288>)
 8006064:	4884      	ldr	r0, [pc, #528]	@ (8006278 <tcp_slowtmr+0x280>)
 8006066:	f006 fee5 	bl	800ce34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	7f5a      	ldrb	r2, [r3, #29]
 800606e:	4b7e      	ldr	r3, [pc, #504]	@ (8006268 <tcp_slowtmr+0x270>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d103      	bne.n	800607e <tcp_slowtmr+0x86>
      pcb = pcb->next;
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 800607c:	e1fc      	b.n	8006478 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 800607e:	4b7a      	ldr	r3, [pc, #488]	@ (8006268 <tcp_slowtmr+0x270>)
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	7d1b      	ldrb	r3, [r3, #20]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d108      	bne.n	80060a8 <tcp_slowtmr+0xb0>
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800609c:	2b05      	cmp	r3, #5
 800609e:	d903      	bls.n	80060a8 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 80060a0:	7ffb      	ldrb	r3, [r7, #31]
 80060a2:	3301      	adds	r3, #1
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e0a2      	b.n	80061ee <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060ae:	2b0b      	cmp	r3, #11
 80060b0:	d903      	bls.n	80060ba <tcp_slowtmr+0xc2>
      ++pcb_remove;
 80060b2:	7ffb      	ldrb	r3, [r7, #31]
 80060b4:	3301      	adds	r3, #1
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e099      	b.n	80061ee <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d032      	beq.n	800612a <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80060ca:	3b01      	subs	r3, #1
 80060cc:	4a6d      	ldr	r2, [pc, #436]	@ (8006284 <tcp_slowtmr+0x28c>)
 80060ce:	5cd3      	ldrb	r3, [r2, r3]
 80060d0:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80060d8:	7cfa      	ldrb	r2, [r7, #19]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d907      	bls.n	80060ee <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80060e4:	3301      	adds	r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80060f4:	7cfa      	ldrb	r2, [r7, #19]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d879      	bhi.n	80061ee <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80060fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060fc:	f003 fec7 	bl	8009e8e <tcp_zero_window_probe>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d173      	bne.n	80061ee <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006114:	2b06      	cmp	r3, #6
 8006116:	d86a      	bhi.n	80061ee <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 8006118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800611e:	3301      	adds	r3, #1
 8006120:	b2da      	uxtb	r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8006128:	e061      	b.n	80061ee <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006130:	2b00      	cmp	r3, #0
 8006132:	db08      	blt.n	8006146 <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800613a:	b29b      	uxth	r3, r3
 800613c:	3301      	adds	r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	b21a      	sxth	r2, r3
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d04f      	beq.n	80061ee <tcp_slowtmr+0x1f6>
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800615a:	429a      	cmp	r2, r3
 800615c:	db47      	blt.n	80061ee <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	7d1b      	ldrb	r3, [r3, #20]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d018      	beq.n	8006198 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800616c:	2b0c      	cmp	r3, #12
 800616e:	bf28      	it	cs
 8006170:	230c      	movcs	r3, #12
 8006172:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800617a:	10db      	asrs	r3, r3, #3
 800617c:	b21b      	sxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006186:	4413      	add	r3, r2
 8006188:	7dfa      	ldrb	r2, [r7, #23]
 800618a:	493f      	ldr	r1, [pc, #252]	@ (8006288 <tcp_slowtmr+0x290>)
 800618c:	5c8a      	ldrb	r2, [r1, r2]
 800618e:	4093      	lsls	r3, r2
 8006190:	b21a      	sxth	r2, r3
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80061aa:	4293      	cmp	r3, r2
 80061ac:	bf28      	it	cs
 80061ae:	4613      	movcs	r3, r2
 80061b0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80061b2:	8abb      	ldrh	r3, [r7, #20]
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d206      	bcs.n	80061de <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 80061e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061ea:	f003 fd3f 	bl	8009c6c <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	7d1b      	ldrb	r3, [r3, #20]
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	d10f      	bne.n	8006216 <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	7e9b      	ldrb	r3, [r3, #26]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006202:	4b18      	ldr	r3, [pc, #96]	@ (8006264 <tcp_slowtmr+0x26c>)
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b28      	cmp	r3, #40	@ 0x28
 800620e:	d902      	bls.n	8006216 <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8006210:	7ffb      	ldrb	r3, [r7, #31]
 8006212:	3301      	adds	r3, #1
 8006214:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	7a1b      	ldrb	r3, [r3, #8]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d05d      	beq.n	80062de <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006226:	2b04      	cmp	r3, #4
 8006228:	d003      	beq.n	8006232 <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800622e:	2b07      	cmp	r3, #7
 8006230:	d155      	bne.n	80062de <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006232:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <tcp_slowtmr+0x26c>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006242:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8006246:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800624a:	4910      	ldr	r1, [pc, #64]	@ (800628c <tcp_slowtmr+0x294>)
 800624c:	fba1 1303 	umull	r1, r3, r1, r3
 8006250:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006252:	429a      	cmp	r2, r3
 8006254:	d91c      	bls.n	8006290 <tcp_slowtmr+0x298>
        ++pcb_remove;
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	3301      	adds	r3, #1
 800625a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800625c:	7fbb      	ldrb	r3, [r7, #30]
 800625e:	3301      	adds	r3, #1
 8006260:	77bb      	strb	r3, [r7, #30]
 8006262:	e03c      	b.n	80062de <tcp_slowtmr+0x2e6>
 8006264:	20006c4c 	.word	0x20006c4c
 8006268:	20006c62 	.word	0x20006c62
 800626c:	20006c58 	.word	0x20006c58
 8006270:	0800e4a0 	.word	0x0800e4a0
 8006274:	0800e650 	.word	0x0800e650
 8006278:	0800e4dc 	.word	0x0800e4dc
 800627c:	0800e67c 	.word	0x0800e67c
 8006280:	0800e6a8 	.word	0x0800e6a8
 8006284:	0800f8dc 	.word	0x0800f8dc
 8006288:	0800f8cc 	.word	0x0800f8cc
 800628c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006290:	4b97      	ldr	r3, [pc, #604]	@ (80064f0 <tcp_slowtmr+0x4f8>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80062a6:	4618      	mov	r0, r3
 80062a8:	4b92      	ldr	r3, [pc, #584]	@ (80064f4 <tcp_slowtmr+0x4fc>)
 80062aa:	fb00 f303 	mul.w	r3, r0, r3
 80062ae:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80062b0:	4991      	ldr	r1, [pc, #580]	@ (80064f8 <tcp_slowtmr+0x500>)
 80062b2:	fba1 1303 	umull	r1, r3, r1, r3
 80062b6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d910      	bls.n	80062de <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 80062bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062be:	f003 fda9 	bl	8009e14 <tcp_keepalive>
 80062c2:	4603      	mov	r3, r0
 80062c4:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80062c6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80062d4:	3301      	adds	r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d016      	beq.n	8006314 <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80062e6:	4b82      	ldr	r3, [pc, #520]	@ (80064f0 <tcp_slowtmr+0x4f8>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80062f6:	4619      	mov	r1, r3
 80062f8:	460b      	mov	r3, r1
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	440b      	add	r3, r1
 80062fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006300:	429a      	cmp	r2, r3
 8006302:	d307      	bcc.n	8006314 <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fa06 	bl	800671a <tcp_segs_free>
      pcb->ooseq = NULL;
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	2200      	movs	r2, #0
 8006312:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	7d1b      	ldrb	r3, [r3, #20]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d109      	bne.n	8006330 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800631c:	4b74      	ldr	r3, [pc, #464]	@ (80064f0 <tcp_slowtmr+0x4f8>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b28      	cmp	r3, #40	@ 0x28
 8006328:	d902      	bls.n	8006330 <tcp_slowtmr+0x338>
        ++pcb_remove;
 800632a:	7ffb      	ldrb	r3, [r7, #31]
 800632c:	3301      	adds	r3, #1
 800632e:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	7d1b      	ldrb	r3, [r3, #20]
 8006334:	2b09      	cmp	r3, #9
 8006336:	d109      	bne.n	800634c <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006338:	4b6d      	ldr	r3, [pc, #436]	@ (80064f0 <tcp_slowtmr+0x4f8>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2bf0      	cmp	r3, #240	@ 0xf0
 8006344:	d902      	bls.n	800634c <tcp_slowtmr+0x354>
        ++pcb_remove;
 8006346:	7ffb      	ldrb	r3, [r7, #31]
 8006348:	3301      	adds	r3, #1
 800634a:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 800634c:	7ffb      	ldrb	r3, [r7, #31]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d05d      	beq.n	800640e <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006358:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800635a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800635c:	f000 fb86 	bl	8006a6c <tcp_pcb_purge>
      if (prev != NULL) {
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d010      	beq.n	8006388 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006366:	4b65      	ldr	r3, [pc, #404]	@ (80064fc <tcp_slowtmr+0x504>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636c:	429a      	cmp	r2, r3
 800636e:	d106      	bne.n	800637e <tcp_slowtmr+0x386>
 8006370:	4b63      	ldr	r3, [pc, #396]	@ (8006500 <tcp_slowtmr+0x508>)
 8006372:	f240 4289 	movw	r2, #1161	@ 0x489
 8006376:	4963      	ldr	r1, [pc, #396]	@ (8006504 <tcp_slowtmr+0x50c>)
 8006378:	4863      	ldr	r0, [pc, #396]	@ (8006508 <tcp_slowtmr+0x510>)
 800637a:	f006 fd5b 	bl	800ce34 <iprintf>
        prev->next = pcb->next;
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	60da      	str	r2, [r3, #12]
 8006386:	e00f      	b.n	80063a8 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006388:	4b5c      	ldr	r3, [pc, #368]	@ (80064fc <tcp_slowtmr+0x504>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638e:	429a      	cmp	r2, r3
 8006390:	d006      	beq.n	80063a0 <tcp_slowtmr+0x3a8>
 8006392:	4b5b      	ldr	r3, [pc, #364]	@ (8006500 <tcp_slowtmr+0x508>)
 8006394:	f240 428d 	movw	r2, #1165	@ 0x48d
 8006398:	495c      	ldr	r1, [pc, #368]	@ (800650c <tcp_slowtmr+0x514>)
 800639a:	485b      	ldr	r0, [pc, #364]	@ (8006508 <tcp_slowtmr+0x510>)
 800639c:	f006 fd4a 	bl	800ce34 <iprintf>
        tcp_active_pcbs = pcb->next;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4a55      	ldr	r2, [pc, #340]	@ (80064fc <tcp_slowtmr+0x504>)
 80063a6:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80063a8:	7fbb      	ldrb	r3, [r7, #30]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80063b6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	1d1d      	adds	r5, r3, #4
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	8adb      	ldrh	r3, [r3, #22]
 80063c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c2:	8b12      	ldrh	r2, [r2, #24]
 80063c4:	9201      	str	r2, [sp, #4]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	462b      	mov	r3, r5
 80063ca:	4622      	mov	r2, r4
 80063cc:	f003 fbd8 	bl	8009b80 <tcp_rst>
      err_arg = pcb->callback_arg;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	7d1b      	ldrb	r3, [r3, #20]
 80063da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	2001      	movs	r0, #1
 80063ea:	f7fe fb2f 	bl	8004a4c <memp_free>
      tcp_active_pcbs_changed = 0;
 80063ee:	4b48      	ldr	r3, [pc, #288]	@ (8006510 <tcp_slowtmr+0x518>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <tcp_slowtmr+0x40c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f06f 010c 	mvn.w	r1, #12
 8006400:	68b8      	ldr	r0, [r7, #8]
 8006402:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006404:	4b42      	ldr	r3, [pc, #264]	@ (8006510 <tcp_slowtmr+0x518>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d035      	beq.n	8006478 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 800640c:	e606      	b.n	800601c <tcp_slowtmr+0x24>
      prev = pcb;
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	7edb      	ldrb	r3, [r3, #27]
 800641c:	3301      	adds	r3, #1
 800641e:	b2da      	uxtb	r2, r3
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	7eda      	ldrb	r2, [r3, #27]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	7f1b      	ldrb	r3, [r3, #28]
 800642c:	429a      	cmp	r2, r3
 800642e:	d323      	bcc.n	8006478 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2200      	movs	r2, #0
 8006434:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 8006436:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <tcp_slowtmr+0x518>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <tcp_slowtmr+0x464>
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644c:	6a3a      	ldr	r2, [r7, #32]
 800644e:	6912      	ldr	r2, [r2, #16]
 8006450:	6a39      	ldr	r1, [r7, #32]
 8006452:	4610      	mov	r0, r2
 8006454:	4798      	blx	r3
 8006456:	4603      	mov	r3, r0
 8006458:	777b      	strb	r3, [r7, #29]
 800645a:	e001      	b.n	8006460 <tcp_slowtmr+0x468>
 800645c:	2300      	movs	r3, #0
 800645e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006460:	4b2b      	ldr	r3, [pc, #172]	@ (8006510 <tcp_slowtmr+0x518>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f47f add8 	bne.w	800601a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800646a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <tcp_slowtmr+0x480>
          tcp_output(prev);
 8006472:	6a38      	ldr	r0, [r7, #32]
 8006474:	f003 f900 	bl	8009678 <tcp_output>
  while (pcb != NULL) {
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	f47f add4 	bne.w	8006028 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006484:	4b23      	ldr	r3, [pc, #140]	@ (8006514 <tcp_slowtmr+0x51c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800648a:	e068      	b.n	800655e <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	7d1b      	ldrb	r3, [r3, #20]
 8006490:	2b0a      	cmp	r3, #10
 8006492:	d006      	beq.n	80064a2 <tcp_slowtmr+0x4aa>
 8006494:	4b1a      	ldr	r3, [pc, #104]	@ (8006500 <tcp_slowtmr+0x508>)
 8006496:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800649a:	491f      	ldr	r1, [pc, #124]	@ (8006518 <tcp_slowtmr+0x520>)
 800649c:	481a      	ldr	r0, [pc, #104]	@ (8006508 <tcp_slowtmr+0x510>)
 800649e:	f006 fcc9 	bl	800ce34 <iprintf>
    pcb_remove = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80064a6:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <tcp_slowtmr+0x4f8>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2bf0      	cmp	r3, #240	@ 0xf0
 80064b2:	d902      	bls.n	80064ba <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 80064b4:	7ffb      	ldrb	r3, [r7, #31]
 80064b6:	3301      	adds	r3, #1
 80064b8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d049      	beq.n	8006554 <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80064c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064c2:	f000 fad3 	bl	8006a6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d029      	beq.n	8006520 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80064cc:	4b11      	ldr	r3, [pc, #68]	@ (8006514 <tcp_slowtmr+0x51c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d106      	bne.n	80064e4 <tcp_slowtmr+0x4ec>
 80064d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006500 <tcp_slowtmr+0x508>)
 80064d8:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 80064dc:	490f      	ldr	r1, [pc, #60]	@ (800651c <tcp_slowtmr+0x524>)
 80064de:	480a      	ldr	r0, [pc, #40]	@ (8006508 <tcp_slowtmr+0x510>)
 80064e0:	f006 fca8 	bl	800ce34 <iprintf>
        prev->next = pcb->next;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	60da      	str	r2, [r3, #12]
 80064ec:	e028      	b.n	8006540 <tcp_slowtmr+0x548>
 80064ee:	bf00      	nop
 80064f0:	20006c4c 	.word	0x20006c4c
 80064f4:	000124f8 	.word	0x000124f8
 80064f8:	10624dd3 	.word	0x10624dd3
 80064fc:	20006c58 	.word	0x20006c58
 8006500:	0800e4a0 	.word	0x0800e4a0
 8006504:	0800e6d8 	.word	0x0800e6d8
 8006508:	0800e4dc 	.word	0x0800e4dc
 800650c:	0800e704 	.word	0x0800e704
 8006510:	20006c60 	.word	0x20006c60
 8006514:	20006c5c 	.word	0x20006c5c
 8006518:	0800e730 	.word	0x0800e730
 800651c:	0800e760 	.word	0x0800e760
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006520:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <tcp_slowtmr+0x578>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006526:	429a      	cmp	r2, r3
 8006528:	d006      	beq.n	8006538 <tcp_slowtmr+0x540>
 800652a:	4b12      	ldr	r3, [pc, #72]	@ (8006574 <tcp_slowtmr+0x57c>)
 800652c:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8006530:	4911      	ldr	r1, [pc, #68]	@ (8006578 <tcp_slowtmr+0x580>)
 8006532:	4812      	ldr	r0, [pc, #72]	@ (800657c <tcp_slowtmr+0x584>)
 8006534:	f006 fc7e 	bl	800ce34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4a0c      	ldr	r2, [pc, #48]	@ (8006570 <tcp_slowtmr+0x578>)
 800653e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	2001      	movs	r0, #1
 800654e:	f7fe fa7d 	bl	8004a4c <memp_free>
 8006552:	e004      	b.n	800655e <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d193      	bne.n	800648c <tcp_slowtmr+0x494>
    }
  }
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	3728      	adds	r7, #40	@ 0x28
 800656a:	46bd      	mov	sp, r7
 800656c:	bdb0      	pop	{r4, r5, r7, pc}
 800656e:	bf00      	nop
 8006570:	20006c5c 	.word	0x20006c5c
 8006574:	0800e4a0 	.word	0x0800e4a0
 8006578:	0800e788 	.word	0x0800e788
 800657c:	0800e4dc 	.word	0x0800e4dc

08006580 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006586:	4b2d      	ldr	r3, [pc, #180]	@ (800663c <tcp_fasttmr+0xbc>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	4b2b      	ldr	r3, [pc, #172]	@ (800663c <tcp_fasttmr+0xbc>)
 8006590:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006592:	4b2b      	ldr	r3, [pc, #172]	@ (8006640 <tcp_fasttmr+0xc0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006598:	e048      	b.n	800662c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	7f5a      	ldrb	r2, [r3, #29]
 800659e:	4b27      	ldr	r3, [pc, #156]	@ (800663c <tcp_fasttmr+0xbc>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d03f      	beq.n	8006626 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80065a6:	4b25      	ldr	r3, [pc, #148]	@ (800663c <tcp_fasttmr+0xbc>)
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7e9b      	ldrb	r3, [r3, #26]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7e9b      	ldrb	r3, [r3, #26]
 80065be:	f043 0302 	orr.w	r3, r3, #2
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f003 f855 	bl	8009678 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	7e9b      	ldrb	r3, [r3, #26]
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7e9b      	ldrb	r3, [r3, #26]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7e9b      	ldrb	r3, [r3, #26]
 80065ec:	f023 0308 	bic.w	r3, r3, #8
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fb16 	bl	8005c28 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800660a:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <tcp_fasttmr+0xc4>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f819 	bl	8006648 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006616:	4b0b      	ldr	r3, [pc, #44]	@ (8006644 <tcp_fasttmr+0xc4>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d000      	beq.n	8006620 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800661e:	e7b8      	b.n	8006592 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	e002      	b.n	800662c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1b3      	bne.n	800659a <tcp_fasttmr+0x1a>
    }
  }
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20006c62 	.word	0x20006c62
 8006640:	20006c58 	.word	0x20006c58
 8006644:	20006c60 	.word	0x20006c60

08006648 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006648:	b590      	push	{r4, r7, lr}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006654:	7b5b      	ldrb	r3, [r3, #13]
 8006656:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800665c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <tcp_process_refused_data+0x3e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6918      	ldr	r0, [r3, #16]
 8006678:	2300      	movs	r3, #0
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	47a0      	blx	r4
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
 8006684:	e007      	b.n	8006696 <tcp_process_refused_data+0x4e>
 8006686:	2300      	movs	r3, #0
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	2000      	movs	r0, #0
 800668e:	f000 f88d 	bl	80067ac <tcp_recv_null>
 8006692:	4603      	mov	r3, r0
 8006694:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d12a      	bne.n	80066f4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d033      	beq.n	8006710 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80066b0:	d005      	beq.n	80066be <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b6:	3301      	adds	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <tcp_process_refused_data+0x98>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6918      	ldr	r0, [r3, #16]
 80066d2:	2300      	movs	r3, #0
 80066d4:	2200      	movs	r2, #0
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	47a0      	blx	r4
 80066da:	4603      	mov	r3, r0
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e001      	b.n	80066e4 <tcp_process_refused_data+0x9c>
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80066e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e8:	f113 0f0d 	cmn.w	r3, #13
 80066ec:	d110      	bne.n	8006710 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80066ee:	f06f 030c 	mvn.w	r3, #12
 80066f2:	e00e      	b.n	8006712 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80066f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f8:	f113 0f0d 	cmn.w	r3, #13
 80066fc:	d102      	bne.n	8006704 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80066fe:	f06f 030c 	mvn.w	r3, #12
 8006702:	e006      	b.n	8006712 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800670a:	f06f 0304 	mvn.w	r3, #4
 800670e:	e000      	b.n	8006712 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bd90      	pop	{r4, r7, pc}

0800671a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006722:	e007      	b.n	8006734 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f80a 	bl	8006744 <tcp_seg_free>
    seg = next;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f4      	bne.n	8006724 <tcp_segs_free+0xa>
  }
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00c      	beq.n	800676c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fe90 	bl	8005484 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	2003      	movs	r0, #3
 8006768:	f7fe f970 	bl	8004a4c <memp_free>
  }
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800677c:	2003      	movs	r0, #3
 800677e:	f7fe f919 	bl	80049b4 <memp_malloc>
 8006782:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <tcp_seg_copy+0x1a>
    return NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	e00a      	b.n	80067a4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800678e:	2210      	movs	r2, #16
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f006 fc29 	bl	800cfea <memcpy>
  pbuf_ref(cseg->p);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe ff1b 	bl	80055d8 <pbuf_ref>
  return cseg;
 80067a2:	68fb      	ldr	r3, [r7, #12]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	891b      	ldrh	r3, [r3, #8]
 80067c4:	4619      	mov	r1, r3
 80067c6:	68b8      	ldr	r0, [r7, #8]
 80067c8:	f7ff fbbc 	bl	8005f44 <tcp_recved>
    pbuf_free(p);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fe fe59 	bl	8005484 <pbuf_free>
 80067d2:	e008      	b.n	80067e6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80067d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80067dc:	68b8      	ldr	r0, [r7, #8]
 80067de:	f7ff fa8d 	bl	8005cfc <tcp_close>
 80067e2:	4603      	mov	r3, r0
 80067e4:	e000      	b.n	80067e8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80067fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	db01      	blt.n	8006806 <tcp_kill_prio+0x16>
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	e000      	b.n	8006808 <tcp_kill_prio+0x18>
 8006806:	237f      	movs	r3, #127	@ 0x7f
 8006808:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006812:	4b16      	ldr	r3, [pc, #88]	@ (800686c <tcp_kill_prio+0x7c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e01a      	b.n	8006850 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	7d5b      	ldrb	r3, [r3, #21]
 800681e:	7afa      	ldrb	r2, [r7, #11]
 8006820:	429a      	cmp	r2, r3
 8006822:	d312      	bcc.n	800684a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006824:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <tcp_kill_prio+0x80>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	429a      	cmp	r2, r3
 8006832:	d80a      	bhi.n	800684a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006834:	4b0e      	ldr	r3, [pc, #56]	@ (8006870 <tcp_kill_prio+0x80>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	7d5b      	ldrb	r3, [r3, #21]
 8006848:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e1      	bne.n	800681a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800685c:	6938      	ldr	r0, [r7, #16]
 800685e:	f7ff fb17 	bl	8005e90 <tcp_abort>
  }
}
 8006862:	bf00      	nop
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20006c58 	.word	0x20006c58
 8006870:	20006c4c 	.word	0x20006c4c

08006874 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d009      	beq.n	8006898 <tcp_kill_state+0x24>
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b09      	cmp	r3, #9
 8006888:	d006      	beq.n	8006898 <tcp_kill_state+0x24>
 800688a:	4b1a      	ldr	r3, [pc, #104]	@ (80068f4 <tcp_kill_state+0x80>)
 800688c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006890:	4919      	ldr	r1, [pc, #100]	@ (80068f8 <tcp_kill_state+0x84>)
 8006892:	481a      	ldr	r0, [pc, #104]	@ (80068fc <tcp_kill_state+0x88>)
 8006894:	f006 face 	bl	800ce34 <iprintf>

  inactivity = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068a0:	4b17      	ldr	r3, [pc, #92]	@ (8006900 <tcp_kill_state+0x8c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	e017      	b.n	80068d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	7d1b      	ldrb	r3, [r3, #20]
 80068ac:	79fa      	ldrb	r2, [r7, #7]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d10f      	bne.n	80068d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80068b2:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <tcp_kill_state+0x90>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d807      	bhi.n	80068d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80068c2:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <tcp_kill_state+0x90>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e4      	bne.n	80068a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80068e4:	2100      	movs	r1, #0
 80068e6:	6938      	ldr	r0, [r7, #16]
 80068e8:	f7ff fa20 	bl	8005d2c <tcp_abandon>
  }
}
 80068ec:	bf00      	nop
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	0800e4a0 	.word	0x0800e4a0
 80068f8:	0800e7b0 	.word	0x0800e7b0
 80068fc:	0800e4dc 	.word	0x0800e4dc
 8006900:	20006c58 	.word	0x20006c58
 8006904:	20006c4c 	.word	0x20006c4c

08006908 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006916:	4b12      	ldr	r3, [pc, #72]	@ (8006960 <tcp_kill_timewait+0x58>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	e012      	b.n	8006944 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800691e:	4b11      	ldr	r3, [pc, #68]	@ (8006964 <tcp_kill_timewait+0x5c>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	429a      	cmp	r2, r3
 800692c:	d807      	bhi.n	800693e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <tcp_kill_timewait+0x5c>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e9      	bne.n	800691e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006950:	68b8      	ldr	r0, [r7, #8]
 8006952:	f7ff fa9d 	bl	8005e90 <tcp_abort>
  }
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20006c5c 	.word	0x20006c5c
 8006964:	20006c4c 	.word	0x20006c4c

08006968 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006972:	2001      	movs	r0, #1
 8006974:	f7fe f81e 	bl	80049b4 <memp_malloc>
 8006978:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d124      	bne.n	80069ca <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006980:	f7ff ffc2 	bl	8006908 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006984:	2001      	movs	r0, #1
 8006986:	f7fe f815 	bl	80049b4 <memp_malloc>
 800698a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d11b      	bne.n	80069ca <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006992:	2009      	movs	r0, #9
 8006994:	f7ff ff6e 	bl	8006874 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006998:	2001      	movs	r0, #1
 800699a:	f7fe f80b 	bl	80049b4 <memp_malloc>
 800699e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d111      	bne.n	80069ca <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80069a6:	2008      	movs	r0, #8
 80069a8:	f7ff ff64 	bl	8006874 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069ac:	2001      	movs	r0, #1
 80069ae:	f7fe f801 	bl	80049b4 <memp_malloc>
 80069b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d107      	bne.n	80069ca <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ff17 	bl	80067f0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069c2:	2001      	movs	r0, #1
 80069c4:	f7fd fff6 	bl	80049b4 <memp_malloc>
 80069c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d03f      	beq.n	8006a50 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80069d0:	2298      	movs	r2, #152	@ 0x98
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f006 fa92 	bl	800cefe <memset>
    pcb->prio = prio;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	79fa      	ldrb	r2, [r7, #7]
 80069de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80069e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80069f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	22ff      	movs	r2, #255	@ 0xff
 80069fe:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006a06:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2206      	movs	r2, #6
 8006a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2206      	movs	r2, #6
 8006a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a1c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <tcp_alloc+0xf4>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <tcp_alloc+0xf8>)
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006a3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a08      	ldr	r2, [pc, #32]	@ (8006a64 <tcp_alloc+0xfc>)
 8006a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4a07      	ldr	r2, [pc, #28]	@ (8006a68 <tcp_alloc+0x100>)
 8006a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006a50:	68fb      	ldr	r3, [r7, #12]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20006c4c 	.word	0x20006c4c
 8006a60:	20006c62 	.word	0x20006c62
 8006a64:	080067ad 	.word	0x080067ad
 8006a68:	006ddd00 	.word	0x006ddd00

08006a6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	7d1b      	ldrb	r3, [r3, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d034      	beq.n	8006ae6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006a80:	2b0a      	cmp	r3, #10
 8006a82:	d030      	beq.n	8006ae6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d02c      	beq.n	8006ae6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fcf3 	bl	8005484 <pbuf_free>
      pcb->refused_data = NULL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fe36 	bl	800671a <tcp_segs_free>
    pcb->ooseq = NULL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006aba:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff fe2a 	bl	800671a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fe25 	bl	800671a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	669a      	str	r2, [r3, #104]	@ 0x68
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d105      	bne.n	8006b10 <tcp_pcb_remove+0x20>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e013      	b.n	8006b38 <tcp_pcb_remove+0x48>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	e00c      	b.n	8006b32 <tcp_pcb_remove+0x42>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d104      	bne.n	8006b2c <tcp_pcb_remove+0x3c>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	e005      	b.n	8006b38 <tcp_pcb_remove+0x48>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ef      	bne.n	8006b18 <tcp_pcb_remove+0x28>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006b3e:	6838      	ldr	r0, [r7, #0]
 8006b40:	f7ff ff94 	bl	8006a6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	7d1b      	ldrb	r3, [r3, #20]
 8006b48:	2b0a      	cmp	r3, #10
 8006b4a:	d013      	beq.n	8006b74 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d00f      	beq.n	8006b74 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	7e9b      	ldrb	r3, [r3, #26]
 8006b58:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	7e9b      	ldrb	r3, [r3, #26]
 8006b64:	f043 0302 	orr.w	r3, r3, #2
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006b6e:	6838      	ldr	r0, [r7, #0]
 8006b70:	f002 fd82 	bl	8009678 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	7d1b      	ldrb	r3, [r3, #20]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d020      	beq.n	8006bbe <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <tcp_pcb_remove+0xa2>
 8006b84:	4b13      	ldr	r3, [pc, #76]	@ (8006bd4 <tcp_pcb_remove+0xe4>)
 8006b86:	f240 7253 	movw	r2, #1875	@ 0x753
 8006b8a:	4913      	ldr	r1, [pc, #76]	@ (8006bd8 <tcp_pcb_remove+0xe8>)
 8006b8c:	4813      	ldr	r0, [pc, #76]	@ (8006bdc <tcp_pcb_remove+0xec>)
 8006b8e:	f006 f951 	bl	800ce34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d006      	beq.n	8006ba8 <tcp_pcb_remove+0xb8>
 8006b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd4 <tcp_pcb_remove+0xe4>)
 8006b9c:	f240 7254 	movw	r2, #1876	@ 0x754
 8006ba0:	490f      	ldr	r1, [pc, #60]	@ (8006be0 <tcp_pcb_remove+0xf0>)
 8006ba2:	480e      	ldr	r0, [pc, #56]	@ (8006bdc <tcp_pcb_remove+0xec>)
 8006ba4:	f006 f946 	bl	800ce34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d006      	beq.n	8006bbe <tcp_pcb_remove+0xce>
 8006bb0:	4b08      	ldr	r3, [pc, #32]	@ (8006bd4 <tcp_pcb_remove+0xe4>)
 8006bb2:	f240 7256 	movw	r2, #1878	@ 0x756
 8006bb6:	490b      	ldr	r1, [pc, #44]	@ (8006be4 <tcp_pcb_remove+0xf4>)
 8006bb8:	4808      	ldr	r0, [pc, #32]	@ (8006bdc <tcp_pcb_remove+0xec>)
 8006bba:	f006 f93b 	bl	800ce34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006bca:	bf00      	nop
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	0800e4a0 	.word	0x0800e4a0
 8006bd8:	0800e858 	.word	0x0800e858
 8006bdc:	0800e4dc 	.word	0x0800e4dc
 8006be0:	0800e870 	.word	0x0800e870
 8006be4:	0800e88c 	.word	0x0800e88c

08006be8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006bf0:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <tcp_next_iss+0x24>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <tcp_next_iss+0x28>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4a04      	ldr	r2, [pc, #16]	@ (8006c0c <tcp_next_iss+0x24>)
 8006bfc:	6013      	str	r3, [r2, #0]
  return iss;
 8006bfe:	4b03      	ldr	r3, [pc, #12]	@ (8006c0c <tcp_next_iss+0x24>)
 8006c00:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	20006c4c 	.word	0x20006c4c

08006c14 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	6039      	str	r1, [r7, #0]
 8006c1e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8006c20:	6838      	ldr	r0, [r7, #0]
 8006c22:	f004 fee1 	bl	800b9e8 <ip4_route>
 8006c26:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	e010      	b.n	8006c54 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c36:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006c38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006c40:	897b      	ldrh	r3, [r7, #10]
 8006c42:	3b28      	subs	r3, #40	@ 0x28
 8006c44:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006c46:	893a      	ldrh	r2, [r7, #8]
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	bf28      	it	cs
 8006c4e:	4613      	movcs	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8006c52:	88fb      	ldrh	r3, [r7, #6]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006c6a:	e011      	b.n	8006c90 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d108      	bne.n	8006c8a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff f906 	bl	8005e90 <tcp_abort>
      pcb = next;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e002      	b.n	8006c90 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1ea      	bne.n	8006c6c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02c      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x6a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d028      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006cb8:	4b16      	ldr	r3, [pc, #88]	@ (8006d14 <tcp_netif_ip_addr_changed+0x74>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff ffcc 	bl	8006c5c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006cc4:	4b14      	ldr	r3, [pc, #80]	@ (8006d18 <tcp_netif_ip_addr_changed+0x78>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ffc6 	bl	8006c5c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d019      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x6a>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d015      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006cde:	4b0f      	ldr	r3, [pc, #60]	@ (8006d1c <tcp_netif_ip_addr_changed+0x7c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e00e      	b.n	8006d04 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d103      	bne.n	8006d00 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1ed      	bne.n	8006ce6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20006c58 	.word	0x20006c58
 8006d18:	20006c50 	.word	0x20006c50
 8006d1c:	20006c54 	.word	0x20006c54

08006d20 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b08b      	sub	sp, #44	@ 0x2c
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	4a81      	ldr	r2, [pc, #516]	@ (8006f34 <tcp_input+0x214>)
 8006d30:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	895b      	ldrh	r3, [r3, #10]
 8006d36:	2b13      	cmp	r3, #19
 8006d38:	f240 8396 	bls.w	8007468 <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f38 <tcp_input+0x218>)
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	4a7d      	ldr	r2, [pc, #500]	@ (8006f38 <tcp_input+0x218>)
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f005 f8c8 	bl	800bedc <ip4_addr_isbroadcast_u32>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 838c 	bne.w	800746c <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006d54:	4b78      	ldr	r3, [pc, #480]	@ (8006f38 <tcp_input+0x218>)
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006d5c:	2be0      	cmp	r3, #224	@ 0xe0
 8006d5e:	f000 8385 	beq.w	800746c <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8006d62:	4b74      	ldr	r3, [pc, #464]	@ (8006f34 <tcp_input+0x214>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	899b      	ldrh	r3, [r3, #12]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fd fa79 	bl	8004262 <lwip_htons>
 8006d70:	4603      	mov	r3, r0
 8006d72:	0b1b      	lsrs	r3, r3, #12
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006d7c:	7cbb      	ldrb	r3, [r7, #18]
 8006d7e:	2b13      	cmp	r3, #19
 8006d80:	f240 8376 	bls.w	8007470 <tcp_input+0x750>
 8006d84:	7cbb      	ldrb	r3, [r7, #18]
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	891b      	ldrh	r3, [r3, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	f200 836f 	bhi.w	8007470 <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006d92:	7cbb      	ldrb	r3, [r7, #18]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b14      	subs	r3, #20
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	4b68      	ldr	r3, [pc, #416]	@ (8006f3c <tcp_input+0x21c>)
 8006d9c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006d9e:	4b68      	ldr	r3, [pc, #416]	@ (8006f40 <tcp_input+0x220>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	895a      	ldrh	r2, [r3, #10]
 8006da8:	7cbb      	ldrb	r3, [r7, #18]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d30d      	bcc.n	8006dcc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006db0:	4b62      	ldr	r3, [pc, #392]	@ (8006f3c <tcp_input+0x21c>)
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	4b63      	ldr	r3, [pc, #396]	@ (8006f44 <tcp_input+0x224>)
 8006db6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006db8:	7cbb      	ldrb	r3, [r7, #18]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	b21b      	sxth	r3, r3
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fe fb39 	bl	800543c <pbuf_header>
 8006dca:	e055      	b.n	8006e78 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <tcp_input+0xc0>
 8006dd4:	4b5c      	ldr	r3, [pc, #368]	@ (8006f48 <tcp_input+0x228>)
 8006dd6:	22b2      	movs	r2, #178	@ 0xb2
 8006dd8:	495c      	ldr	r1, [pc, #368]	@ (8006f4c <tcp_input+0x22c>)
 8006dda:	485d      	ldr	r0, [pc, #372]	@ (8006f50 <tcp_input+0x230>)
 8006ddc:	f006 f82a 	bl	800ce34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8006de0:	f06f 0113 	mvn.w	r1, #19
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7fe fb29 	bl	800543c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	895a      	ldrh	r2, [r3, #10]
 8006dee:	4b55      	ldr	r3, [pc, #340]	@ (8006f44 <tcp_input+0x224>)
 8006df0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006df2:	4b52      	ldr	r3, [pc, #328]	@ (8006f3c <tcp_input+0x21c>)
 8006df4:	881a      	ldrh	r2, [r3, #0]
 8006df6:	4b53      	ldr	r3, [pc, #332]	@ (8006f44 <tcp_input+0x224>)
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006dfe:	4b51      	ldr	r3, [pc, #324]	@ (8006f44 <tcp_input+0x224>)
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	425b      	negs	r3, r3
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	b21b      	sxth	r3, r3
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fe fb16 	bl	800543c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	895b      	ldrh	r3, [r3, #10]
 8006e16:	8a3a      	ldrh	r2, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	f200 832b 	bhi.w	8007474 <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4a46      	ldr	r2, [pc, #280]	@ (8006f40 <tcp_input+0x220>)
 8006e26:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	8a3b      	ldrh	r3, [r7, #16]
 8006e2e:	425b      	negs	r3, r3
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	b21b      	sxth	r3, r3
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe fb00 	bl	800543c <pbuf_header>
    p->tot_len -= opt2len;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	891a      	ldrh	r2, [r3, #8]
 8006e40:	8a3b      	ldrh	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	895b      	ldrh	r3, [r3, #10]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <tcp_input+0x13e>
 8006e52:	4b3d      	ldr	r3, [pc, #244]	@ (8006f48 <tcp_input+0x228>)
 8006e54:	22cf      	movs	r2, #207	@ 0xcf
 8006e56:	493f      	ldr	r1, [pc, #252]	@ (8006f54 <tcp_input+0x234>)
 8006e58:	483d      	ldr	r0, [pc, #244]	@ (8006f50 <tcp_input+0x230>)
 8006e5a:	f005 ffeb 	bl	800ce34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	891a      	ldrh	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	891b      	ldrh	r3, [r3, #8]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d005      	beq.n	8006e78 <tcp_input+0x158>
 8006e6c:	4b36      	ldr	r3, [pc, #216]	@ (8006f48 <tcp_input+0x228>)
 8006e6e:	22d0      	movs	r2, #208	@ 0xd0
 8006e70:	4939      	ldr	r1, [pc, #228]	@ (8006f58 <tcp_input+0x238>)
 8006e72:	4837      	ldr	r0, [pc, #220]	@ (8006f50 <tcp_input+0x230>)
 8006e74:	f005 ffde 	bl	800ce34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006e78:	4b2e      	ldr	r3, [pc, #184]	@ (8006f34 <tcp_input+0x214>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	4a2c      	ldr	r2, [pc, #176]	@ (8006f34 <tcp_input+0x214>)
 8006e82:	6814      	ldr	r4, [r2, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fd f9ec 	bl	8004262 <lwip_htons>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006e8e:	4b29      	ldr	r3, [pc, #164]	@ (8006f34 <tcp_input+0x214>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	885b      	ldrh	r3, [r3, #2]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	4a27      	ldr	r2, [pc, #156]	@ (8006f34 <tcp_input+0x214>)
 8006e98:	6814      	ldr	r4, [r2, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fd f9e1 	bl	8004262 <lwip_htons>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006ea4:	4b23      	ldr	r3, [pc, #140]	@ (8006f34 <tcp_input+0x214>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	4a22      	ldr	r2, [pc, #136]	@ (8006f34 <tcp_input+0x214>)
 8006eac:	6814      	ldr	r4, [r2, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fd f9e4 	bl	800427c <lwip_htonl>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	6063      	str	r3, [r4, #4]
 8006eb8:	6863      	ldr	r3, [r4, #4]
 8006eba:	4a28      	ldr	r2, [pc, #160]	@ (8006f5c <tcp_input+0x23c>)
 8006ebc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8006f34 <tcp_input+0x214>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f34 <tcp_input+0x214>)
 8006ec6:	6814      	ldr	r4, [r2, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fd f9d7 	bl	800427c <lwip_htonl>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	60a3      	str	r3, [r4, #8]
 8006ed2:	68a3      	ldr	r3, [r4, #8]
 8006ed4:	4a22      	ldr	r2, [pc, #136]	@ (8006f60 <tcp_input+0x240>)
 8006ed6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006ed8:	4b16      	ldr	r3, [pc, #88]	@ (8006f34 <tcp_input+0x214>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	89db      	ldrh	r3, [r3, #14]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4a14      	ldr	r2, [pc, #80]	@ (8006f34 <tcp_input+0x214>)
 8006ee2:	6814      	ldr	r4, [r2, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fd f9bc 	bl	8004262 <lwip_htons>
 8006eea:	4603      	mov	r3, r0
 8006eec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006eee:	4b11      	ldr	r3, [pc, #68]	@ (8006f34 <tcp_input+0x214>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	899b      	ldrh	r3, [r3, #12]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd f9b3 	bl	8004262 <lwip_htons>
 8006efc:	4603      	mov	r3, r0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	4b17      	ldr	r3, [pc, #92]	@ (8006f64 <tcp_input+0x244>)
 8006f08:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	891b      	ldrh	r3, [r3, #8]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	@ (8006f64 <tcp_input+0x244>)
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	f002 0203 	and.w	r2, r2, #3
 8006f16:	2a00      	cmp	r2, #0
 8006f18:	bf14      	ite	ne
 8006f1a:	2201      	movne	r2, #1
 8006f1c:	2200      	moveq	r2, #0
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	4413      	add	r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <tcp_input+0x248>)
 8006f26:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f6c <tcp_input+0x24c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	e081      	b.n	8007038 <tcp_input+0x318>
 8006f34:	20006c74 	.word	0x20006c74
 8006f38:	200036f0 	.word	0x200036f0
 8006f3c:	20006c78 	.word	0x20006c78
 8006f40:	20006c7c 	.word	0x20006c7c
 8006f44:	20006c7a 	.word	0x20006c7a
 8006f48:	0800e8a4 	.word	0x0800e8a4
 8006f4c:	0800e8d8 	.word	0x0800e8d8
 8006f50:	0800e8e8 	.word	0x0800e8e8
 8006f54:	0800e910 	.word	0x0800e910
 8006f58:	0800e91c 	.word	0x0800e91c
 8006f5c:	20006c84 	.word	0x20006c84
 8006f60:	20006c88 	.word	0x20006c88
 8006f64:	20006c90 	.word	0x20006c90
 8006f68:	20006c8e 	.word	0x20006c8e
 8006f6c:	20006c58 	.word	0x20006c58
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	7d1b      	ldrb	r3, [r3, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <tcp_input+0x264>
 8006f78:	4b6e      	ldr	r3, [pc, #440]	@ (8007134 <tcp_input+0x414>)
 8006f7a:	22e2      	movs	r2, #226	@ 0xe2
 8006f7c:	496e      	ldr	r1, [pc, #440]	@ (8007138 <tcp_input+0x418>)
 8006f7e:	486f      	ldr	r0, [pc, #444]	@ (800713c <tcp_input+0x41c>)
 8006f80:	f005 ff58 	bl	800ce34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	7d1b      	ldrb	r3, [r3, #20]
 8006f88:	2b0a      	cmp	r3, #10
 8006f8a:	d105      	bne.n	8006f98 <tcp_input+0x278>
 8006f8c:	4b69      	ldr	r3, [pc, #420]	@ (8007134 <tcp_input+0x414>)
 8006f8e:	22e3      	movs	r2, #227	@ 0xe3
 8006f90:	496b      	ldr	r1, [pc, #428]	@ (8007140 <tcp_input+0x420>)
 8006f92:	486a      	ldr	r0, [pc, #424]	@ (800713c <tcp_input+0x41c>)
 8006f94:	f005 ff4e 	bl	800ce34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	7d1b      	ldrb	r3, [r3, #20]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d105      	bne.n	8006fac <tcp_input+0x28c>
 8006fa0:	4b64      	ldr	r3, [pc, #400]	@ (8007134 <tcp_input+0x414>)
 8006fa2:	22e4      	movs	r2, #228	@ 0xe4
 8006fa4:	4967      	ldr	r1, [pc, #412]	@ (8007144 <tcp_input+0x424>)
 8006fa6:	4865      	ldr	r0, [pc, #404]	@ (800713c <tcp_input+0x41c>)
 8006fa8:	f005 ff44 	bl	800ce34 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	8b1a      	ldrh	r2, [r3, #24]
 8006fb0:	4b65      	ldr	r3, [pc, #404]	@ (8007148 <tcp_input+0x428>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d138      	bne.n	800702e <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	8ada      	ldrh	r2, [r3, #22]
 8006fc0:	4b61      	ldr	r3, [pc, #388]	@ (8007148 <tcp_input+0x428>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	885b      	ldrh	r3, [r3, #2]
 8006fc6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d130      	bne.n	800702e <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800714c <tcp_input+0x42c>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d12a      	bne.n	800702e <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800714c <tcp_input+0x42c>)
 8006fde:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d124      	bne.n	800702e <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d105      	bne.n	8006ffa <tcp_input+0x2da>
 8006fee:	4b51      	ldr	r3, [pc, #324]	@ (8007134 <tcp_input+0x414>)
 8006ff0:	22ec      	movs	r2, #236	@ 0xec
 8006ff2:	4957      	ldr	r1, [pc, #348]	@ (8007150 <tcp_input+0x430>)
 8006ff4:	4851      	ldr	r0, [pc, #324]	@ (800713c <tcp_input+0x41c>)
 8006ff6:	f005 ff1d 	bl	800ce34 <iprintf>
      if (prev != NULL) {
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <tcp_input+0x2f6>
        prev->next = pcb->next;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007008:	4b52      	ldr	r3, [pc, #328]	@ (8007154 <tcp_input+0x434>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007010:	4a50      	ldr	r2, [pc, #320]	@ (8007154 <tcp_input+0x434>)
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	429a      	cmp	r2, r3
 800701e:	d10f      	bne.n	8007040 <tcp_input+0x320>
 8007020:	4b44      	ldr	r3, [pc, #272]	@ (8007134 <tcp_input+0x414>)
 8007022:	22f4      	movs	r2, #244	@ 0xf4
 8007024:	494c      	ldr	r1, [pc, #304]	@ (8007158 <tcp_input+0x438>)
 8007026:	4845      	ldr	r0, [pc, #276]	@ (800713c <tcp_input+0x41c>)
 8007028:	f005 ff04 	bl	800ce34 <iprintf>
      break;
 800702c:	e008      	b.n	8007040 <tcp_input+0x320>
    }
    prev = pcb;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d198      	bne.n	8006f70 <tcp_input+0x250>
 800703e:	e000      	b.n	8007042 <tcp_input+0x322>
      break;
 8007040:	bf00      	nop
  }

  if (pcb == NULL) {
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f040 808f 	bne.w	8007168 <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800704a:	4b44      	ldr	r3, [pc, #272]	@ (800715c <tcp_input+0x43c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	e02f      	b.n	80070b2 <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	7d1b      	ldrb	r3, [r3, #20]
 8007056:	2b0a      	cmp	r3, #10
 8007058:	d005      	beq.n	8007066 <tcp_input+0x346>
 800705a:	4b36      	ldr	r3, [pc, #216]	@ (8007134 <tcp_input+0x414>)
 800705c:	22fe      	movs	r2, #254	@ 0xfe
 800705e:	4940      	ldr	r1, [pc, #256]	@ (8007160 <tcp_input+0x440>)
 8007060:	4836      	ldr	r0, [pc, #216]	@ (800713c <tcp_input+0x41c>)
 8007062:	f005 fee7 	bl	800ce34 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	8b1a      	ldrh	r2, [r3, #24]
 800706a:	4b37      	ldr	r3, [pc, #220]	@ (8007148 <tcp_input+0x428>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	429a      	cmp	r2, r3
 8007074:	d11a      	bne.n	80070ac <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	8ada      	ldrh	r2, [r3, #22]
 800707a:	4b33      	ldr	r3, [pc, #204]	@ (8007148 <tcp_input+0x428>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	885b      	ldrh	r3, [r3, #2]
 8007080:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007082:	429a      	cmp	r2, r3
 8007084:	d112      	bne.n	80070ac <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	4b30      	ldr	r3, [pc, #192]	@ (800714c <tcp_input+0x42c>)
 800708c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800708e:	429a      	cmp	r2, r3
 8007090:	d10c      	bne.n	80070ac <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4b2d      	ldr	r3, [pc, #180]	@ (800714c <tcp_input+0x42c>)
 8007098:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800709a:	429a      	cmp	r2, r3
 800709c:	d106      	bne.n	80070ac <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800709e:	69f8      	ldr	r0, [r7, #28]
 80070a0:	f000 fb16 	bl	80076d0 <tcp_timewait_input>
        pbuf_free(p);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe f9ed 	bl	8005484 <pbuf_free>
        return;
 80070aa:	e1e9      	b.n	8007480 <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1cc      	bne.n	8007052 <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80070bc:	4b29      	ldr	r3, [pc, #164]	@ (8007164 <tcp_input+0x444>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e019      	b.n	80070f8 <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	8ada      	ldrh	r2, [r3, #22]
 80070c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007148 <tcp_input+0x428>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	885b      	ldrh	r3, [r3, #2]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d10c      	bne.n	80070ee <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	4b1c      	ldr	r3, [pc, #112]	@ (800714c <tcp_input+0x42c>)
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d00f      	beq.n	8007100 <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00d      	beq.n	8007102 <tcp_input+0x3e2>
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e2      	bne.n	80070c4 <tcp_input+0x3a4>
 80070fe:	e000      	b.n	8007102 <tcp_input+0x3e2>
            break;
 8007100:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02f      	beq.n	8007168 <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007116:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <tcp_input+0x444>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800711e:	4a11      	ldr	r2, [pc, #68]	@ (8007164 <tcp_input+0x444>)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8007124:	6978      	ldr	r0, [r7, #20]
 8007126:	f000 f9f3 	bl	8007510 <tcp_listen_input>
      pbuf_free(p);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fe f9aa 	bl	8005484 <pbuf_free>
      return;
 8007130:	e1a6      	b.n	8007480 <tcp_input+0x760>
 8007132:	bf00      	nop
 8007134:	0800e8a4 	.word	0x0800e8a4
 8007138:	0800e93c 	.word	0x0800e93c
 800713c:	0800e8e8 	.word	0x0800e8e8
 8007140:	0800e964 	.word	0x0800e964
 8007144:	0800e990 	.word	0x0800e990
 8007148:	20006c74 	.word	0x20006c74
 800714c:	200036f0 	.word	0x200036f0
 8007150:	0800e9b8 	.word	0x0800e9b8
 8007154:	20006c58 	.word	0x20006c58
 8007158:	0800e9e4 	.word	0x0800e9e4
 800715c:	20006c5c 	.word	0x20006c5c
 8007160:	0800ea10 	.word	0x0800ea10
 8007164:	20006c54 	.word	0x20006c54
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8156 	beq.w	800741c <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007170:	4b94      	ldr	r3, [pc, #592]	@ (80073c4 <tcp_input+0x6a4>)
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	891a      	ldrh	r2, [r3, #8]
 800717a:	4b92      	ldr	r3, [pc, #584]	@ (80073c4 <tcp_input+0x6a4>)
 800717c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800717e:	4a91      	ldr	r2, [pc, #580]	@ (80073c4 <tcp_input+0x6a4>)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007184:	4b90      	ldr	r3, [pc, #576]	@ (80073c8 <tcp_input+0x6a8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a8e      	ldr	r2, [pc, #568]	@ (80073c4 <tcp_input+0x6a4>)
 800718a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800718c:	4b8f      	ldr	r3, [pc, #572]	@ (80073cc <tcp_input+0x6ac>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007192:	4b8f      	ldr	r3, [pc, #572]	@ (80073d0 <tcp_input+0x6b0>)
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007198:	4b8e      	ldr	r3, [pc, #568]	@ (80073d4 <tcp_input+0x6b4>)
 800719a:	2200      	movs	r2, #0
 800719c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800719e:	4b8e      	ldr	r3, [pc, #568]	@ (80073d8 <tcp_input+0x6b8>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d006      	beq.n	80071b8 <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7b5b      	ldrb	r3, [r3, #13]
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d017      	beq.n	80071f0 <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80071c0:	69f8      	ldr	r0, [r7, #28]
 80071c2:	f7ff fa41 	bl	8006648 <tcp_process_refused_data>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f113 0f0d 	cmn.w	r3, #13
 80071cc:	d007      	beq.n	80071de <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00c      	beq.n	80071f0 <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80071d6:	4b81      	ldr	r3, [pc, #516]	@ (80073dc <tcp_input+0x6bc>)
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f040 80e2 	bne.w	80073ac <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80071e8:	69f8      	ldr	r0, [r7, #28]
 80071ea:	f002 f9e9 	bl	80095c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80071ee:	e0dd      	b.n	80073ac <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 80071f0:	4a7b      	ldr	r2, [pc, #492]	@ (80073e0 <tcp_input+0x6c0>)
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80071f6:	69f8      	ldr	r0, [r7, #28]
 80071f8:	f000 fad2 	bl	80077a0 <tcp_process>
 80071fc:	4603      	mov	r3, r0
 80071fe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007204:	f113 0f0d 	cmn.w	r3, #13
 8007208:	f000 80d2 	beq.w	80073b0 <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 800720c:	4b70      	ldr	r3, [pc, #448]	@ (80073d0 <tcp_input+0x6b0>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f003 0308 	and.w	r3, r3, #8
 8007214:	2b00      	cmp	r3, #0
 8007216:	d016      	beq.n	8007246 <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d008      	beq.n	8007234 <tcp_input+0x514>
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	6912      	ldr	r2, [r2, #16]
 800722c:	f06f 010d 	mvn.w	r1, #13
 8007230:	4610      	mov	r0, r2
 8007232:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007234:	69f9      	ldr	r1, [r7, #28]
 8007236:	486b      	ldr	r0, [pc, #428]	@ (80073e4 <tcp_input+0x6c4>)
 8007238:	f7ff fc5a 	bl	8006af0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800723c:	69f9      	ldr	r1, [r7, #28]
 800723e:	2001      	movs	r0, #1
 8007240:	f7fd fc04 	bl	8004a4c <memp_free>
 8007244:	e0d7      	b.n	80073f6 <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800724a:	4b62      	ldr	r3, [pc, #392]	@ (80073d4 <tcp_input+0x6b4>)
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01b      	beq.n	800728a <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007252:	4b60      	ldr	r3, [pc, #384]	@ (80073d4 <tcp_input+0x6b4>)
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <tcp_input+0x554>
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	6910      	ldr	r0, [r2, #16]
 8007268:	89fa      	ldrh	r2, [r7, #14]
 800726a:	69f9      	ldr	r1, [r7, #28]
 800726c:	4798      	blx	r3
 800726e:	4603      	mov	r3, r0
 8007270:	74fb      	strb	r3, [r7, #19]
 8007272:	e001      	b.n	8007278 <tcp_input+0x558>
 8007274:	2300      	movs	r3, #0
 8007276:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007278:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800727c:	f113 0f0d 	cmn.w	r3, #13
 8007280:	f000 8098 	beq.w	80073b4 <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007284:	4b53      	ldr	r3, [pc, #332]	@ (80073d4 <tcp_input+0x6b4>)
 8007286:	2200      	movs	r2, #0
 8007288:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800728a:	69f8      	ldr	r0, [r7, #28]
 800728c:	f000 f90e 	bl	80074ac <tcp_input_delayed_close>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 8090 	bne.w	80073b8 <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007298:	4b4c      	ldr	r3, [pc, #304]	@ (80073cc <tcp_input+0x6ac>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d041      	beq.n	8007324 <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d006      	beq.n	80072b6 <tcp_input+0x596>
 80072a8:	4b4f      	ldr	r3, [pc, #316]	@ (80073e8 <tcp_input+0x6c8>)
 80072aa:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80072ae:	494f      	ldr	r1, [pc, #316]	@ (80073ec <tcp_input+0x6cc>)
 80072b0:	484f      	ldr	r0, [pc, #316]	@ (80073f0 <tcp_input+0x6d0>)
 80072b2:	f005 fdbf 	bl	800ce34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	7e9b      	ldrb	r3, [r3, #26]
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d008      	beq.n	80072d4 <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80072c2:	4b42      	ldr	r3, [pc, #264]	@ (80073cc <tcp_input+0x6ac>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f8dc 	bl	8005484 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80072cc:	69f8      	ldr	r0, [r7, #28]
 80072ce:	f7fe fddf 	bl	8005e90 <tcp_abort>
            goto aborted;
 80072d2:	e090      	b.n	80073f6 <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00c      	beq.n	80072f8 <tcp_input+0x5d8>
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	6918      	ldr	r0, [r3, #16]
 80072e8:	4b38      	ldr	r3, [pc, #224]	@ (80073cc <tcp_input+0x6ac>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	2300      	movs	r3, #0
 80072ee:	69f9      	ldr	r1, [r7, #28]
 80072f0:	47a0      	blx	r4
 80072f2:	4603      	mov	r3, r0
 80072f4:	74fb      	strb	r3, [r7, #19]
 80072f6:	e008      	b.n	800730a <tcp_input+0x5ea>
 80072f8:	4b34      	ldr	r3, [pc, #208]	@ (80073cc <tcp_input+0x6ac>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	2300      	movs	r3, #0
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	2000      	movs	r0, #0
 8007302:	f7ff fa53 	bl	80067ac <tcp_recv_null>
 8007306:	4603      	mov	r3, r0
 8007308:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800730a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800730e:	f113 0f0d 	cmn.w	r3, #13
 8007312:	d053      	beq.n	80073bc <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007314:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800731c:	4b2b      	ldr	r3, [pc, #172]	@ (80073cc <tcp_input+0x6ac>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007324:	4b2a      	ldr	r3, [pc, #168]	@ (80073d0 <tcp_input+0x6b0>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	d030      	beq.n	8007392 <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733c:	7b5a      	ldrb	r2, [r3, #13]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007342:	f042 0220 	orr.w	r2, r2, #32
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	735a      	strb	r2, [r3, #13]
 800734a:	e022      	b.n	8007392 <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007350:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007354:	d005      	beq.n	8007362 <tcp_input+0x642>
              pcb->rcv_wnd++;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800735a:	3301      	adds	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <tcp_input+0x664>
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	6918      	ldr	r0, [r3, #16]
 8007376:	2300      	movs	r3, #0
 8007378:	2200      	movs	r2, #0
 800737a:	69f9      	ldr	r1, [r7, #28]
 800737c:	47a0      	blx	r4
 800737e:	4603      	mov	r3, r0
 8007380:	74fb      	strb	r3, [r7, #19]
 8007382:	e001      	b.n	8007388 <tcp_input+0x668>
 8007384:	2300      	movs	r3, #0
 8007386:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800738c:	f113 0f0d 	cmn.w	r3, #13
 8007390:	d016      	beq.n	80073c0 <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007392:	4b13      	ldr	r3, [pc, #76]	@ (80073e0 <tcp_input+0x6c0>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007398:	69f8      	ldr	r0, [r7, #28]
 800739a:	f000 f887 	bl	80074ac <tcp_input_delayed_close>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d127      	bne.n	80073f4 <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80073a4:	69f8      	ldr	r0, [r7, #28]
 80073a6:	f002 f967 	bl	8009678 <tcp_output>
 80073aa:	e024      	b.n	80073f6 <tcp_input+0x6d6>
        goto aborted;
 80073ac:	bf00      	nop
 80073ae:	e022      	b.n	80073f6 <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80073b0:	bf00      	nop
 80073b2:	e020      	b.n	80073f6 <tcp_input+0x6d6>
              goto aborted;
 80073b4:	bf00      	nop
 80073b6:	e01e      	b.n	80073f6 <tcp_input+0x6d6>
          goto aborted;
 80073b8:	bf00      	nop
 80073ba:	e01c      	b.n	80073f6 <tcp_input+0x6d6>
            goto aborted;
 80073bc:	bf00      	nop
 80073be:	e01a      	b.n	80073f6 <tcp_input+0x6d6>
              goto aborted;
 80073c0:	bf00      	nop
 80073c2:	e018      	b.n	80073f6 <tcp_input+0x6d6>
 80073c4:	20006c64 	.word	0x20006c64
 80073c8:	20006c74 	.word	0x20006c74
 80073cc:	20006c94 	.word	0x20006c94
 80073d0:	20006c91 	.word	0x20006c91
 80073d4:	20006c8c 	.word	0x20006c8c
 80073d8:	20006c90 	.word	0x20006c90
 80073dc:	20006c8e 	.word	0x20006c8e
 80073e0:	20006c98 	.word	0x20006c98
 80073e4:	20006c58 	.word	0x20006c58
 80073e8:	0800e8a4 	.word	0x0800e8a4
 80073ec:	0800ea40 	.word	0x0800ea40
 80073f0:	0800e8e8 	.word	0x0800e8e8
          goto aborted;
 80073f4:	bf00      	nop
    tcp_input_pcb = NULL;
 80073f6:	4b24      	ldr	r3, [pc, #144]	@ (8007488 <tcp_input+0x768>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80073fc:	4b23      	ldr	r3, [pc, #140]	@ (800748c <tcp_input+0x76c>)
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8007402:	4b23      	ldr	r3, [pc, #140]	@ (8007490 <tcp_input+0x770>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d039      	beq.n	800747e <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 800740a:	4b21      	ldr	r3, [pc, #132]	@ (8007490 <tcp_input+0x770>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe f838 	bl	8005484 <pbuf_free>
      inseg.p = NULL;
 8007414:	4b1e      	ldr	r3, [pc, #120]	@ (8007490 <tcp_input+0x770>)
 8007416:	2200      	movs	r2, #0
 8007418:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800741a:	e030      	b.n	800747e <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800741c:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <tcp_input+0x774>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	899b      	ldrh	r3, [r3, #12]
 8007422:	b29b      	uxth	r3, r3
 8007424:	4618      	mov	r0, r3
 8007426:	f7fc ff1c 	bl	8004262 <lwip_htons>
 800742a:	4603      	mov	r3, r0
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d115      	bne.n	8007460 <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007434:	4b18      	ldr	r3, [pc, #96]	@ (8007498 <tcp_input+0x778>)
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	4b18      	ldr	r3, [pc, #96]	@ (800749c <tcp_input+0x77c>)
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	4b18      	ldr	r3, [pc, #96]	@ (80074a0 <tcp_input+0x780>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007444:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <tcp_input+0x774>)
 8007446:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800744c:	4a11      	ldr	r2, [pc, #68]	@ (8007494 <tcp_input+0x774>)
 800744e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007450:	8812      	ldrh	r2, [r2, #0]
 8007452:	b292      	uxth	r2, r2
 8007454:	9201      	str	r2, [sp, #4]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4b12      	ldr	r3, [pc, #72]	@ (80074a4 <tcp_input+0x784>)
 800745a:	4a13      	ldr	r2, [pc, #76]	@ (80074a8 <tcp_input+0x788>)
 800745c:	f002 fb90 	bl	8009b80 <tcp_rst>
    pbuf_free(p);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fe f80f 	bl	8005484 <pbuf_free>
  return;
 8007466:	e00a      	b.n	800747e <tcp_input+0x75e>
    goto dropped;
 8007468:	bf00      	nop
 800746a:	e004      	b.n	8007476 <tcp_input+0x756>
    goto dropped;
 800746c:	bf00      	nop
 800746e:	e002      	b.n	8007476 <tcp_input+0x756>
    goto dropped;
 8007470:	bf00      	nop
 8007472:	e000      	b.n	8007476 <tcp_input+0x756>
      goto dropped;
 8007474:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fe f804 	bl	8005484 <pbuf_free>
 800747c:	e000      	b.n	8007480 <tcp_input+0x760>
  return;
 800747e:	bf00      	nop
}
 8007480:	3724      	adds	r7, #36	@ 0x24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd90      	pop	{r4, r7, pc}
 8007486:	bf00      	nop
 8007488:	20006c98 	.word	0x20006c98
 800748c:	20006c94 	.word	0x20006c94
 8007490:	20006c64 	.word	0x20006c64
 8007494:	20006c74 	.word	0x20006c74
 8007498:	20006c88 	.word	0x20006c88
 800749c:	20006c8e 	.word	0x20006c8e
 80074a0:	20006c84 	.word	0x20006c84
 80074a4:	20003700 	.word	0x20003700
 80074a8:	20003704 	.word	0x20003704

080074ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80074b4:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <tcp_input_delayed_close+0x5c>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01d      	beq.n	80074fc <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7e9b      	ldrb	r3, [r3, #26]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d008      	beq.n	80074e8 <tcp_input_delayed_close+0x3c>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6912      	ldr	r2, [r2, #16]
 80074e0:	f06f 010e 	mvn.w	r1, #14
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4808      	ldr	r0, [pc, #32]	@ (800750c <tcp_input_delayed_close+0x60>)
 80074ec:	f7ff fb00 	bl	8006af0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	2001      	movs	r0, #1
 80074f4:	f7fd faaa 	bl	8004a4c <memp_free>
    return 1;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e000      	b.n	80074fe <tcp_input_delayed_close+0x52>
  }
  return 0;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20006c91 	.word	0x20006c91
 800750c:	20006c58 	.word	0x20006c58

08007510 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007518:	4b63      	ldr	r3, [pc, #396]	@ (80076a8 <tcp_listen_input+0x198>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 80bb 	bne.w	800769c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007526:	4b60      	ldr	r3, [pc, #384]	@ (80076a8 <tcp_listen_input+0x198>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f003 0310 	and.w	r3, r3, #16
 800752e:	2b00      	cmp	r3, #0
 8007530:	d016      	beq.n	8007560 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007532:	4b5e      	ldr	r3, [pc, #376]	@ (80076ac <tcp_listen_input+0x19c>)
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	4b5e      	ldr	r3, [pc, #376]	@ (80076b0 <tcp_listen_input+0x1a0>)
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	4b5d      	ldr	r3, [pc, #372]	@ (80076b4 <tcp_listen_input+0x1a4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007542:	4b5d      	ldr	r3, [pc, #372]	@ (80076b8 <tcp_listen_input+0x1a8>)
 8007544:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007546:	885b      	ldrh	r3, [r3, #2]
 8007548:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800754a:	4a5b      	ldr	r2, [pc, #364]	@ (80076b8 <tcp_listen_input+0x1a8>)
 800754c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800754e:	8812      	ldrh	r2, [r2, #0]
 8007550:	b292      	uxth	r2, r2
 8007552:	9201      	str	r2, [sp, #4]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	4b59      	ldr	r3, [pc, #356]	@ (80076bc <tcp_listen_input+0x1ac>)
 8007558:	4a59      	ldr	r2, [pc, #356]	@ (80076c0 <tcp_listen_input+0x1b0>)
 800755a:	f002 fb11 	bl	8009b80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800755e:	e09f      	b.n	80076a0 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8007560:	4b51      	ldr	r3, [pc, #324]	@ (80076a8 <tcp_listen_input+0x198>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8099 	beq.w	80076a0 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	7d5b      	ldrb	r3, [r3, #21]
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff f9f8 	bl	8006968 <tcp_alloc>
 8007578:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d111      	bne.n	80075a4 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <tcp_listen_input+0x8e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6910      	ldr	r0, [r2, #16]
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	2100      	movs	r1, #0
 8007596:	4798      	blx	r3
 8007598:	4603      	mov	r3, r0
 800759a:	73bb      	strb	r3, [r7, #14]
      return;
 800759c:	e081      	b.n	80076a2 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800759e:	23f0      	movs	r3, #240	@ 0xf0
 80075a0:	73bb      	strb	r3, [r7, #14]
      return;
 80075a2:	e07e      	b.n	80076a2 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80075a4:	4b47      	ldr	r3, [pc, #284]	@ (80076c4 <tcp_listen_input+0x1b4>)
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80075ac:	4b45      	ldr	r3, [pc, #276]	@ (80076c4 <tcp_listen_input+0x1b4>)
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8ada      	ldrh	r2, [r3, #22]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80075bc:	4b3e      	ldr	r3, [pc, #248]	@ (80076b8 <tcp_listen_input+0x1a8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2203      	movs	r2, #3
 80075cc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80075ce:	4b39      	ldr	r3, [pc, #228]	@ (80076b4 <tcp_listen_input+0x1a4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80075e0:	6978      	ldr	r0, [r7, #20]
 80075e2:	f7ff fb01 	bl	8006be8 <tcp_next_iss>
 80075e6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007600:	4b2c      	ldr	r3, [pc, #176]	@ (80076b4 <tcp_listen_input+0x1a4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	1e5a      	subs	r2, r3, #1
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7a1b      	ldrb	r3, [r3, #8]
 800761c:	f003 030c 	and.w	r3, r3, #12
 8007620:	b2da      	uxtb	r2, r3
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007626:	4b28      	ldr	r3, [pc, #160]	@ (80076c8 <tcp_listen_input+0x1b8>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	60da      	str	r2, [r3, #12]
 800762e:	4a26      	ldr	r2, [pc, #152]	@ (80076c8 <tcp_listen_input+0x1b8>)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	f002 fcec 	bl	800a010 <tcp_timer_needed>
 8007638:	4b24      	ldr	r3, [pc, #144]	@ (80076cc <tcp_listen_input+0x1bc>)
 800763a:	2201      	movs	r2, #1
 800763c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f001 fd0c 	bl	800905c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007644:	4b1c      	ldr	r3, [pc, #112]	@ (80076b8 <tcp_listen_input+0x1a8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	89db      	ldrh	r3, [r3, #14]
 800764a:	b29a      	uxth	r2, r3
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	3304      	adds	r3, #4
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f7ff fad3 	bl	8006c14 <tcp_eff_send_mss_impl>
 800766e:	4603      	mov	r3, r0
 8007670:	461a      	mov	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007676:	2112      	movs	r1, #18
 8007678:	6978      	ldr	r0, [r7, #20]
 800767a:	f001 fea5 	bl	80093c8 <tcp_enqueue_flags>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d004      	beq.n	8007694 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800768a:	2100      	movs	r1, #0
 800768c:	6978      	ldr	r0, [r7, #20]
 800768e:	f7fe fb4d 	bl	8005d2c <tcp_abandon>
      return;
 8007692:	e006      	b.n	80076a2 <tcp_listen_input+0x192>
    tcp_output(npcb);
 8007694:	6978      	ldr	r0, [r7, #20]
 8007696:	f001 ffef 	bl	8009678 <tcp_output>
  return;
 800769a:	e001      	b.n	80076a0 <tcp_listen_input+0x190>
    return;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <tcp_listen_input+0x192>
  return;
 80076a0:	bf00      	nop
}
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20006c90 	.word	0x20006c90
 80076ac:	20006c88 	.word	0x20006c88
 80076b0:	20006c8e 	.word	0x20006c8e
 80076b4:	20006c84 	.word	0x20006c84
 80076b8:	20006c74 	.word	0x20006c74
 80076bc:	20003700 	.word	0x20003700
 80076c0:	20003704 	.word	0x20003704
 80076c4:	200036f0 	.word	0x200036f0
 80076c8:	20006c58 	.word	0x20006c58
 80076cc:	20006c60 	.word	0x20006c60

080076d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80076d8:	4b29      	ldr	r3, [pc, #164]	@ (8007780 <tcp_timewait_input+0xb0>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d146      	bne.n	8007772 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80076e4:	4b26      	ldr	r3, [pc, #152]	@ (8007780 <tcp_timewait_input+0xb0>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d027      	beq.n	8007740 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80076f0:	4b24      	ldr	r3, [pc, #144]	@ (8007784 <tcp_timewait_input+0xb4>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db2a      	blt.n	8007754 <tcp_timewait_input+0x84>
 80076fe:	4b21      	ldr	r3, [pc, #132]	@ (8007784 <tcp_timewait_input+0xb4>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800770a:	440b      	add	r3, r1
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	dc20      	bgt.n	8007754 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007712:	4b1d      	ldr	r3, [pc, #116]	@ (8007788 <tcp_timewait_input+0xb8>)
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	4b1d      	ldr	r3, [pc, #116]	@ (800778c <tcp_timewait_input+0xbc>)
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	4b19      	ldr	r3, [pc, #100]	@ (8007784 <tcp_timewait_input+0xb4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007722:	4b1b      	ldr	r3, [pc, #108]	@ (8007790 <tcp_timewait_input+0xc0>)
 8007724:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007726:	885b      	ldrh	r3, [r3, #2]
 8007728:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800772a:	4a19      	ldr	r2, [pc, #100]	@ (8007790 <tcp_timewait_input+0xc0>)
 800772c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800772e:	8812      	ldrh	r2, [r2, #0]
 8007730:	b292      	uxth	r2, r2
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4b17      	ldr	r3, [pc, #92]	@ (8007794 <tcp_timewait_input+0xc4>)
 8007738:	4a17      	ldr	r2, [pc, #92]	@ (8007798 <tcp_timewait_input+0xc8>)
 800773a:	f002 fa21 	bl	8009b80 <tcp_rst>
      return;
 800773e:	e01b      	b.n	8007778 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8007740:	4b0f      	ldr	r3, [pc, #60]	@ (8007780 <tcp_timewait_input+0xb0>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800774c:	4b13      	ldr	r3, [pc, #76]	@ (800779c <tcp_timewait_input+0xcc>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007754:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <tcp_timewait_input+0xbc>)
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00c      	beq.n	8007776 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7e9b      	ldrb	r3, [r3, #26]
 8007760:	f043 0302 	orr.w	r3, r3, #2
 8007764:	b2da      	uxtb	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 ff84 	bl	8009678 <tcp_output>
  }
  return;
 8007770:	e001      	b.n	8007776 <tcp_timewait_input+0xa6>
    return;
 8007772:	bf00      	nop
 8007774:	e000      	b.n	8007778 <tcp_timewait_input+0xa8>
  return;
 8007776:	bf00      	nop
}
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20006c90 	.word	0x20006c90
 8007784:	20006c84 	.word	0x20006c84
 8007788:	20006c88 	.word	0x20006c88
 800778c:	20006c8e 	.word	0x20006c8e
 8007790:	20006c74 	.word	0x20006c74
 8007794:	20003700 	.word	0x20003700
 8007798:	20003704 	.word	0x20003704
 800779c:	20006c4c 	.word	0x20006c4c

080077a0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08a      	sub	sp, #40	@ 0x28
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80077b0:	4b93      	ldr	r3, [pc, #588]	@ (8007a00 <tcp_process+0x260>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d04e      	beq.n	800785a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	7d1b      	ldrb	r3, [r3, #20]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d108      	bne.n	80077d6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077c8:	4b8e      	ldr	r3, [pc, #568]	@ (8007a04 <tcp_process+0x264>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d123      	bne.n	8007818 <tcp_process+0x78>
        acceptable = 1;
 80077d0:	2301      	movs	r3, #1
 80077d2:	76fb      	strb	r3, [r7, #27]
 80077d4:	e020      	b.n	8007818 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077da:	4b8b      	ldr	r3, [pc, #556]	@ (8007a08 <tcp_process+0x268>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d102      	bne.n	80077e8 <tcp_process+0x48>
        acceptable = 1;
 80077e2:	2301      	movs	r3, #1
 80077e4:	76fb      	strb	r3, [r7, #27]
 80077e6:	e017      	b.n	8007818 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80077e8:	4b87      	ldr	r3, [pc, #540]	@ (8007a08 <tcp_process+0x268>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	db10      	blt.n	8007818 <tcp_process+0x78>
 80077f6:	4b84      	ldr	r3, [pc, #528]	@ (8007a08 <tcp_process+0x268>)
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007802:	440b      	add	r3, r1
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	dc06      	bgt.n	8007818 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7e9b      	ldrb	r3, [r3, #26]
 800780e:	f043 0302 	orr.w	r3, r3, #2
 8007812:	b2da      	uxtb	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007818:	7efb      	ldrb	r3, [r7, #27]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01b      	beq.n	8007856 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7d1b      	ldrb	r3, [r3, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <tcp_process+0x94>
 8007826:	4b79      	ldr	r3, [pc, #484]	@ (8007a0c <tcp_process+0x26c>)
 8007828:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800782c:	4978      	ldr	r1, [pc, #480]	@ (8007a10 <tcp_process+0x270>)
 800782e:	4879      	ldr	r0, [pc, #484]	@ (8007a14 <tcp_process+0x274>)
 8007830:	f005 fb00 	bl	800ce34 <iprintf>
      recv_flags |= TF_RESET;
 8007834:	4b78      	ldr	r3, [pc, #480]	@ (8007a18 <tcp_process+0x278>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f043 0308 	orr.w	r3, r3, #8
 800783c:	b2da      	uxtb	r2, r3
 800783e:	4b76      	ldr	r3, [pc, #472]	@ (8007a18 <tcp_process+0x278>)
 8007840:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7e9b      	ldrb	r3, [r3, #26]
 8007846:	f023 0301 	bic.w	r3, r3, #1
 800784a:	b2da      	uxtb	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007850:	f06f 030d 	mvn.w	r3, #13
 8007854:	e348      	b.n	8007ee8 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e346      	b.n	8007ee8 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800785a:	4b69      	ldr	r3, [pc, #420]	@ (8007a00 <tcp_process+0x260>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <tcp_process+0xe8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7d1b      	ldrb	r3, [r3, #20]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d00c      	beq.n	8007888 <tcp_process+0xe8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7d1b      	ldrb	r3, [r3, #20]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d008      	beq.n	8007888 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7e9b      	ldrb	r3, [r3, #26]
 800787a:	f043 0302 	orr.w	r3, r3, #2
 800787e:	b2da      	uxtb	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e32f      	b.n	8007ee8 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7e9b      	ldrb	r3, [r3, #26]
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	d103      	bne.n	800789c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007894:	4b61      	ldr	r3, [pc, #388]	@ (8007a1c <tcp_process+0x27c>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fbd9 	bl	800905c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7d1b      	ldrb	r3, [r3, #20]
 80078ae:	3b02      	subs	r3, #2
 80078b0:	2b07      	cmp	r3, #7
 80078b2:	f200 8309 	bhi.w	8007ec8 <tcp_process+0x728>
 80078b6:	a201      	add	r2, pc, #4	@ (adr r2, 80078bc <tcp_process+0x11c>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	08007ad3 	.word	0x08007ad3
 80078c4:	08007c2b 	.word	0x08007c2b
 80078c8:	08007c55 	.word	0x08007c55
 80078cc:	08007d77 	.word	0x08007d77
 80078d0:	08007c2b 	.word	0x08007c2b
 80078d4:	08007e03 	.word	0x08007e03
 80078d8:	08007e93 	.word	0x08007e93
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80078dc:	4b48      	ldr	r3, [pc, #288]	@ (8007a00 <tcp_process+0x260>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80ca 	beq.w	8007a7e <tcp_process+0x2de>
 80078ea:	4b45      	ldr	r3, [pc, #276]	@ (8007a00 <tcp_process+0x260>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80c3 	beq.w	8007a7e <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	4b41      	ldr	r3, [pc, #260]	@ (8007a04 <tcp_process+0x264>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	f040 80bb 	bne.w	8007a7e <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8007908:	4b3f      	ldr	r3, [pc, #252]	@ (8007a08 <tcp_process+0x268>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 800791a:	4b3a      	ldr	r3, [pc, #232]	@ (8007a04 <tcp_process+0x264>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8007922:	4b3f      	ldr	r3, [pc, #252]	@ (8007a20 <tcp_process+0x280>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	89db      	ldrh	r3, [r3, #14]
 8007928:	b29a      	uxth	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800793c:	4b32      	ldr	r3, [pc, #200]	@ (8007a08 <tcp_process+0x268>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	1e5a      	subs	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2204      	movs	r2, #4
 800794a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f7ff f95c 	bl	8006c14 <tcp_eff_send_mss_impl>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800796e:	429a      	cmp	r2, r3
 8007970:	bf38      	it	cc
 8007972:	461a      	movcc	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4293      	cmp	r3, r2
 800797c:	bf28      	it	cs
 800797e:	4613      	movcs	r3, r2
 8007980:	b29a      	uxth	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <tcp_process+0x200>
 8007992:	4b1e      	ldr	r3, [pc, #120]	@ (8007a0c <tcp_process+0x26c>)
 8007994:	f240 321a 	movw	r2, #794	@ 0x31a
 8007998:	4922      	ldr	r1, [pc, #136]	@ (8007a24 <tcp_process+0x284>)
 800799a:	481e      	ldr	r0, [pc, #120]	@ (8007a14 <tcp_process+0x274>)
 800799c:	f005 fa4a 	bl	800ce34 <iprintf>
      --pcb->snd_queuelen;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d111      	bne.n	80079e0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079c0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d106      	bne.n	80079d6 <tcp_process+0x236>
 80079c8:	4b10      	ldr	r3, [pc, #64]	@ (8007a0c <tcp_process+0x26c>)
 80079ca:	f240 3222 	movw	r2, #802	@ 0x322
 80079ce:	4916      	ldr	r1, [pc, #88]	@ (8007a28 <tcp_process+0x288>)
 80079d0:	4810      	ldr	r0, [pc, #64]	@ (8007a14 <tcp_process+0x274>)
 80079d2:	f005 fa2f 	bl	800ce34 <iprintf>
        pcb->unsent = rseg->next;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	669a      	str	r2, [r3, #104]	@ 0x68
 80079de:	e003      	b.n	80079e8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 80079e8:	69f8      	ldr	r0, [r7, #28]
 80079ea:	f7fe feab 	bl	8006744 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d11a      	bne.n	8007a2c <tcp_process+0x28c>
        pcb->rtime = -1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079fc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80079fe:	e01c      	b.n	8007a3a <tcp_process+0x29a>
 8007a00:	20006c90 	.word	0x20006c90
 8007a04:	20006c88 	.word	0x20006c88
 8007a08:	20006c84 	.word	0x20006c84
 8007a0c:	0800e8a4 	.word	0x0800e8a4
 8007a10:	0800ea5c 	.word	0x0800ea5c
 8007a14:	0800e8e8 	.word	0x0800e8e8
 8007a18:	20006c91 	.word	0x20006c91
 8007a1c:	20006c4c 	.word	0x20006c4c
 8007a20:	20006c74 	.word	0x20006c74
 8007a24:	0800ea7c 	.word	0x0800ea7c
 8007a28:	0800ea94 	.word	0x0800ea94
      } else {
        pcb->rtime = 0;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00a      	beq.n	8007a5a <tcp_process+0x2ba>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6910      	ldr	r0, [r2, #16]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4798      	blx	r3
 8007a54:	4603      	mov	r3, r0
 8007a56:	76bb      	strb	r3, [r7, #26]
 8007a58:	e001      	b.n	8007a5e <tcp_process+0x2be>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8007a5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a62:	f113 0f0d 	cmn.w	r3, #13
 8007a66:	d102      	bne.n	8007a6e <tcp_process+0x2ce>
        return ERR_ABRT;
 8007a68:	f06f 030c 	mvn.w	r3, #12
 8007a6c:	e23c      	b.n	8007ee8 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	7e9b      	ldrb	r3, [r3, #26]
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8007a7c:	e226      	b.n	8007ecc <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8007a7e:	4b93      	ldr	r3, [pc, #588]	@ (8007ccc <tcp_process+0x52c>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 8220 	beq.w	8007ecc <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a8c:	4b90      	ldr	r3, [pc, #576]	@ (8007cd0 <tcp_process+0x530>)
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	4b90      	ldr	r3, [pc, #576]	@ (8007cd4 <tcp_process+0x534>)
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	4b90      	ldr	r3, [pc, #576]	@ (8007cd8 <tcp_process+0x538>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8007cdc <tcp_process+0x53c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007aa0:	885b      	ldrh	r3, [r3, #2]
 8007aa2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aa4:	4a8d      	ldr	r2, [pc, #564]	@ (8007cdc <tcp_process+0x53c>)
 8007aa6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007aa8:	8812      	ldrh	r2, [r2, #0]
 8007aaa:	b292      	uxth	r2, r2
 8007aac:	9201      	str	r2, [sp, #4]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8007ce0 <tcp_process+0x540>)
 8007ab2:	4a8c      	ldr	r2, [pc, #560]	@ (8007ce4 <tcp_process+0x544>)
 8007ab4:	f002 f864 	bl	8009b80 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	f200 8204 	bhi.w	8007ecc <tcp_process+0x72c>
        pcb->rtime = 0;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f002 f8ce 	bl	8009c6c <tcp_rexmit_rto>
    break;
 8007ad0:	e1fc      	b.n	8007ecc <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8007ccc <tcp_process+0x52c>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8091 	beq.w	8007c02 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007ae0:	4b7b      	ldr	r3, [pc, #492]	@ (8007cd0 <tcp_process+0x530>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	db71      	blt.n	8007bd4 <tcp_process+0x434>
 8007af0:	4b77      	ldr	r3, [pc, #476]	@ (8007cd0 <tcp_process+0x530>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	dc6a      	bgt.n	8007bd4 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2204      	movs	r2, #4
 8007b02:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <tcp_process+0x384>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <tcp_process+0x384>
 8007b16:	4b74      	ldr	r3, [pc, #464]	@ (8007ce8 <tcp_process+0x548>)
 8007b18:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007b1c:	4973      	ldr	r1, [pc, #460]	@ (8007cec <tcp_process+0x54c>)
 8007b1e:	4874      	ldr	r0, [pc, #464]	@ (8007cf0 <tcp_process+0x550>)
 8007b20:	f005 f988 	bl	800ce34 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8007b2c:	23fa      	movs	r3, #250	@ 0xfa
 8007b2e:	76bb      	strb	r3, [r7, #26]
 8007b30:	e011      	b.n	8007b56 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <tcp_process+0x3b2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6910      	ldr	r0, [r2, #16]
 8007b46:	2200      	movs	r2, #0
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4798      	blx	r3
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	76bb      	strb	r3, [r7, #26]
 8007b50:	e001      	b.n	8007b56 <tcp_process+0x3b6>
 8007b52:	23f0      	movs	r3, #240	@ 0xf0
 8007b54:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8007b56:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8007b5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007b62:	f113 0f0d 	cmn.w	r3, #13
 8007b66:	d002      	beq.n	8007b6e <tcp_process+0x3ce>
            tcp_abort(pcb);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe f991 	bl	8005e90 <tcp_abort>
          }
          return ERR_ABRT;
 8007b6e:	f06f 030c 	mvn.w	r3, #12
 8007b72:	e1b9      	b.n	8007ee8 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa3d 	bl	8007ff4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8007b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8007cf4 <tcp_process+0x554>)
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <tcp_process+0x3ee>
          recv_acked--;
 8007b82:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf4 <tcp_process+0x554>)
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf4 <tcp_process+0x554>)
 8007b8c:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bf38      	it	cc
 8007b9c:	461a      	movcc	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	bf28      	it	cs
 8007ba8:	4613      	movcs	r3, r2
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8007bb2:	4b51      	ldr	r3, [pc, #324]	@ (8007cf8 <tcp_process+0x558>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d034      	beq.n	8007c28 <tcp_process+0x488>
          tcp_ack_now(pcb);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7e9b      	ldrb	r3, [r3, #26]
 8007bc2:	f043 0302 	orr.w	r3, r3, #2
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2207      	movs	r2, #7
 8007bd0:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007bd2:	e029      	b.n	8007c28 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8007cd0 <tcp_process+0x530>)
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8007cd4 <tcp_process+0x534>)
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4b3e      	ldr	r3, [pc, #248]	@ (8007cd8 <tcp_process+0x538>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007be4:	4b3d      	ldr	r3, [pc, #244]	@ (8007cdc <tcp_process+0x53c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007be8:	885b      	ldrh	r3, [r3, #2]
 8007bea:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007bec:	4a3b      	ldr	r2, [pc, #236]	@ (8007cdc <tcp_process+0x53c>)
 8007bee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007bf0:	8812      	ldrh	r2, [r2, #0]
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	9201      	str	r2, [sp, #4]
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	4b39      	ldr	r3, [pc, #228]	@ (8007ce0 <tcp_process+0x540>)
 8007bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8007ce4 <tcp_process+0x544>)
 8007bfc:	f001 ffc0 	bl	8009b80 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8007c00:	e166      	b.n	8007ed0 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007c02:	4b32      	ldr	r3, [pc, #200]	@ (8007ccc <tcp_process+0x52c>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 8160 	beq.w	8007ed0 <tcp_process+0x730>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	1e5a      	subs	r2, r3, #1
 8007c16:	4b30      	ldr	r3, [pc, #192]	@ (8007cd8 <tcp_process+0x538>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	f040 8158 	bne.w	8007ed0 <tcp_process+0x730>
      tcp_rexmit(pcb);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f002 f859 	bl	8009cd8 <tcp_rexmit>
    break;
 8007c26:	e153      	b.n	8007ed0 <tcp_process+0x730>
 8007c28:	e152      	b.n	8007ed0 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9e2 	bl	8007ff4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007c30:	4b31      	ldr	r3, [pc, #196]	@ (8007cf8 <tcp_process+0x558>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 814b 	beq.w	8007ed4 <tcp_process+0x734>
      tcp_ack_now(pcb);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7e9b      	ldrb	r3, [r3, #26]
 8007c42:	f043 0302 	orr.w	r3, r3, #2
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2207      	movs	r2, #7
 8007c50:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007c52:	e13f      	b.n	8007ed4 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f9cd 	bl	8007ff4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007c5a:	4b27      	ldr	r3, [pc, #156]	@ (8007cf8 <tcp_process+0x558>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d070      	beq.n	8007d48 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c66:	4b19      	ldr	r3, [pc, #100]	@ (8007ccc <tcp_process+0x52c>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d05f      	beq.n	8007d32 <tcp_process+0x592>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c76:	4b16      	ldr	r3, [pc, #88]	@ (8007cd0 <tcp_process+0x530>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d159      	bne.n	8007d32 <tcp_process+0x592>
          pcb->unsent == NULL) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d155      	bne.n	8007d32 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7e9b      	ldrb	r3, [r3, #26]
 8007c8a:	f043 0302 	orr.w	r3, r3, #2
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fe fee9 	bl	8006a6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007c9a:	4b18      	ldr	r3, [pc, #96]	@ (8007cfc <tcp_process+0x55c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d105      	bne.n	8007cb0 <tcp_process+0x510>
 8007ca4:	4b15      	ldr	r3, [pc, #84]	@ (8007cfc <tcp_process+0x55c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	4a14      	ldr	r2, [pc, #80]	@ (8007cfc <tcp_process+0x55c>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	e02d      	b.n	8007d0c <tcp_process+0x56c>
 8007cb0:	4b12      	ldr	r3, [pc, #72]	@ (8007cfc <tcp_process+0x55c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	e026      	b.n	8007d06 <tcp_process+0x566>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d11e      	bne.n	8007d00 <tcp_process+0x560>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	60da      	str	r2, [r3, #12]
 8007cca:	e01f      	b.n	8007d0c <tcp_process+0x56c>
 8007ccc:	20006c90 	.word	0x20006c90
 8007cd0:	20006c88 	.word	0x20006c88
 8007cd4:	20006c8e 	.word	0x20006c8e
 8007cd8:	20006c84 	.word	0x20006c84
 8007cdc:	20006c74 	.word	0x20006c74
 8007ce0:	20003700 	.word	0x20003700
 8007ce4:	20003704 	.word	0x20003704
 8007ce8:	0800e8a4 	.word	0x0800e8a4
 8007cec:	0800eaa8 	.word	0x0800eaa8
 8007cf0:	0800e8e8 	.word	0x0800e8e8
 8007cf4:	20006c8c 	.word	0x20006c8c
 8007cf8:	20006c91 	.word	0x20006c91
 8007cfc:	20006c58 	.word	0x20006c58
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1d5      	bne.n	8007cb8 <tcp_process+0x518>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	4b77      	ldr	r3, [pc, #476]	@ (8007ef0 <tcp_process+0x750>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d1e:	4b75      	ldr	r3, [pc, #468]	@ (8007ef4 <tcp_process+0x754>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	4a73      	ldr	r2, [pc, #460]	@ (8007ef4 <tcp_process+0x754>)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	f002 f970 	bl	800a010 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8007d30:	e0d2      	b.n	8007ed8 <tcp_process+0x738>
        tcp_ack_now(pcb);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7e9b      	ldrb	r3, [r3, #26]
 8007d36:	f043 0302 	orr.w	r3, r3, #2
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2208      	movs	r2, #8
 8007d44:	751a      	strb	r2, [r3, #20]
    break;
 8007d46:	e0c7      	b.n	8007ed8 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007d48:	4b6b      	ldr	r3, [pc, #428]	@ (8007ef8 <tcp_process+0x758>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80c1 	beq.w	8007ed8 <tcp_process+0x738>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d5a:	4b68      	ldr	r3, [pc, #416]	@ (8007efc <tcp_process+0x75c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	f040 80ba 	bne.w	8007ed8 <tcp_process+0x738>
               pcb->unsent == NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 80b5 	bne.w	8007ed8 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2206      	movs	r2, #6
 8007d72:	751a      	strb	r2, [r3, #20]
    break;
 8007d74:	e0b0      	b.n	8007ed8 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f93c 	bl	8007ff4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007d7c:	4b60      	ldr	r3, [pc, #384]	@ (8007f00 <tcp_process+0x760>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80a9 	beq.w	8007edc <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7e9b      	ldrb	r3, [r3, #26]
 8007d8e:	f043 0302 	orr.w	r3, r3, #2
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fe fe67 	bl	8006a6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007d9e:	4b59      	ldr	r3, [pc, #356]	@ (8007f04 <tcp_process+0x764>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d105      	bne.n	8007db4 <tcp_process+0x614>
 8007da8:	4b56      	ldr	r3, [pc, #344]	@ (8007f04 <tcp_process+0x764>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	4a55      	ldr	r2, [pc, #340]	@ (8007f04 <tcp_process+0x764>)
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e013      	b.n	8007ddc <tcp_process+0x63c>
 8007db4:	4b53      	ldr	r3, [pc, #332]	@ (8007f04 <tcp_process+0x764>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	e00c      	b.n	8007dd6 <tcp_process+0x636>
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d104      	bne.n	8007dd0 <tcp_process+0x630>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	60da      	str	r2, [r3, #12]
 8007dce:	e005      	b.n	8007ddc <tcp_process+0x63c>
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ef      	bne.n	8007dbc <tcp_process+0x61c>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	60da      	str	r2, [r3, #12]
 8007de2:	4b43      	ldr	r3, [pc, #268]	@ (8007ef0 <tcp_process+0x750>)
 8007de4:	2201      	movs	r2, #1
 8007de6:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	220a      	movs	r2, #10
 8007dec:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007dee:	4b41      	ldr	r3, [pc, #260]	@ (8007ef4 <tcp_process+0x754>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ef4 <tcp_process+0x754>)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	f002 f908 	bl	800a010 <tcp_timer_needed>
    }
    break;
 8007e00:	e06c      	b.n	8007edc <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8f6 	bl	8007ff4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007e08:	4b3b      	ldr	r3, [pc, #236]	@ (8007ef8 <tcp_process+0x758>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d065      	beq.n	8007ee0 <tcp_process+0x740>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e18:	4b38      	ldr	r3, [pc, #224]	@ (8007efc <tcp_process+0x75c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d15f      	bne.n	8007ee0 <tcp_process+0x740>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d15b      	bne.n	8007ee0 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fe fe1f 	bl	8006a6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007e2e:	4b35      	ldr	r3, [pc, #212]	@ (8007f04 <tcp_process+0x764>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d105      	bne.n	8007e44 <tcp_process+0x6a4>
 8007e38:	4b32      	ldr	r3, [pc, #200]	@ (8007f04 <tcp_process+0x764>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4a31      	ldr	r2, [pc, #196]	@ (8007f04 <tcp_process+0x764>)
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	e013      	b.n	8007e6c <tcp_process+0x6cc>
 8007e44:	4b2f      	ldr	r3, [pc, #188]	@ (8007f04 <tcp_process+0x764>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e00c      	b.n	8007e66 <tcp_process+0x6c6>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d104      	bne.n	8007e60 <tcp_process+0x6c0>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	e005      	b.n	8007e6c <tcp_process+0x6cc>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1ef      	bne.n	8007e4c <tcp_process+0x6ac>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	4b1f      	ldr	r3, [pc, #124]	@ (8007ef0 <tcp_process+0x750>)
 8007e74:	2201      	movs	r2, #1
 8007e76:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef4 <tcp_process+0x754>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60da      	str	r2, [r3, #12]
 8007e86:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef4 <tcp_process+0x754>)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	f002 f8c0 	bl	800a010 <tcp_timer_needed>
    }
    break;
 8007e90:	e026      	b.n	8007ee0 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f8ae 	bl	8007ff4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007e98:	4b17      	ldr	r3, [pc, #92]	@ (8007ef8 <tcp_process+0x758>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01f      	beq.n	8007ee4 <tcp_process+0x744>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ea8:	4b14      	ldr	r3, [pc, #80]	@ (8007efc <tcp_process+0x75c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d119      	bne.n	8007ee4 <tcp_process+0x744>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d115      	bne.n	8007ee4 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007eb8:	4b11      	ldr	r3, [pc, #68]	@ (8007f00 <tcp_process+0x760>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f043 0310 	orr.w	r3, r3, #16
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f00 <tcp_process+0x760>)
 8007ec4:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007ec6:	e00d      	b.n	8007ee4 <tcp_process+0x744>
  default:
    break;
 8007ec8:	bf00      	nop
 8007eca:	e00c      	b.n	8007ee6 <tcp_process+0x746>
    break;
 8007ecc:	bf00      	nop
 8007ece:	e00a      	b.n	8007ee6 <tcp_process+0x746>
    break;
 8007ed0:	bf00      	nop
 8007ed2:	e008      	b.n	8007ee6 <tcp_process+0x746>
    break;
 8007ed4:	bf00      	nop
 8007ed6:	e006      	b.n	8007ee6 <tcp_process+0x746>
    break;
 8007ed8:	bf00      	nop
 8007eda:	e004      	b.n	8007ee6 <tcp_process+0x746>
    break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <tcp_process+0x746>
    break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <tcp_process+0x746>
    break;
 8007ee4:	bf00      	nop
  }
  return ERR_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3720      	adds	r7, #32
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	20006c60 	.word	0x20006c60
 8007ef4:	20006c5c 	.word	0x20006c5c
 8007ef8:	20006c90 	.word	0x20006c90
 8007efc:	20006c88 	.word	0x20006c88
 8007f00:	20006c91 	.word	0x20006c91
 8007f04:	20006c58 	.word	0x20006c58

08007f08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	899b      	ldrh	r3, [r3, #12]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc f9a1 	bl	8004262 <lwip_htons>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d027      	beq.n	8007f7a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007f2a:	6838      	ldr	r0, [r7, #0]
 8007f2c:	f7fe fbf5 	bl	800671a <tcp_segs_free>
    next = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	e055      	b.n	8007fe2 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	899b      	ldrh	r3, [r3, #12]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fc f98f 	bl	8004262 <lwip_htons>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	899b      	ldrh	r3, [r3, #12]
 8007f54:	b29c      	uxth	r4, r3
 8007f56:	2001      	movs	r0, #1
 8007f58:	f7fc f983 	bl	8004262 <lwip_htons>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4322      	orrs	r2, r4
 8007f66:	b292      	uxth	r2, r2
 8007f68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f7fe fbe5 	bl	8006744 <tcp_seg_free>
    while (next &&
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00e      	beq.n	8007f9e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	891b      	ldrh	r3, [r3, #8]
 8007f84:	461a      	mov	r2, r3
 8007f86:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <tcp_oos_insert_segment+0xe8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	8909      	ldrh	r1, [r1, #8]
 8007f96:	440b      	add	r3, r1
 8007f98:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dacb      	bge.n	8007f36 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01e      	beq.n	8007fe2 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	891b      	ldrh	r3, [r3, #8]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4b11      	ldr	r3, [pc, #68]	@ (8007ff0 <tcp_oos_insert_segment+0xe8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	441a      	add	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dd12      	ble.n	8007fe2 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff0 <tcp_oos_insert_segment+0xe8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	891b      	ldrh	r3, [r3, #8]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	f7fd f8dd 	bl	800519c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	601a      	str	r2, [r3, #0]
}
 8007fe8:	bf00      	nop
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd90      	pop	{r4, r7, pc}
 8007ff0:	20006c84 	.word	0x20006c84

08007ff4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff6:	b08d      	sub	sp, #52	@ 0x34
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7d1b      	ldrb	r3, [r3, #20]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d806      	bhi.n	8008016 <tcp_receive+0x22>
 8008008:	4b98      	ldr	r3, [pc, #608]	@ (800826c <tcp_receive+0x278>)
 800800a:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800800e:	4998      	ldr	r1, [pc, #608]	@ (8008270 <tcp_receive+0x27c>)
 8008010:	4898      	ldr	r0, [pc, #608]	@ (8008274 <tcp_receive+0x280>)
 8008012:	f004 ff0f 	bl	800ce34 <iprintf>

  if (flags & TCP_ACK) {
 8008016:	4b98      	ldr	r3, [pc, #608]	@ (8008278 <tcp_receive+0x284>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 82c1 	beq.w	80085a6 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800802a:	461a      	mov	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008030:	4413      	add	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008038:	4b90      	ldr	r3, [pc, #576]	@ (800827c <tcp_receive+0x288>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	db1b      	blt.n	800807a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008046:	4b8d      	ldr	r3, [pc, #564]	@ (800827c <tcp_receive+0x288>)
 8008048:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800804a:	429a      	cmp	r2, r3
 800804c:	d106      	bne.n	800805c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008052:	4b8b      	ldr	r3, [pc, #556]	@ (8008280 <tcp_receive+0x28c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	db0e      	blt.n	800807a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008060:	4b87      	ldr	r3, [pc, #540]	@ (8008280 <tcp_receive+0x28c>)
 8008062:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008064:	429a      	cmp	r2, r3
 8008066:	d141      	bne.n	80080ec <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008068:	4b86      	ldr	r3, [pc, #536]	@ (8008284 <tcp_receive+0x290>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	89db      	ldrh	r3, [r3, #14]
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008076:	429a      	cmp	r2, r3
 8008078:	d938      	bls.n	80080ec <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800807a:	4b82      	ldr	r3, [pc, #520]	@ (8008284 <tcp_receive+0x290>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	89db      	ldrh	r3, [r3, #14]
 8008080:	b29a      	uxth	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008094:	429a      	cmp	r2, r3
 8008096:	d205      	bcs.n	80080a4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 80080a4:	4b75      	ldr	r3, [pc, #468]	@ (800827c <tcp_receive+0x288>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 80080ac:	4b74      	ldr	r3, [pc, #464]	@ (8008280 <tcp_receive+0x28c>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10d      	bne.n	80080da <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d111      	bne.n	80080ec <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80080d8:	e008      	b.n	80080ec <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80080ec:	4b64      	ldr	r3, [pc, #400]	@ (8008280 <tcp_receive+0x28c>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dc53      	bgt.n	80081a2 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80080fa:	4b63      	ldr	r3, [pc, #396]	@ (8008288 <tcp_receive+0x294>)
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d146      	bne.n	8008190 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800810c:	4413      	add	r3, r2
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	429a      	cmp	r2, r3
 8008112:	d13d      	bne.n	8008190 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800811a:	2b00      	cmp	r3, #0
 800811c:	db38      	blt.n	8008190 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008122:	4b57      	ldr	r3, [pc, #348]	@ (8008280 <tcp_receive+0x28c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d132      	bne.n	8008190 <tcp_receive+0x19c>
              found_dupack = 1;
 800812a:	2301      	movs	r3, #1
 800812c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008134:	2bff      	cmp	r3, #255	@ 0xff
 8008136:	d007      	beq.n	8008148 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800813e:	3301      	adds	r3, #1
 8008140:	b2da      	uxtb	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800814e:	2b03      	cmp	r3, #3
 8008150:	d916      	bls.n	8008180 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800815c:	4413      	add	r3, r2
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008166:	429a      	cmp	r2, r3
 8008168:	d912      	bls.n	8008190 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008174:	4413      	add	r3, r2
 8008176:	b29a      	uxth	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800817e:	e007      	b.n	8008190 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008186:	2b03      	cmp	r3, #3
 8008188:	d102      	bne.n	8008190 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fdf4 	bl	8009d78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 816a 	bne.w	800846c <tcp_receive+0x478>
        pcb->dupacks = 0;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081a0:	e164      	b.n	800846c <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80081a2:	4b37      	ldr	r3, [pc, #220]	@ (8008280 <tcp_receive+0x28c>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f2c0 8108 	blt.w	80083c4 <tcp_receive+0x3d0>
 80081b4:	4b32      	ldr	r3, [pc, #200]	@ (8008280 <tcp_receive+0x28c>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f300 8100 	bgt.w	80083c4 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	7e9b      	ldrb	r3, [r3, #26]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00c      	beq.n	80081ea <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7e9b      	ldrb	r3, [r3, #26]
 80081d4:	f023 0304 	bic.w	r3, r3, #4
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80081f8:	10db      	asrs	r3, r3, #3
 80081fa:	b21b      	sxth	r3, r3
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008204:	b29b      	uxth	r3, r3
 8008206:	4413      	add	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	b21a      	sxth	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800821a:	4b19      	ldr	r3, [pc, #100]	@ (8008280 <tcp_receive+0x28c>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7d1b      	ldrb	r3, [r3, #20]
 8008226:	2b03      	cmp	r3, #3
 8008228:	f240 8095 	bls.w	8008356 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008238:	429a      	cmp	r2, r3
 800823a:	d227      	bcs.n	800828c <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008246:	4413      	add	r3, r2
 8008248:	b29a      	uxth	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008250:	429a      	cmp	r2, r3
 8008252:	f240 8080 	bls.w	8008356 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008260:	4413      	add	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800826a:	e074      	b.n	8008356 <tcp_receive+0x362>
 800826c:	0800e8a4 	.word	0x0800e8a4
 8008270:	0800eac8 	.word	0x0800eac8
 8008274:	0800e8e8 	.word	0x0800e8e8
 8008278:	20006c90 	.word	0x20006c90
 800827c:	20006c84 	.word	0x20006c84
 8008280:	20006c88 	.word	0x20006c88
 8008284:	20006c74 	.word	0x20006c74
 8008288:	20006c8e 	.word	0x20006c8e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008296:	4619      	mov	r1, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800829c:	fb01 f303 	mul.w	r3, r1, r3
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 80082a6:	fb93 f3f1 	sdiv	r3, r3, r1
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	4413      	add	r3, r2
 80082ae:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80082b6:	8a7a      	ldrh	r2, [r7, #18]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d94c      	bls.n	8008356 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	8a7a      	ldrh	r2, [r7, #18]
 80082c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80082c4:	e047      	b.n	8008356 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 80082dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd f963 	bl	80055ac <pbuf_clen>
 80082e6:	4603      	mov	r3, r0
 80082e8:	429c      	cmp	r4, r3
 80082ea:	d206      	bcs.n	80082fa <tcp_receive+0x306>
 80082ec:	4b70      	ldr	r3, [pc, #448]	@ (80084b0 <tcp_receive+0x4bc>)
 80082ee:	f240 429e 	movw	r2, #1182	@ 0x49e
 80082f2:	4970      	ldr	r1, [pc, #448]	@ (80084b4 <tcp_receive+0x4c0>)
 80082f4:	4870      	ldr	r0, [pc, #448]	@ (80084b8 <tcp_receive+0x4c4>)
 80082f6:	f004 fd9d 	bl	800ce34 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fd f954 	bl	80055ac <pbuf_clen>
 8008304:	4603      	mov	r3, r0
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8008318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831a:	891a      	ldrh	r2, [r3, #8]
 800831c:	4b67      	ldr	r3, [pc, #412]	@ (80084bc <tcp_receive+0x4c8>)
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	4413      	add	r3, r2
 8008322:	b29a      	uxth	r2, r3
 8008324:	4b65      	ldr	r3, [pc, #404]	@ (80084bc <tcp_receive+0x4c8>)
 8008326:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800832a:	f7fe fa0b 	bl	8006744 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00e      	beq.n	8008356 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <tcp_receive+0x362>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <tcp_receive+0x362>
 8008348:	4b59      	ldr	r3, [pc, #356]	@ (80084b0 <tcp_receive+0x4bc>)
 800834a:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 800834e:	495c      	ldr	r1, [pc, #368]	@ (80084c0 <tcp_receive+0x4cc>)
 8008350:	4859      	ldr	r0, [pc, #356]	@ (80084b8 <tcp_receive+0x4c4>)
 8008352:	f004 fd6f 	bl	800ce34 <iprintf>
      while (pcb->unacked != NULL &&
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d022      	beq.n	80083a4 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	4618      	mov	r0, r3
 8008368:	f7fb ff88 	bl	800427c <lwip_htonl>
 800836c:	4604      	mov	r4, r0
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008372:	891b      	ldrh	r3, [r3, #8]
 8008374:	461d      	mov	r5, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	899b      	ldrh	r3, [r3, #12]
 800837e:	b29b      	uxth	r3, r3
 8008380:	4618      	mov	r0, r3
 8008382:	f7fb ff6e 	bl	8004262 <lwip_htons>
 8008386:	4603      	mov	r3, r0
 8008388:	f003 0303 	and.w	r3, r3, #3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <tcp_receive+0x3a0>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <tcp_receive+0x3a2>
 8008394:	2300      	movs	r3, #0
 8008396:	442b      	add	r3, r5
 8008398:	18e2      	adds	r2, r4, r3
 800839a:	4b4a      	ldr	r3, [pc, #296]	@ (80084c4 <tcp_receive+0x4d0>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dd90      	ble.n	80082c6 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083b2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80083b4:	e002      	b.n	80083bc <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	76da      	strb	r2, [r3, #27]
 80083c2:	e002      	b.n	80083ca <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f8fb 	bl	80095c0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80083ca:	e04f      	b.n	800846c <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 80083f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fd f8d8 	bl	80055ac <pbuf_clen>
 80083fc:	4603      	mov	r3, r0
 80083fe:	429c      	cmp	r4, r3
 8008400:	d206      	bcs.n	8008410 <tcp_receive+0x41c>
 8008402:	4b2b      	ldr	r3, [pc, #172]	@ (80084b0 <tcp_receive+0x4bc>)
 8008404:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008408:	492a      	ldr	r1, [pc, #168]	@ (80084b4 <tcp_receive+0x4c0>)
 800840a:	482b      	ldr	r0, [pc, #172]	@ (80084b8 <tcp_receive+0x4c4>)
 800840c:	f004 fd12 	bl	800ce34 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	4618      	mov	r0, r3
 8008416:	f7fd f8c9 	bl	80055ac <pbuf_clen>
 800841a:	4603      	mov	r3, r0
 800841c:	461a      	mov	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	b29a      	uxth	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 800842e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008430:	891a      	ldrh	r2, [r3, #8]
 8008432:	4b22      	ldr	r3, [pc, #136]	@ (80084bc <tcp_receive+0x4c8>)
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	4413      	add	r3, r2
 8008438:	b29a      	uxth	r2, r3
 800843a:	4b20      	ldr	r3, [pc, #128]	@ (80084bc <tcp_receive+0x4c8>)
 800843c:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800843e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008440:	f7fe f980 	bl	8006744 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00e      	beq.n	800846c <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <tcp_receive+0x478>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <tcp_receive+0x478>
 800845e:	4b14      	ldr	r3, [pc, #80]	@ (80084b0 <tcp_receive+0x4bc>)
 8008460:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8008464:	4916      	ldr	r1, [pc, #88]	@ (80084c0 <tcp_receive+0x4cc>)
 8008466:	4814      	ldr	r0, [pc, #80]	@ (80084b8 <tcp_receive+0x4c4>)
 8008468:	f004 fce4 	bl	800ce34 <iprintf>
    while (pcb->unsent != NULL &&
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008470:	2b00      	cmp	r3, #0
 8008472:	d037      	beq.n	80084e4 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008474:	4b13      	ldr	r3, [pc, #76]	@ (80084c4 <tcp_receive+0x4d0>)
 8008476:	681c      	ldr	r4, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4618      	mov	r0, r3
 8008482:	f7fb fefb 	bl	800427c <lwip_htonl>
 8008486:	4605      	mov	r5, r0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800848c:	891b      	ldrh	r3, [r3, #8]
 800848e:	461e      	mov	r6, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	899b      	ldrh	r3, [r3, #12]
 8008498:	b29b      	uxth	r3, r3
 800849a:	4618      	mov	r0, r3
 800849c:	f7fb fee1 	bl	8004262 <lwip_htons>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00e      	beq.n	80084c8 <tcp_receive+0x4d4>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e00d      	b.n	80084ca <tcp_receive+0x4d6>
 80084ae:	bf00      	nop
 80084b0:	0800e8a4 	.word	0x0800e8a4
 80084b4:	0800eae4 	.word	0x0800eae4
 80084b8:	0800e8e8 	.word	0x0800e8e8
 80084bc:	20006c8c 	.word	0x20006c8c
 80084c0:	0800eb0c 	.word	0x0800eb0c
 80084c4:	20006c88 	.word	0x20006c88
 80084c8:	2300      	movs	r3, #0
 80084ca:	4433      	add	r3, r6
 80084cc:	442b      	add	r3, r5
 80084ce:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db07      	blt.n	80084e4 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80084d4:	4b8d      	ldr	r3, [pc, #564]	@ (800870c <tcp_receive+0x718>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f77f af74 	ble.w	80083cc <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80084ea:	4b89      	ldr	r3, [pc, #548]	@ (8008710 <tcp_receive+0x71c>)
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	4413      	add	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d052      	beq.n	80085a6 <tcp_receive+0x5b2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008504:	4b81      	ldr	r3, [pc, #516]	@ (800870c <tcp_receive+0x718>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	da4b      	bge.n	80085a6 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800850e:	4b81      	ldr	r3, [pc, #516]	@ (8008714 <tcp_receive+0x720>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008518:	b29b      	uxth	r3, r3
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	b29b      	uxth	r3, r3
 800851e:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008520:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008528:	10db      	asrs	r3, r3, #3
 800852a:	b21b      	sxth	r3, r3
 800852c:	b29b      	uxth	r3, r3
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	b29b      	uxth	r3, r3
 8008532:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800853a:	b29a      	uxth	r2, r3
 800853c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800853e:	4413      	add	r3, r2
 8008540:	b29b      	uxth	r3, r3
 8008542:	b21a      	sxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008548:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800854c:	2b00      	cmp	r3, #0
 800854e:	da03      	bge.n	8008558 <tcp_receive+0x564>
        m = -m;
 8008550:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008552:	425b      	negs	r3, r3
 8008554:	b29b      	uxth	r3, r3
 8008556:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8008558:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008560:	109b      	asrs	r3, r3, #2
 8008562:	b21b      	sxth	r3, r3
 8008564:	b29b      	uxth	r3, r3
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	b29b      	uxth	r3, r3
 800856a:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008572:	b29a      	uxth	r2, r3
 8008574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008576:	4413      	add	r3, r2
 8008578:	b29b      	uxth	r3, r3
 800857a:	b21a      	sxth	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008586:	10db      	asrs	r3, r3, #3
 8008588:	b21b      	sxth	r3, r3
 800858a:	b29a      	uxth	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008592:	b29b      	uxth	r3, r3
 8008594:	4413      	add	r3, r2
 8008596:	b29b      	uxth	r3, r3
 8008598:	b21a      	sxth	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80085a6:	4b5c      	ldr	r3, [pc, #368]	@ (8008718 <tcp_receive+0x724>)
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 84f1 	beq.w	8008f92 <tcp_receive+0xf9e>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	7d1b      	ldrb	r3, [r3, #20]
 80085b4:	2b06      	cmp	r3, #6
 80085b6:	f200 84ec 	bhi.w	8008f92 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085be:	4b57      	ldr	r3, [pc, #348]	@ (800871c <tcp_receive+0x728>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	3b01      	subs	r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f2c0 80b8 	blt.w	800873c <tcp_receive+0x748>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085d0:	4b51      	ldr	r3, [pc, #324]	@ (8008718 <tcp_receive+0x724>)
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	4b51      	ldr	r3, [pc, #324]	@ (800871c <tcp_receive+0x728>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	440b      	add	r3, r1
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	3301      	adds	r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f300 80ab 	bgt.w	800873c <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80085e6:	4b4e      	ldr	r3, [pc, #312]	@ (8008720 <tcp_receive+0x72c>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085f0:	4b4a      	ldr	r3, [pc, #296]	@ (800871c <tcp_receive+0x728>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80085f8:	4b49      	ldr	r3, [pc, #292]	@ (8008720 <tcp_receive+0x72c>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d106      	bne.n	800860e <tcp_receive+0x61a>
 8008600:	4b48      	ldr	r3, [pc, #288]	@ (8008724 <tcp_receive+0x730>)
 8008602:	f240 523c 	movw	r2, #1340	@ 0x53c
 8008606:	4948      	ldr	r1, [pc, #288]	@ (8008728 <tcp_receive+0x734>)
 8008608:	4848      	ldr	r0, [pc, #288]	@ (800872c <tcp_receive+0x738>)
 800860a:	f004 fc13 	bl	800ce34 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008614:	4293      	cmp	r3, r2
 8008616:	dd06      	ble.n	8008626 <tcp_receive+0x632>
 8008618:	4b42      	ldr	r3, [pc, #264]	@ (8008724 <tcp_receive+0x730>)
 800861a:	f240 523d 	movw	r2, #1341	@ 0x53d
 800861e:	4944      	ldr	r1, [pc, #272]	@ (8008730 <tcp_receive+0x73c>)
 8008620:	4842      	ldr	r0, [pc, #264]	@ (800872c <tcp_receive+0x738>)
 8008622:	f004 fc07 	bl	800ce34 <iprintf>
      if (inseg.p->len < off) {
 8008626:	4b3e      	ldr	r3, [pc, #248]	@ (8008720 <tcp_receive+0x72c>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	895b      	ldrh	r3, [r3, #10]
 800862c:	461a      	mov	r2, r3
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	4293      	cmp	r3, r2
 8008632:	dd3e      	ble.n	80086b2 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008634:	4b3a      	ldr	r3, [pc, #232]	@ (8008720 <tcp_receive+0x72c>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	891b      	ldrh	r3, [r3, #8]
 800863a:	461a      	mov	r2, r3
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	4293      	cmp	r3, r2
 8008640:	dd06      	ble.n	8008650 <tcp_receive+0x65c>
 8008642:	4b38      	ldr	r3, [pc, #224]	@ (8008724 <tcp_receive+0x730>)
 8008644:	f240 523f 	movw	r2, #1343	@ 0x53f
 8008648:	493a      	ldr	r1, [pc, #232]	@ (8008734 <tcp_receive+0x740>)
 800864a:	4838      	ldr	r0, [pc, #224]	@ (800872c <tcp_receive+0x738>)
 800864c:	f004 fbf2 	bl	800ce34 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008650:	4b33      	ldr	r3, [pc, #204]	@ (8008720 <tcp_receive+0x72c>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	891a      	ldrh	r2, [r3, #8]
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	b29b      	uxth	r3, r3
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800865e:	e00e      	b.n	800867e <tcp_receive+0x68a>
          off -= p->len;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	895b      	ldrh	r3, [r3, #10]
 8008664:	461a      	mov	r2, r3
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	8a3a      	ldrh	r2, [r7, #16]
 8008670:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2200      	movs	r2, #0
 8008676:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	895b      	ldrh	r3, [r3, #10]
 8008682:	461a      	mov	r2, r3
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	4293      	cmp	r3, r2
 8008688:	dcea      	bgt.n	8008660 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	b29b      	uxth	r3, r3
 800868e:	425b      	negs	r3, r3
 8008690:	b29b      	uxth	r3, r3
 8008692:	b21b      	sxth	r3, r3
 8008694:	4619      	mov	r1, r3
 8008696:	69b8      	ldr	r0, [r7, #24]
 8008698:	f7fc fed0 	bl	800543c <pbuf_header>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01c      	beq.n	80086dc <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80086a2:	4b20      	ldr	r3, [pc, #128]	@ (8008724 <tcp_receive+0x730>)
 80086a4:	f240 524c 	movw	r2, #1356	@ 0x54c
 80086a8:	4923      	ldr	r1, [pc, #140]	@ (8008738 <tcp_receive+0x744>)
 80086aa:	4820      	ldr	r0, [pc, #128]	@ (800872c <tcp_receive+0x738>)
 80086ac:	f004 fbc2 	bl	800ce34 <iprintf>
 80086b0:	e014      	b.n	80086dc <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80086b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <tcp_receive+0x72c>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b8:	b292      	uxth	r2, r2
 80086ba:	4252      	negs	r2, r2
 80086bc:	b292      	uxth	r2, r2
 80086be:	b212      	sxth	r2, r2
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fc feba 	bl	800543c <pbuf_header>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d006      	beq.n	80086dc <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80086ce:	4b15      	ldr	r3, [pc, #84]	@ (8008724 <tcp_receive+0x730>)
 80086d0:	f240 5251 	movw	r2, #1361	@ 0x551
 80086d4:	4918      	ldr	r1, [pc, #96]	@ (8008738 <tcp_receive+0x744>)
 80086d6:	4815      	ldr	r0, [pc, #84]	@ (800872c <tcp_receive+0x738>)
 80086d8:	f004 fbac 	bl	800ce34 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80086dc:	4b10      	ldr	r3, [pc, #64]	@ (8008720 <tcp_receive+0x72c>)
 80086de:	891a      	ldrh	r2, [r3, #8]
 80086e0:	4b0e      	ldr	r3, [pc, #56]	@ (800871c <tcp_receive+0x728>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	b299      	uxth	r1, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	1acb      	subs	r3, r1, r3
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	4413      	add	r3, r2
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008720 <tcp_receive+0x72c>)
 80086f6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fc:	4a07      	ldr	r2, [pc, #28]	@ (800871c <tcp_receive+0x728>)
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <tcp_receive+0x72c>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	4a05      	ldr	r2, [pc, #20]	@ (800871c <tcp_receive+0x728>)
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800870a:	e025      	b.n	8008758 <tcp_receive+0x764>
 800870c:	20006c88 	.word	0x20006c88
 8008710:	20006c8c 	.word	0x20006c8c
 8008714:	20006c4c 	.word	0x20006c4c
 8008718:	20006c8e 	.word	0x20006c8e
 800871c:	20006c84 	.word	0x20006c84
 8008720:	20006c64 	.word	0x20006c64
 8008724:	0800e8a4 	.word	0x0800e8a4
 8008728:	0800eb2c 	.word	0x0800eb2c
 800872c:	0800e8e8 	.word	0x0800e8e8
 8008730:	0800eb3c 	.word	0x0800eb3c
 8008734:	0800eb4c 	.word	0x0800eb4c
 8008738:	0800eb5c 	.word	0x0800eb5c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800873c:	4b87      	ldr	r3, [pc, #540]	@ (800895c <tcp_receive+0x968>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	da06      	bge.n	8008758 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7e9b      	ldrb	r3, [r3, #26]
 800874e:	f043 0302 	orr.w	r3, r3, #2
 8008752:	b2da      	uxtb	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008758:	4b80      	ldr	r3, [pc, #512]	@ (800895c <tcp_receive+0x968>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	f2c0 8410 	blt.w	8008f88 <tcp_receive+0xf94>
 8008768:	4b7c      	ldr	r3, [pc, #496]	@ (800895c <tcp_receive+0x968>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008774:	440b      	add	r3, r1
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	3301      	adds	r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	f300 8404 	bgt.w	8008f88 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008784:	4b75      	ldr	r3, [pc, #468]	@ (800895c <tcp_receive+0x968>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	f040 8287 	bne.w	8008c9c <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800878e:	4b74      	ldr	r3, [pc, #464]	@ (8008960 <tcp_receive+0x96c>)
 8008790:	891c      	ldrh	r4, [r3, #8]
 8008792:	4b73      	ldr	r3, [pc, #460]	@ (8008960 <tcp_receive+0x96c>)
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	899b      	ldrh	r3, [r3, #12]
 8008798:	b29b      	uxth	r3, r3
 800879a:	4618      	mov	r0, r3
 800879c:	f7fb fd61 	bl	8004262 <lwip_htons>
 80087a0:	4603      	mov	r3, r0
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <tcp_receive+0x7ba>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <tcp_receive+0x7bc>
 80087ae:	2300      	movs	r3, #0
 80087b0:	4423      	add	r3, r4
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	4b6b      	ldr	r3, [pc, #428]	@ (8008964 <tcp_receive+0x970>)
 80087b6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80087bc:	4b69      	ldr	r3, [pc, #420]	@ (8008964 <tcp_receive+0x970>)
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d26e      	bcs.n	80088a2 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80087c4:	4b66      	ldr	r3, [pc, #408]	@ (8008960 <tcp_receive+0x96c>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	899b      	ldrh	r3, [r3, #12]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fb fd48 	bl	8004262 <lwip_htons>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01b      	beq.n	8008814 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80087dc:	4b60      	ldr	r3, [pc, #384]	@ (8008960 <tcp_receive+0x96c>)
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	899b      	ldrh	r3, [r3, #12]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087e8:	b29c      	uxth	r4, r3
 80087ea:	4b5d      	ldr	r3, [pc, #372]	@ (8008960 <tcp_receive+0x96c>)
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	899b      	ldrh	r3, [r3, #12]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fb fd35 	bl	8004262 <lwip_htons>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4618      	mov	r0, r3
 8008802:	f7fb fd2e 	bl	8004262 <lwip_htons>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	4b55      	ldr	r3, [pc, #340]	@ (8008960 <tcp_receive+0x96c>)
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	4322      	orrs	r2, r4
 8008810:	b292      	uxth	r2, r2
 8008812:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008818:	4b51      	ldr	r3, [pc, #324]	@ (8008960 <tcp_receive+0x96c>)
 800881a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800881c:	4b50      	ldr	r3, [pc, #320]	@ (8008960 <tcp_receive+0x96c>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	899b      	ldrh	r3, [r3, #12]
 8008822:	b29b      	uxth	r3, r3
 8008824:	4618      	mov	r0, r3
 8008826:	f7fb fd1c 	bl	8004262 <lwip_htons>
 800882a:	4603      	mov	r3, r0
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <tcp_receive+0x84c>
            inseg.len -= 1;
 8008834:	4b4a      	ldr	r3, [pc, #296]	@ (8008960 <tcp_receive+0x96c>)
 8008836:	891b      	ldrh	r3, [r3, #8]
 8008838:	3b01      	subs	r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	4b48      	ldr	r3, [pc, #288]	@ (8008960 <tcp_receive+0x96c>)
 800883e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008840:	4b47      	ldr	r3, [pc, #284]	@ (8008960 <tcp_receive+0x96c>)
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	4a46      	ldr	r2, [pc, #280]	@ (8008960 <tcp_receive+0x96c>)
 8008846:	8912      	ldrh	r2, [r2, #8]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fc fca6 	bl	800519c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008850:	4b43      	ldr	r3, [pc, #268]	@ (8008960 <tcp_receive+0x96c>)
 8008852:	891c      	ldrh	r4, [r3, #8]
 8008854:	4b42      	ldr	r3, [pc, #264]	@ (8008960 <tcp_receive+0x96c>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	899b      	ldrh	r3, [r3, #12]
 800885a:	b29b      	uxth	r3, r3
 800885c:	4618      	mov	r0, r3
 800885e:	f7fb fd00 	bl	8004262 <lwip_htons>
 8008862:	4603      	mov	r3, r0
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <tcp_receive+0x87c>
 800886c:	2301      	movs	r3, #1
 800886e:	e000      	b.n	8008872 <tcp_receive+0x87e>
 8008870:	2300      	movs	r3, #0
 8008872:	4423      	add	r3, r4
 8008874:	b29a      	uxth	r2, r3
 8008876:	4b3b      	ldr	r3, [pc, #236]	@ (8008964 <tcp_receive+0x970>)
 8008878:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800887a:	4b3a      	ldr	r3, [pc, #232]	@ (8008964 <tcp_receive+0x970>)
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	4b36      	ldr	r3, [pc, #216]	@ (800895c <tcp_receive+0x968>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800888e:	440b      	add	r3, r1
 8008890:	429a      	cmp	r2, r3
 8008892:	d006      	beq.n	80088a2 <tcp_receive+0x8ae>
 8008894:	4b34      	ldr	r3, [pc, #208]	@ (8008968 <tcp_receive+0x974>)
 8008896:	f240 527e 	movw	r2, #1406	@ 0x57e
 800889a:	4934      	ldr	r1, [pc, #208]	@ (800896c <tcp_receive+0x978>)
 800889c:	4834      	ldr	r0, [pc, #208]	@ (8008970 <tcp_receive+0x97c>)
 800889e:	f004 fac9 	bl	800ce34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 80e1 	beq.w	8008a6e <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088ac:	4b2c      	ldr	r3, [pc, #176]	@ (8008960 <tcp_receive+0x96c>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	899b      	ldrh	r3, [r3, #12]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fb fcd4 	bl	8004262 <lwip_htons>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d010      	beq.n	80088e6 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80088c4:	e00a      	b.n	80088dc <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ca:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 80088d6:	68b8      	ldr	r0, [r7, #8]
 80088d8:	f7fd ff34 	bl	8006744 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1f0      	bne.n	80088c6 <tcp_receive+0x8d2>
 80088e4:	e0c3      	b.n	8008a6e <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80088ec:	e04f      	b.n	800898e <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	899b      	ldrh	r3, [r3, #12]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fb fcb3 	bl	8004262 <lwip_htons>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d03b      	beq.n	800897e <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008906:	4b16      	ldr	r3, [pc, #88]	@ (8008960 <tcp_receive+0x96c>)
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	899b      	ldrh	r3, [r3, #12]
 800890c:	b29b      	uxth	r3, r3
 800890e:	4618      	mov	r0, r3
 8008910:	f7fb fca7 	bl	8004262 <lwip_htons>
 8008914:	4603      	mov	r3, r0
 8008916:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800891a:	2b00      	cmp	r3, #0
 800891c:	d12f      	bne.n	800897e <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800891e:	4b10      	ldr	r3, [pc, #64]	@ (8008960 <tcp_receive+0x96c>)
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	899b      	ldrh	r3, [r3, #12]
 8008924:	b29c      	uxth	r4, r3
 8008926:	2001      	movs	r0, #1
 8008928:	f7fb fc9b 	bl	8004262 <lwip_htons>
 800892c:	4603      	mov	r3, r0
 800892e:	461a      	mov	r2, r3
 8008930:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <tcp_receive+0x96c>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	4322      	orrs	r2, r4
 8008936:	b292      	uxth	r2, r2
 8008938:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800893a:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <tcp_receive+0x96c>)
 800893c:	891c      	ldrh	r4, [r3, #8]
 800893e:	4b08      	ldr	r3, [pc, #32]	@ (8008960 <tcp_receive+0x96c>)
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	899b      	ldrh	r3, [r3, #12]
 8008944:	b29b      	uxth	r3, r3
 8008946:	4618      	mov	r0, r3
 8008948:	f7fb fc8b 	bl	8004262 <lwip_htons>
 800894c:	4603      	mov	r3, r0
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00e      	beq.n	8008974 <tcp_receive+0x980>
 8008956:	2301      	movs	r3, #1
 8008958:	e00d      	b.n	8008976 <tcp_receive+0x982>
 800895a:	bf00      	nop
 800895c:	20006c84 	.word	0x20006c84
 8008960:	20006c64 	.word	0x20006c64
 8008964:	20006c8e 	.word	0x20006c8e
 8008968:	0800e8a4 	.word	0x0800e8a4
 800896c:	0800eb70 	.word	0x0800eb70
 8008970:	0800e8e8 	.word	0x0800e8e8
 8008974:	2300      	movs	r3, #0
 8008976:	4423      	add	r3, r4
 8008978:	b29a      	uxth	r2, r3
 800897a:	4b95      	ldr	r3, [pc, #596]	@ (8008bd0 <tcp_receive+0xbdc>)
 800897c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800897e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008980:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8008988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800898a:	f7fd fedb 	bl	8006744 <tcp_seg_free>
            while (next &&
 800898e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00e      	beq.n	80089b2 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008994:	4b8e      	ldr	r3, [pc, #568]	@ (8008bd0 <tcp_receive+0xbdc>)
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	4b8e      	ldr	r3, [pc, #568]	@ (8008bd4 <tcp_receive+0xbe0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	441a      	add	r2, r3
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089a8:	8909      	ldrh	r1, [r1, #8]
 80089aa:	440b      	add	r3, r1
 80089ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	da9d      	bge.n	80088ee <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80089b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d057      	beq.n	8008a68 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 80089b8:	4b85      	ldr	r3, [pc, #532]	@ (8008bd0 <tcp_receive+0xbdc>)
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	461a      	mov	r2, r3
 80089be:	4b85      	ldr	r3, [pc, #532]	@ (8008bd4 <tcp_receive+0xbe0>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	441a      	add	r2, r3
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dd4b      	ble.n	8008a68 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	4b7e      	ldr	r3, [pc, #504]	@ (8008bd4 <tcp_receive+0xbe0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	4b7d      	ldr	r3, [pc, #500]	@ (8008bd8 <tcp_receive+0xbe4>)
 80089e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80089e6:	4b7c      	ldr	r3, [pc, #496]	@ (8008bd8 <tcp_receive+0xbe4>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	899b      	ldrh	r3, [r3, #12]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fb fc37 	bl	8004262 <lwip_htons>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <tcp_receive+0xa16>
                inseg.len -= 1;
 80089fe:	4b76      	ldr	r3, [pc, #472]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008a00:	891b      	ldrh	r3, [r3, #8]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	4b74      	ldr	r3, [pc, #464]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008a08:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008a0a:	4b73      	ldr	r3, [pc, #460]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	4a72      	ldr	r2, [pc, #456]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008a10:	8912      	ldrh	r2, [r2, #8]
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fc fbc1 	bl	800519c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008a1c:	891c      	ldrh	r4, [r3, #8]
 8008a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	899b      	ldrh	r3, [r3, #12]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fb fc1b 	bl	8004262 <lwip_htons>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <tcp_receive+0xa46>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <tcp_receive+0xa48>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4423      	add	r3, r4
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	4b63      	ldr	r3, [pc, #396]	@ (8008bd0 <tcp_receive+0xbdc>)
 8008a42:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008a44:	4b62      	ldr	r3, [pc, #392]	@ (8008bd0 <tcp_receive+0xbdc>)
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4b62      	ldr	r3, [pc, #392]	@ (8008bd4 <tcp_receive+0xbe0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	441a      	add	r2, r3
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d006      	beq.n	8008a68 <tcp_receive+0xa74>
 8008a5a:	4b60      	ldr	r3, [pc, #384]	@ (8008bdc <tcp_receive+0xbe8>)
 8008a5c:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8008a60:	495f      	ldr	r1, [pc, #380]	@ (8008be0 <tcp_receive+0xbec>)
 8008a62:	4860      	ldr	r0, [pc, #384]	@ (8008be4 <tcp_receive+0xbf0>)
 8008a64:	f004 f9e6 	bl	800ce34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a6c:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008a6e:	4b58      	ldr	r3, [pc, #352]	@ (8008bd0 <tcp_receive+0xbdc>)
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	4b57      	ldr	r3, [pc, #348]	@ (8008bd4 <tcp_receive+0xbe0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	441a      	add	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008a82:	4b53      	ldr	r3, [pc, #332]	@ (8008bd0 <tcp_receive+0xbdc>)
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d206      	bcs.n	8008a98 <tcp_receive+0xaa4>
 8008a8a:	4b54      	ldr	r3, [pc, #336]	@ (8008bdc <tcp_receive+0xbe8>)
 8008a8c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8008a90:	4955      	ldr	r1, [pc, #340]	@ (8008be8 <tcp_receive+0xbf4>)
 8008a92:	4854      	ldr	r0, [pc, #336]	@ (8008be4 <tcp_receive+0xbf0>)
 8008a94:	f004 f9ce 	bl	800ce34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8008bd0 <tcp_receive+0xbdc>)
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fd f9fd 	bl	8005ea8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008aae:	4b4a      	ldr	r3, [pc, #296]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	891b      	ldrh	r3, [r3, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d006      	beq.n	8008ac6 <tcp_receive+0xad2>
          recv_data = inseg.p;
 8008ab8:	4b47      	ldr	r3, [pc, #284]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4a4b      	ldr	r2, [pc, #300]	@ (8008bec <tcp_receive+0xbf8>)
 8008abe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008ac0:	4b45      	ldr	r3, [pc, #276]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ac6:	4b44      	ldr	r3, [pc, #272]	@ (8008bd8 <tcp_receive+0xbe4>)
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	899b      	ldrh	r3, [r3, #12]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fb fbc7 	bl	8004262 <lwip_htons>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80b4 	beq.w	8008c48 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008ae0:	4b43      	ldr	r3, [pc, #268]	@ (8008bf0 <tcp_receive+0xbfc>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	f043 0320 	orr.w	r3, r3, #32
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b41      	ldr	r3, [pc, #260]	@ (8008bf0 <tcp_receive+0xbfc>)
 8008aec:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008aee:	e0ab      	b.n	8008c48 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af4:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	4a35      	ldr	r2, [pc, #212]	@ (8008bd4 <tcp_receive+0xbe0>)
 8008b00:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	891b      	ldrh	r3, [r3, #8]
 8008b06:	461c      	mov	r4, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	899b      	ldrh	r3, [r3, #12]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fb fba6 	bl	8004262 <lwip_htons>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f003 0303 	and.w	r3, r3, #3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <tcp_receive+0xb30>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e000      	b.n	8008b26 <tcp_receive+0xb32>
 8008b24:	2300      	movs	r3, #0
 8008b26:	191a      	adds	r2, r3, r4
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2c:	441a      	add	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b36:	461c      	mov	r4, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	891b      	ldrh	r3, [r3, #8]
 8008b3c:	461d      	mov	r5, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	899b      	ldrh	r3, [r3, #12]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fb fb8b 	bl	8004262 <lwip_htons>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <tcp_receive+0xb66>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <tcp_receive+0xb68>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	442b      	add	r3, r5
 8008b5e:	429c      	cmp	r4, r3
 8008b60:	d206      	bcs.n	8008b70 <tcp_receive+0xb7c>
 8008b62:	4b1e      	ldr	r3, [pc, #120]	@ (8008bdc <tcp_receive+0xbe8>)
 8008b64:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8008b68:	4922      	ldr	r1, [pc, #136]	@ (8008bf4 <tcp_receive+0xc00>)
 8008b6a:	481e      	ldr	r0, [pc, #120]	@ (8008be4 <tcp_receive+0xbf0>)
 8008b6c:	f004 f962 	bl	800ce34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	891b      	ldrh	r3, [r3, #8]
 8008b74:	461c      	mov	r4, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	899b      	ldrh	r3, [r3, #12]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fb fb6f 	bl	8004262 <lwip_htons>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f003 0303 	and.w	r3, r3, #3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <tcp_receive+0xb9e>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <tcp_receive+0xba0>
 8008b92:	2300      	movs	r3, #0
 8008b94:	1919      	adds	r1, r3, r4
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008b9a:	b28b      	uxth	r3, r1
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7fd f97f 	bl	8005ea8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	891b      	ldrh	r3, [r3, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d028      	beq.n	8008c06 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008bec <tcp_receive+0xbf8>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01d      	beq.n	8008bf8 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008bec <tcp_receive+0xbf8>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fc fd28 	bl	800561c <pbuf_cat>
 8008bcc:	e018      	b.n	8008c00 <tcp_receive+0xc0c>
 8008bce:	bf00      	nop
 8008bd0:	20006c8e 	.word	0x20006c8e
 8008bd4:	20006c84 	.word	0x20006c84
 8008bd8:	20006c64 	.word	0x20006c64
 8008bdc:	0800e8a4 	.word	0x0800e8a4
 8008be0:	0800eba8 	.word	0x0800eba8
 8008be4:	0800e8e8 	.word	0x0800e8e8
 8008be8:	0800ebe4 	.word	0x0800ebe4
 8008bec:	20006c94 	.word	0x20006c94
 8008bf0:	20006c91 	.word	0x20006c91
 8008bf4:	0800ec04 	.word	0x0800ec04
            } else {
              recv_data = cseg->p;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a71      	ldr	r2, [pc, #452]	@ (8008dc4 <tcp_receive+0xdd0>)
 8008bfe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	899b      	ldrh	r3, [r3, #12]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fb fb27 	bl	8004262 <lwip_htons>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00d      	beq.n	8008c3a <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8008dc8 <tcp_receive+0xdd4>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f043 0320 	orr.w	r3, r3, #32
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	4b67      	ldr	r3, [pc, #412]	@ (8008dc8 <tcp_receive+0xdd4>)
 8008c2a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7d1b      	ldrb	r3, [r3, #20]
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d102      	bne.n	8008c3a <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2207      	movs	r2, #7
 8008c38:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7fd fd7e 	bl	8006744 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d008      	beq.n	8008c62 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	f43f af47 	beq.w	8008af0 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7e9b      	ldrb	r3, [r3, #26]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <tcp_receive+0xc98>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	7e9b      	ldrb	r3, [r3, #26]
 8008c72:	f023 0301 	bic.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	769a      	strb	r2, [r3, #26]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7e9b      	ldrb	r3, [r3, #26]
 8008c80:	f043 0302 	orr.w	r3, r3, #2
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c8a:	e181      	b.n	8008f90 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	7e9b      	ldrb	r3, [r3, #26]
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c9a:	e179      	b.n	8008f90 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fc8f 	bl	80095c0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d106      	bne.n	8008cb8 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008caa:	4848      	ldr	r0, [pc, #288]	@ (8008dcc <tcp_receive+0xdd8>)
 8008cac:	f7fd fd62 	bl	8006774 <tcp_seg_copy>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 8008cb6:	e16b      	b.n	8008f90 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cc2:	e150      	b.n	8008f66 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8008cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	4b41      	ldr	r3, [pc, #260]	@ (8008dd0 <tcp_receive+0xddc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d11d      	bne.n	8008d0e <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8008dcc <tcp_receive+0xdd8>)
 8008cd4:	891a      	ldrh	r2, [r3, #8]
 8008cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd8:	891b      	ldrh	r3, [r3, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	f240 8148 	bls.w	8008f70 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008ce0:	483a      	ldr	r0, [pc, #232]	@ (8008dcc <tcp_receive+0xdd8>)
 8008ce2:	f7fd fd47 	bl	8006774 <tcp_seg_copy>
 8008ce6:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8142 	beq.w	8008f74 <tcp_receive+0xf80>
                  if (prev != NULL) {
 8008cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <tcp_receive+0xd0a>
                    prev->next = cseg;
 8008cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e002      	b.n	8008d04 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7ff f8fe 	bl	8007f08 <tcp_oos_insert_segment>
                }
                break;
 8008d0c:	e132      	b.n	8008f74 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d117      	bne.n	8008d44 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008d14:	4b2e      	ldr	r3, [pc, #184]	@ (8008dd0 <tcp_receive+0xddc>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	da57      	bge.n	8008dd4 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8008d24:	4829      	ldr	r0, [pc, #164]	@ (8008dcc <tcp_receive+0xdd8>)
 8008d26:	f7fd fd25 	bl	8006774 <tcp_seg_copy>
 8008d2a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 8122 	beq.w	8008f78 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8008d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff f8e3 	bl	8007f08 <tcp_oos_insert_segment>
                  }
                  break;
 8008d42:	e119      	b.n	8008f78 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008d44:	4b22      	ldr	r3, [pc, #136]	@ (8008dd0 <tcp_receive+0xddc>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	db3e      	blt.n	8008dd4 <tcp_receive+0xde0>
 8008d56:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd0 <tcp_receive+0xddc>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	3301      	adds	r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dc35      	bgt.n	8008dd4 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8008d68:	4818      	ldr	r0, [pc, #96]	@ (8008dcc <tcp_receive+0xdd8>)
 8008d6a:	f7fd fd03 	bl	8006774 <tcp_seg_copy>
 8008d6e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 8102 	beq.w	8008f7c <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d80:	8912      	ldrh	r2, [r2, #8]
 8008d82:	441a      	add	r2, r3
 8008d84:	4b12      	ldr	r3, [pc, #72]	@ (8008dd0 <tcp_receive+0xddc>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	dd12      	ble.n	8008db4 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008d8e:	4b10      	ldr	r3, [pc, #64]	@ (8008dd0 <tcp_receive+0xddc>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	891b      	ldrh	r3, [r3, #8]
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fc f9f4 	bl	800519c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff f8a3 	bl	8007f08 <tcp_oos_insert_segment>
                  }
                  break;
 8008dc2:	e0db      	b.n	8008f7c <tcp_receive+0xf88>
 8008dc4:	20006c94 	.word	0x20006c94
 8008dc8:	20006c91 	.word	0x20006c91
 8008dcc:	20006c64 	.word	0x20006c64
 8008dd0:	20006c84 	.word	0x20006c84
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f040 80bf 	bne.w	8008f5c <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008dde:	4b7c      	ldr	r3, [pc, #496]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f340 80b6 	ble.w	8008f5c <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	899b      	ldrh	r3, [r3, #12]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fb fa32 	bl	8004262 <lwip_htons>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f040 80bb 	bne.w	8008f80 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008e0a:	4872      	ldr	r0, [pc, #456]	@ (8008fd4 <tcp_receive+0xfe0>)
 8008e0c:	f7fd fcb2 	bl	8006774 <tcp_seg_copy>
 8008e10:	4602      	mov	r2, r0
 8008e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e14:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80b2 	beq.w	8008f84 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e28:	8912      	ldrh	r2, [r2, #8]
 8008e2a:	441a      	add	r2, r3
 8008e2c:	4b68      	ldr	r3, [pc, #416]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd12      	ble.n	8008e5c <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008e36:	4b66      	ldr	r3, [pc, #408]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e52:	891b      	ldrh	r3, [r3, #8]
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fc f9a0 	bl	800519c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8008fd8 <tcp_receive+0xfe4>)
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	461a      	mov	r2, r3
 8008e62:	4b5b      	ldr	r3, [pc, #364]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	441a      	add	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008e70:	440b      	add	r3, r1
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f340 8085 	ble.w	8008f84 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	899b      	ldrh	r3, [r3, #12]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fb f9ec 	bl	8004262 <lwip_htons>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01e      	beq.n	8008ed2 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	899b      	ldrh	r3, [r3, #12]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ea2:	b29c      	uxth	r4, r3
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	899b      	ldrh	r3, [r3, #12]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fb f9d7 	bl	8004262 <lwip_htons>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fb f9d0 	bl	8004262 <lwip_htons>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	4322      	orrs	r2, r4
 8008ece:	b292      	uxth	r2, r2
 8008ed0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008edc:	4413      	add	r3, r2
 8008ede:	b299      	uxth	r1, r3
 8008ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	1a8a      	subs	r2, r1, r2
 8008eec:	b292      	uxth	r2, r2
 8008eee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	891b      	ldrh	r3, [r3, #8]
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7fc f94c 	bl	800519c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	891c      	ldrh	r4, [r3, #8]
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	899b      	ldrh	r3, [r3, #12]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fb f9a4 	bl	8004262 <lwip_htons>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <tcp_receive+0xf34>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <tcp_receive+0xf36>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4423      	add	r3, r4
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd8 <tcp_receive+0xfe4>)
 8008f30:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008f32:	4b29      	ldr	r3, [pc, #164]	@ (8008fd8 <tcp_receive+0xfe4>)
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	4b25      	ldr	r3, [pc, #148]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	441a      	add	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f46:	440b      	add	r3, r1
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d01b      	beq.n	8008f84 <tcp_receive+0xf90>
 8008f4c:	4b23      	ldr	r3, [pc, #140]	@ (8008fdc <tcp_receive+0xfe8>)
 8008f4e:	f240 627a 	movw	r2, #1658	@ 0x67a
 8008f52:	4923      	ldr	r1, [pc, #140]	@ (8008fe0 <tcp_receive+0xfec>)
 8008f54:	4823      	ldr	r0, [pc, #140]	@ (8008fe4 <tcp_receive+0xff0>)
 8008f56:	f003 ff6d 	bl	800ce34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008f5a:	e013      	b.n	8008f84 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8008f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f47f aeab 	bne.w	8008cc4 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8008f6e:	e00f      	b.n	8008f90 <tcp_receive+0xf9c>
                break;
 8008f70:	bf00      	nop
 8008f72:	e00d      	b.n	8008f90 <tcp_receive+0xf9c>
                break;
 8008f74:	bf00      	nop
 8008f76:	e00b      	b.n	8008f90 <tcp_receive+0xf9c>
                  break;
 8008f78:	bf00      	nop
 8008f7a:	e009      	b.n	8008f90 <tcp_receive+0xf9c>
                  break;
 8008f7c:	bf00      	nop
 8008f7e:	e007      	b.n	8008f90 <tcp_receive+0xf9c>
                  break;
 8008f80:	bf00      	nop
 8008f82:	e005      	b.n	8008f90 <tcp_receive+0xf9c>
                break;
 8008f84:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8008f86:	e003      	b.n	8008f90 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fb19 	bl	80095c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f8e:	e01a      	b.n	8008fc6 <tcp_receive+0xfd2>
 8008f90:	e019      	b.n	8008fc6 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008f92:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	db0a      	blt.n	8008fb6 <tcp_receive+0xfc2>
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd0 <tcp_receive+0xfdc>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008fac:	440b      	add	r3, r1
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd07      	ble.n	8008fc6 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7e9b      	ldrb	r3, [r3, #26]
 8008fba:	f043 0302 	orr.w	r3, r3, #2
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008fc4:	e7ff      	b.n	8008fc6 <tcp_receive+0xfd2>
 8008fc6:	bf00      	nop
 8008fc8:	3734      	adds	r7, #52	@ 0x34
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20006c84 	.word	0x20006c84
 8008fd4:	20006c64 	.word	0x20006c64
 8008fd8:	20006c8e 	.word	0x20006c8e
 8008fdc:	0800e8a4 	.word	0x0800e8a4
 8008fe0:	0800eb70 	.word	0x0800eb70
 8008fe4:	0800e8e8 	.word	0x0800e8e8

08008fe8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008fee:	4b17      	ldr	r3, [pc, #92]	@ (800904c <tcp_getoptbyte+0x64>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <tcp_getoptbyte+0x1a>
 8008ff6:	4b16      	ldr	r3, [pc, #88]	@ (8009050 <tcp_getoptbyte+0x68>)
 8008ff8:	881a      	ldrh	r2, [r3, #0]
 8008ffa:	4b16      	ldr	r3, [pc, #88]	@ (8009054 <tcp_getoptbyte+0x6c>)
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d20e      	bcs.n	8009020 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8009002:	4b15      	ldr	r3, [pc, #84]	@ (8009058 <tcp_getoptbyte+0x70>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3314      	adds	r3, #20
 8009008:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800900a:	4b11      	ldr	r3, [pc, #68]	@ (8009050 <tcp_getoptbyte+0x68>)
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	b291      	uxth	r1, r2
 8009012:	4a0f      	ldr	r2, [pc, #60]	@ (8009050 <tcp_getoptbyte+0x68>)
 8009014:	8011      	strh	r1, [r2, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	4413      	add	r3, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	e010      	b.n	8009042 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009020:	4b0b      	ldr	r3, [pc, #44]	@ (8009050 <tcp_getoptbyte+0x68>)
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	b291      	uxth	r1, r2
 8009028:	4a09      	ldr	r2, [pc, #36]	@ (8009050 <tcp_getoptbyte+0x68>)
 800902a:	8011      	strh	r1, [r2, #0]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	4b09      	ldr	r3, [pc, #36]	@ (8009054 <tcp_getoptbyte+0x6c>)
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8009038:	4b04      	ldr	r3, [pc, #16]	@ (800904c <tcp_getoptbyte+0x64>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	4413      	add	r3, r2
 8009040:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr
 800904c:	20006c7c 	.word	0x20006c7c
 8009050:	20006c80 	.word	0x20006c80
 8009054:	20006c7a 	.word	0x20006c7a
 8009058:	20006c74 	.word	0x20006c74

0800905c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009064:	4b2e      	ldr	r3, [pc, #184]	@ (8009120 <tcp_parseopt+0xc4>)
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d056      	beq.n	800911a <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800906c:	4b2d      	ldr	r3, [pc, #180]	@ (8009124 <tcp_parseopt+0xc8>)
 800906e:	2200      	movs	r2, #0
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	e046      	b.n	8009102 <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 8009074:	f7ff ffb8 	bl	8008fe8 <tcp_getoptbyte>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d006      	beq.n	8009090 <tcp_parseopt+0x34>
 8009082:	2b02      	cmp	r3, #2
 8009084:	dc2a      	bgt.n	80090dc <tcp_parseopt+0x80>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d042      	beq.n	8009110 <tcp_parseopt+0xb4>
 800908a:	2b01      	cmp	r3, #1
 800908c:	d038      	beq.n	8009100 <tcp_parseopt+0xa4>
 800908e:	e025      	b.n	80090dc <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009090:	f7ff ffaa 	bl	8008fe8 <tcp_getoptbyte>
 8009094:	4603      	mov	r3, r0
 8009096:	2b04      	cmp	r3, #4
 8009098:	d13c      	bne.n	8009114 <tcp_parseopt+0xb8>
 800909a:	4b22      	ldr	r3, [pc, #136]	@ (8009124 <tcp_parseopt+0xc8>)
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009120 <tcp_parseopt+0xc4>)
 80090a2:	8812      	ldrh	r2, [r2, #0]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	da35      	bge.n	8009114 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80090a8:	f7ff ff9e 	bl	8008fe8 <tcp_getoptbyte>
 80090ac:	4603      	mov	r3, r0
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80090b2:	f7ff ff99 	bl	8008fe8 <tcp_getoptbyte>
 80090b6:	4603      	mov	r3, r0
 80090b8:	461a      	mov	r2, r3
 80090ba:	89bb      	ldrh	r3, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80090c0:	89bb      	ldrh	r3, [r7, #12]
 80090c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80090c6:	d804      	bhi.n	80090d2 <tcp_parseopt+0x76>
 80090c8:	89bb      	ldrh	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <tcp_parseopt+0x76>
 80090ce:	89ba      	ldrh	r2, [r7, #12]
 80090d0:	e001      	b.n	80090d6 <tcp_parseopt+0x7a>
 80090d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 80090da:	e012      	b.n	8009102 <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80090dc:	f7ff ff84 	bl	8008fe8 <tcp_getoptbyte>
 80090e0:	4603      	mov	r3, r0
 80090e2:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d916      	bls.n	8009118 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <tcp_parseopt+0xc8>)
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	4413      	add	r3, r2
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	3b02      	subs	r3, #2
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009124 <tcp_parseopt+0xc8>)
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	e000      	b.n	8009102 <tcp_parseopt+0xa6>
        break;
 8009100:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009102:	4b08      	ldr	r3, [pc, #32]	@ (8009124 <tcp_parseopt+0xc8>)
 8009104:	881a      	ldrh	r2, [r3, #0]
 8009106:	4b06      	ldr	r3, [pc, #24]	@ (8009120 <tcp_parseopt+0xc4>)
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d3b2      	bcc.n	8009074 <tcp_parseopt+0x18>
 800910e:	e004      	b.n	800911a <tcp_parseopt+0xbe>
        return;
 8009110:	bf00      	nop
 8009112:	e002      	b.n	800911a <tcp_parseopt+0xbe>
          return;
 8009114:	bf00      	nop
 8009116:	e000      	b.n	800911a <tcp_parseopt+0xbe>
          return;
 8009118:	bf00      	nop
      }
    }
  }
}
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20006c78 	.word	0x20006c78
 8009124:	20006c80 	.word	0x20006c80

08009128 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800912c:	4b05      	ldr	r3, [pc, #20]	@ (8009144 <tcp_trigger_input_pcb_close+0x1c>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f043 0310 	orr.w	r3, r3, #16
 8009134:	b2da      	uxtb	r2, r3
 8009136:	4b03      	ldr	r3, [pc, #12]	@ (8009144 <tcp_trigger_input_pcb_close+0x1c>)
 8009138:	701a      	strb	r2, [r3, #0]
}
 800913a:	bf00      	nop
 800913c:	46bd      	mov	sp, r7
 800913e:	bc80      	pop	{r7}
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20006c91 	.word	0x20006c91

08009148 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	607b      	str	r3, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	817b      	strh	r3, [r7, #10]
 8009156:	4613      	mov	r3, r2
 8009158:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800915a:	897a      	ldrh	r2, [r7, #10]
 800915c:	893b      	ldrh	r3, [r7, #8]
 800915e:	4413      	add	r3, r2
 8009160:	b29b      	uxth	r3, r3
 8009162:	3314      	adds	r3, #20
 8009164:	b29b      	uxth	r3, r3
 8009166:	2200      	movs	r2, #0
 8009168:	4619      	mov	r1, r3
 800916a:	2001      	movs	r0, #1
 800916c:	f7fb fe12 	bl	8004d94 <pbuf_alloc>
 8009170:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d056      	beq.n	8009226 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009178:	897b      	ldrh	r3, [r7, #10]
 800917a:	3313      	adds	r3, #19
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	8952      	ldrh	r2, [r2, #10]
 8009180:	4293      	cmp	r3, r2
 8009182:	db05      	blt.n	8009190 <tcp_output_alloc_header+0x48>
 8009184:	4b2a      	ldr	r3, [pc, #168]	@ (8009230 <tcp_output_alloc_header+0xe8>)
 8009186:	2272      	movs	r2, #114	@ 0x72
 8009188:	492a      	ldr	r1, [pc, #168]	@ (8009234 <tcp_output_alloc_header+0xec>)
 800918a:	482b      	ldr	r0, [pc, #172]	@ (8009238 <tcp_output_alloc_header+0xf0>)
 800918c:	f003 fe52 	bl	800ce34 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8adb      	ldrh	r3, [r3, #22]
 800919a:	4618      	mov	r0, r3
 800919c:	f7fb f861 	bl	8004262 <lwip_htons>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8b1b      	ldrh	r3, [r3, #24]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fb f858 	bl	8004262 <lwip_htons>
 80091b2:	4603      	mov	r3, r0
 80091b4:	461a      	mov	r2, r3
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fb f859 	bl	800427c <lwip_htonl>
 80091ca:	4602      	mov	r2, r0
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80091d0:	897b      	ldrh	r3, [r7, #10]
 80091d2:	089b      	lsrs	r3, r3, #2
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	3305      	adds	r3, #5
 80091d8:	b29b      	uxth	r3, r3
 80091da:	031b      	lsls	r3, r3, #12
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f043 0310 	orr.w	r3, r3, #16
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fb f83c 	bl	8004262 <lwip_htons>
 80091ea:	4603      	mov	r3, r0
 80091ec:	461a      	mov	r2, r3
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fb f833 	bl	8004262 <lwip_htons>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	2200      	movs	r2, #0
 8009208:	741a      	strb	r2, [r3, #16]
 800920a:	2200      	movs	r2, #0
 800920c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2200      	movs	r2, #0
 8009212:	749a      	strb	r2, [r3, #18]
 8009214:	2200      	movs	r2, #0
 8009216:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8009220:	441a      	add	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8009226:	697b      	ldr	r3, [r7, #20]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	0800ec2c 	.word	0x0800ec2c
 8009234:	0800ec60 	.word	0x0800ec60
 8009238:	0800ec90 	.word	0x0800ec90

0800923c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009248:	2b00      	cmp	r3, #0
 800924a:	d02d      	beq.n	80092a8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e002      	b.n	800925a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1f8      	bne.n	8009254 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	899b      	ldrh	r3, [r3, #12]
 8009268:	b29b      	uxth	r3, r3
 800926a:	4618      	mov	r0, r3
 800926c:	f7fa fff9 	bl	8004262 <lwip_htons>
 8009270:	4603      	mov	r3, r0
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d116      	bne.n	80092a8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	899b      	ldrh	r3, [r3, #12]
 8009280:	b29c      	uxth	r4, r3
 8009282:	2001      	movs	r0, #1
 8009284:	f7fa ffed 	bl	8004262 <lwip_htons>
 8009288:	4603      	mov	r3, r0
 800928a:	461a      	mov	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	4322      	orrs	r2, r4
 8009292:	b292      	uxth	r2, r2
 8009294:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	7e9b      	ldrb	r3, [r3, #26]
 800929a:	f043 0320 	orr.w	r3, r3, #32
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e004      	b.n	80092b2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80092a8:	2101      	movs	r1, #1
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f88c 	bl	80093c8 <tcp_enqueue_flags>
 80092b0:	4603      	mov	r3, r0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd90      	pop	{r4, r7, pc}
	...

080092bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80092bc:	b590      	push	{r4, r7, lr}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	4613      	mov	r3, r2
 80092ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80092cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	f003 0304 	and.w	r3, r3, #4
 80092d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80092da:	2003      	movs	r0, #3
 80092dc:	f7fb fb6a 	bl	80049b4 <memp_malloc>
 80092e0:	6138      	str	r0, [r7, #16]
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d104      	bne.n	80092f2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80092e8:	68b8      	ldr	r0, [r7, #8]
 80092ea:	f7fc f8cb 	bl	8005484 <pbuf_free>
    return NULL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e060      	b.n	80093b4 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80092f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	891a      	ldrh	r2, [r3, #8]
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	b29b      	uxth	r3, r3
 800930e:	429a      	cmp	r2, r3
 8009310:	d205      	bcs.n	800931e <tcp_create_segment+0x62>
 8009312:	4b2a      	ldr	r3, [pc, #168]	@ (80093bc <tcp_create_segment+0x100>)
 8009314:	22ba      	movs	r2, #186	@ 0xba
 8009316:	492a      	ldr	r1, [pc, #168]	@ (80093c0 <tcp_create_segment+0x104>)
 8009318:	482a      	ldr	r0, [pc, #168]	@ (80093c4 <tcp_create_segment+0x108>)
 800931a:	f003 fd8b 	bl	800ce34 <iprintf>
  seg->len = p->tot_len - optlen;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	891a      	ldrh	r2, [r3, #8]
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	b29b      	uxth	r3, r3
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	b29a      	uxth	r2, r3
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800932e:	2114      	movs	r1, #20
 8009330:	68b8      	ldr	r0, [r7, #8]
 8009332:	f7fc f883 	bl	800543c <pbuf_header>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800933c:	6938      	ldr	r0, [r7, #16]
 800933e:	f7fd fa01 	bl	8006744 <tcp_seg_free>
    return NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	e036      	b.n	80093b4 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8ada      	ldrh	r2, [r3, #22]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	68dc      	ldr	r4, [r3, #12]
 8009358:	4610      	mov	r0, r2
 800935a:	f7fa ff82 	bl	8004262 <lwip_htons>
 800935e:	4603      	mov	r3, r0
 8009360:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8b1a      	ldrh	r2, [r3, #24]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	68dc      	ldr	r4, [r3, #12]
 800936a:	4610      	mov	r0, r2
 800936c:	f7fa ff79 	bl	8004262 <lwip_htons>
 8009370:	4603      	mov	r3, r0
 8009372:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	68dc      	ldr	r4, [r3, #12]
 8009378:	6838      	ldr	r0, [r7, #0]
 800937a:	f7fa ff7f 	bl	800427c <lwip_htonl>
 800937e:	4603      	mov	r3, r0
 8009380:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	089b      	lsrs	r3, r3, #2
 8009386:	b2db      	uxtb	r3, r3
 8009388:	3305      	adds	r3, #5
 800938a:	b29b      	uxth	r3, r3
 800938c:	031b      	lsls	r3, r3, #12
 800938e:	b29a      	uxth	r2, r3
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	b29b      	uxth	r3, r3
 8009394:	4313      	orrs	r3, r2
 8009396:	b29a      	uxth	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	68dc      	ldr	r4, [r3, #12]
 800939c:	4610      	mov	r0, r2
 800939e:	f7fa ff60 	bl	8004262 <lwip_htons>
 80093a2:	4603      	mov	r3, r0
 80093a4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	749a      	strb	r2, [r3, #18]
 80093ae:	2200      	movs	r2, #0
 80093b0:	74da      	strb	r2, [r3, #19]
  return seg;
 80093b2:	693b      	ldr	r3, [r7, #16]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	371c      	adds	r7, #28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd90      	pop	{r4, r7, pc}
 80093bc:	0800ec2c 	.word	0x0800ec2c
 80093c0:	0800ecb8 	.word	0x0800ecb8
 80093c4:	0800ec90 	.word	0x0800ec90

080093c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	@ 0x28
 80093cc:	af02      	add	r7, sp, #8
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <tcp_enqueue_flags+0x2c>
 80093e6:	4b6f      	ldr	r3, [pc, #444]	@ (80095a4 <tcp_enqueue_flags+0x1dc>)
 80093e8:	f240 321a 	movw	r2, #794	@ 0x31a
 80093ec:	496e      	ldr	r1, [pc, #440]	@ (80095a8 <tcp_enqueue_flags+0x1e0>)
 80093ee:	486f      	ldr	r0, [pc, #444]	@ (80095ac <tcp_enqueue_flags+0x1e4>)
 80093f0:	f003 fd20 	bl	800ce34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80093fa:	2b08      	cmp	r3, #8
 80093fc:	d806      	bhi.n	800940c <tcp_enqueue_flags+0x44>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009404:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8009408:	4293      	cmp	r3, r2
 800940a:	d90e      	bls.n	800942a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7e9b      	ldrb	r3, [r3, #26]
 800941a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800941e:	b2da      	uxtb	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009424:	f04f 33ff 	mov.w	r3, #4294967295
 8009428:	e0b7      	b.n	800959a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8009434:	2301      	movs	r3, #1
 8009436:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009438:	7ffb      	ldrb	r3, [r7, #31]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	b29b      	uxth	r3, r3
 8009448:	2200      	movs	r2, #0
 800944a:	4619      	mov	r1, r3
 800944c:	2000      	movs	r0, #0
 800944e:	f7fb fca1 	bl	8004d94 <pbuf_alloc>
 8009452:	6138      	str	r0, [r7, #16]
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d109      	bne.n	800946e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7e9b      	ldrb	r3, [r3, #26]
 800945e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009462:	b2da      	uxtb	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009468:	f04f 33ff 	mov.w	r3, #4294967295
 800946c:	e095      	b.n	800959a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	895a      	ldrh	r2, [r3, #10]
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	b29b      	uxth	r3, r3
 8009476:	429a      	cmp	r2, r3
 8009478:	d206      	bcs.n	8009488 <tcp_enqueue_flags+0xc0>
 800947a:	4b4a      	ldr	r3, [pc, #296]	@ (80095a4 <tcp_enqueue_flags+0x1dc>)
 800947c:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8009480:	494b      	ldr	r1, [pc, #300]	@ (80095b0 <tcp_enqueue_flags+0x1e8>)
 8009482:	484a      	ldr	r0, [pc, #296]	@ (80095ac <tcp_enqueue_flags+0x1e4>)
 8009484:	f003 fcd6 	bl	800ce34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800948c:	78fa      	ldrb	r2, [r7, #3]
 800948e:	7ffb      	ldrb	r3, [r7, #31]
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	460b      	mov	r3, r1
 8009494:	6939      	ldr	r1, [r7, #16]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff ff10 	bl	80092bc <tcp_create_segment>
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7e9b      	ldrb	r3, [r3, #26]
 80094a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80094b2:	f04f 33ff 	mov.w	r3, #4294967295
 80094b6:	e070      	b.n	800959a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d006      	beq.n	80094d2 <tcp_enqueue_flags+0x10a>
 80094c4:	4b37      	ldr	r3, [pc, #220]	@ (80095a4 <tcp_enqueue_flags+0x1dc>)
 80094c6:	f240 3249 	movw	r2, #841	@ 0x349
 80094ca:	493a      	ldr	r1, [pc, #232]	@ (80095b4 <tcp_enqueue_flags+0x1ec>)
 80094cc:	4837      	ldr	r0, [pc, #220]	@ (80095ac <tcp_enqueue_flags+0x1e4>)
 80094ce:	f003 fcb1 	bl	800ce34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	891b      	ldrh	r3, [r3, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d006      	beq.n	80094e8 <tcp_enqueue_flags+0x120>
 80094da:	4b32      	ldr	r3, [pc, #200]	@ (80095a4 <tcp_enqueue_flags+0x1dc>)
 80094dc:	f240 324a 	movw	r2, #842	@ 0x34a
 80094e0:	4935      	ldr	r1, [pc, #212]	@ (80095b8 <tcp_enqueue_flags+0x1f0>)
 80094e2:	4832      	ldr	r0, [pc, #200]	@ (80095ac <tcp_enqueue_flags+0x1e4>)
 80094e4:	f003 fca6 	bl	800ce34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d103      	bne.n	80094f8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	669a      	str	r2, [r3, #104]	@ 0x68
 80094f6:	e00d      	b.n	8009514 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094fc:	61bb      	str	r3, [r7, #24]
 80094fe:	e002      	b.n	8009506 <tcp_enqueue_flags+0x13e>
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	61bb      	str	r3, [r7, #24]
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1f8      	bne.n	8009500 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d104      	bne.n	8009530 <tcp_enqueue_flags+0x168>
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d006      	beq.n	8009552 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7e9b      	ldrb	r3, [r3, #26]
 8009548:	f043 0320 	orr.w	r3, r3, #32
 800954c:	b2da      	uxtb	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	4618      	mov	r0, r3
 8009558:	f7fc f828 	bl	80055ac <pbuf_clen>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009566:	4413      	add	r3, r2
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00e      	beq.n	8009598 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <tcp_enqueue_flags+0x1d0>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <tcp_enqueue_flags+0x1d0>
 800958a:	4b06      	ldr	r3, [pc, #24]	@ (80095a4 <tcp_enqueue_flags+0x1dc>)
 800958c:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8009590:	490a      	ldr	r1, [pc, #40]	@ (80095bc <tcp_enqueue_flags+0x1f4>)
 8009592:	4806      	ldr	r0, [pc, #24]	@ (80095ac <tcp_enqueue_flags+0x1e4>)
 8009594:	f003 fc4e 	bl	800ce34 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3720      	adds	r7, #32
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	0800ec2c 	.word	0x0800ec2c
 80095a8:	0800ef30 	.word	0x0800ef30
 80095ac:	0800ec90 	.word	0x0800ec90
 80095b0:	0800ef88 	.word	0x0800ef88
 80095b4:	0800efc4 	.word	0x0800efc4
 80095b8:	0800efdc 	.word	0x0800efdc
 80095bc:	0800f008 	.word	0x0800f008

080095c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80095c0:	b590      	push	{r4, r7, lr}
 80095c2:	b08b      	sub	sp, #44	@ 0x2c
 80095c4:	af04      	add	r7, sp, #16
 80095c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80095cc:	7dbb      	ldrb	r3, [r7, #22]
 80095ce:	b29c      	uxth	r4, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fa fe51 	bl	800427c <lwip_htonl>
 80095da:	4603      	mov	r3, r0
 80095dc:	2200      	movs	r2, #0
 80095de:	4621      	mov	r1, r4
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff fdb1 	bl	8009148 <tcp_output_alloc_header>
 80095e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	7e9b      	ldrb	r3, [r3, #26]
 80095f2:	f043 0303 	orr.w	r3, r3, #3
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80095fc:	f06f 0301 	mvn.w	r3, #1
 8009600:	e036      	b.n	8009670 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3304      	adds	r3, #4
 8009606:	4618      	mov	r0, r3
 8009608:	f002 f9ee 	bl	800b9e8 <ip4_route>
 800960c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8009614:	23fc      	movs	r3, #252	@ 0xfc
 8009616:	75fb      	strb	r3, [r7, #23]
 8009618:	e012      	b.n	8009640 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	1d18      	adds	r0, r3, #4
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	7a9c      	ldrb	r4, [r3, #10]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7a5b      	ldrb	r3, [r3, #9]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	9202      	str	r2, [sp, #8]
 800962c:	2206      	movs	r2, #6
 800962e:	9201      	str	r2, [sp, #4]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	4623      	mov	r3, r4
 8009634:	4602      	mov	r2, r0
 8009636:	6938      	ldr	r0, [r7, #16]
 8009638:	f002 fb7e 	bl	800bd38 <ip4_output_if>
 800963c:	4603      	mov	r3, r0
 800963e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009640:	6938      	ldr	r0, [r7, #16]
 8009642:	f7fb ff1f 	bl	8005484 <pbuf_free>

  if (err != ERR_OK) {
 8009646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	7e9b      	ldrb	r3, [r3, #26]
 8009652:	f043 0303 	orr.w	r3, r3, #3
 8009656:	b2da      	uxtb	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	769a      	strb	r2, [r3, #26]
 800965c:	e006      	b.n	800966c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	7e9b      	ldrb	r3, [r3, #26]
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	b2da      	uxtb	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800966c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009670:	4618      	mov	r0, r3
 8009672:	371c      	adds	r7, #28
 8009674:	46bd      	mov	sp, r7
 8009676:	bd90      	pop	{r4, r7, pc}

08009678 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009678:	b5b0      	push	{r4, r5, r7, lr}
 800967a:	b08a      	sub	sp, #40	@ 0x28
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7d1b      	ldrb	r3, [r3, #20]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d106      	bne.n	8009696 <tcp_output+0x1e>
 8009688:	4b99      	ldr	r3, [pc, #612]	@ (80098f0 <tcp_output+0x278>)
 800968a:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800968e:	4999      	ldr	r1, [pc, #612]	@ (80098f4 <tcp_output+0x27c>)
 8009690:	4899      	ldr	r0, [pc, #612]	@ (80098f8 <tcp_output+0x280>)
 8009692:	f003 fbcf 	bl	800ce34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009696:	4b99      	ldr	r3, [pc, #612]	@ (80098fc <tcp_output+0x284>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d101      	bne.n	80096a4 <tcp_output+0x2c>
    return ERR_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e1cb      	b.n	8009a3c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096b0:	4293      	cmp	r3, r2
 80096b2:	bf28      	it	cs
 80096b4:	4613      	movcs	r3, r2
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096be:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	7e9b      	ldrb	r3, [r3, #26]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d017      	beq.n	80096fc <tcp_output+0x84>
 80096cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00f      	beq.n	80096f2 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fa fdcf 	bl	800427c <lwip_htonl>
 80096de:	4602      	mov	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e8:	8912      	ldrh	r2, [r2, #8]
 80096ea:	4413      	add	r3, r2
     (seg == NULL ||
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d204      	bcs.n	80096fc <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff ff64 	bl	80095c0 <tcp_send_empty_ack>
 80096f8:	4603      	mov	r3, r0
 80096fa:	e19f      	b.n	8009a3c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009700:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d007      	beq.n	8009718 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8009708:	e002      	b.n	8009710 <tcp_output+0x98>
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	623b      	str	r3, [r7, #32]
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1f8      	bne.n	800970a <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	3304      	adds	r3, #4
 800971c:	4618      	mov	r0, r3
 800971e:	f002 f963 	bl	800b9e8 <ip4_route>
 8009722:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <tcp_output+0xb8>
    return ERR_RTE;
 800972a:	f06f 0303 	mvn.w	r3, #3
 800972e:	e185      	b.n	8009a3c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <tcp_output+0xc6>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d111      	bne.n	8009762 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <tcp_output+0xd2>
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3304      	adds	r3, #4
 8009748:	e000      	b.n	800974c <tcp_output+0xd4>
 800974a:	2300      	movs	r3, #0
 800974c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d102      	bne.n	800975a <tcp_output+0xe2>
      return ERR_RTE;
 8009754:	f06f 0303 	mvn.w	r3, #3
 8009758:	e170      	b.n	8009a3c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8009762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 813f 	beq.w	80099e8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	4618      	mov	r0, r3
 8009772:	f7fa fd83 	bl	800427c <lwip_htonl>
 8009776:	4602      	mov	r2, r0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009780:	8912      	ldrh	r2, [r2, #8]
 8009782:	4413      	add	r3, r2
  if (seg != NULL &&
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	429a      	cmp	r2, r3
 8009788:	f080 812e 	bcs.w	80099e8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 812a 	beq.w	80099e8 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800979a:	461a      	mov	r2, r3
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	4293      	cmp	r3, r2
 80097a0:	f040 8122 	bne.w	80099e8 <tcp_output+0x370>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f040 811d 	bne.w	80099e8 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f040 812c 	bne.w	8009a12 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 80097ca:	e122      	b.n	8009a12 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80097cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	899b      	ldrh	r3, [r3, #12]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fa fd44 	bl	8004262 <lwip_htons>
 80097da:	4603      	mov	r3, r0
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d006      	beq.n	80097f2 <tcp_output+0x17a>
 80097e4:	4b42      	ldr	r3, [pc, #264]	@ (80098f0 <tcp_output+0x278>)
 80097e6:	f240 4245 	movw	r2, #1093	@ 0x445
 80097ea:	4945      	ldr	r1, [pc, #276]	@ (8009900 <tcp_output+0x288>)
 80097ec:	4842      	ldr	r0, [pc, #264]	@ (80098f8 <tcp_output+0x280>)
 80097ee:	f003 fb21 	bl	800ce34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01f      	beq.n	800983a <tcp_output+0x1c2>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	7e9b      	ldrb	r3, [r3, #26]
 80097fe:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8009802:	2b00      	cmp	r3, #0
 8009804:	d119      	bne.n	800983a <tcp_output+0x1c2>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <tcp_output+0x1ae>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d110      	bne.n	800983a <tcp_output+0x1c2>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800981c:	891a      	ldrh	r2, [r3, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009822:	429a      	cmp	r2, r3
 8009824:	d209      	bcs.n	800983a <tcp_output+0x1c2>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <tcp_output+0x1c2>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009836:	2b08      	cmp	r3, #8
 8009838:	d901      	bls.n	800983e <tcp_output+0x1c6>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <tcp_output+0x1c8>
 800983e:	2300      	movs	r3, #0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7e9b      	ldrb	r3, [r3, #26]
 8009848:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80e2 	beq.w	8009a16 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	7d1b      	ldrb	r3, [r3, #20]
 8009856:	2b02      	cmp	r3, #2
 8009858:	d00d      	beq.n	8009876 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	899b      	ldrh	r3, [r3, #12]
 8009860:	b29c      	uxth	r4, r3
 8009862:	2010      	movs	r0, #16
 8009864:	f7fa fcfd 	bl	8004262 <lwip_htons>
 8009868:	4603      	mov	r3, r0
 800986a:	461a      	mov	r2, r3
 800986c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	4322      	orrs	r2, r4
 8009872:	b292      	uxth	r2, r2
 8009874:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800987c:	f000 f8e2 	bl	8009a44 <tcp_output_segment>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d009      	beq.n	80098a0 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7e9b      	ldrb	r3, [r3, #26]
 8009890:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009894:	b2da      	uxtb	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	769a      	strb	r2, [r3, #26]
      return err;
 800989a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989e:	e0cd      	b.n	8009a3c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7d1b      	ldrb	r3, [r3, #20]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d006      	beq.n	80098be <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7e9b      	ldrb	r3, [r3, #26]
 80098b4:	f023 0303 	bic.w	r3, r3, #3
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fa fcd9 	bl	800427c <lwip_htonl>
 80098ca:	4604      	mov	r4, r0
 80098cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ce:	891b      	ldrh	r3, [r3, #8]
 80098d0:	461d      	mov	r5, r3
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	899b      	ldrh	r3, [r3, #12]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fa fcc1 	bl	8004262 <lwip_htons>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00c      	beq.n	8009904 <tcp_output+0x28c>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e00b      	b.n	8009906 <tcp_output+0x28e>
 80098ee:	bf00      	nop
 80098f0:	0800ec2c 	.word	0x0800ec2c
 80098f4:	0800f030 	.word	0x0800f030
 80098f8:	0800ec90 	.word	0x0800ec90
 80098fc:	20006c98 	.word	0x20006c98
 8009900:	0800f058 	.word	0x0800f058
 8009904:	2300      	movs	r3, #0
 8009906:	442b      	add	r3, r5
 8009908:	4423      	add	r3, r4
 800990a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	da02      	bge.n	800991e <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	891b      	ldrh	r3, [r3, #8]
 8009922:	461c      	mov	r4, r3
 8009924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	899b      	ldrh	r3, [r3, #12]
 800992a:	b29b      	uxth	r3, r3
 800992c:	4618      	mov	r0, r3
 800992e:	f7fa fc98 	bl	8004262 <lwip_htons>
 8009932:	4603      	mov	r3, r0
 8009934:	f003 0303 	and.w	r3, r3, #3
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <tcp_output+0x2c8>
 800993c:	2301      	movs	r3, #1
 800993e:	e000      	b.n	8009942 <tcp_output+0x2ca>
 8009940:	2300      	movs	r3, #0
 8009942:	4423      	add	r3, r4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d049      	beq.n	80099dc <tcp_output+0x364>
      seg->next = NULL;
 8009948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <tcp_output+0x2ea>
        pcb->unacked = seg;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800995a:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 800995c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995e:	623b      	str	r3, [r7, #32]
 8009960:	e03f      	b.n	80099e2 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	f7fa fc87 	bl	800427c <lwip_htonl>
 800996e:	4604      	mov	r4, r0
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fa fc80 	bl	800427c <lwip_htonl>
 800997c:	4603      	mov	r3, r0
 800997e:	1ae3      	subs	r3, r4, r3
 8009980:	2b00      	cmp	r3, #0
 8009982:	da24      	bge.n	80099ce <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	336c      	adds	r3, #108	@ 0x6c
 8009988:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800998a:	e002      	b.n	8009992 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d011      	beq.n	80099be <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fa fc6a 	bl	800427c <lwip_htonl>
 80099a8:	4604      	mov	r4, r0
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fa fc63 	bl	800427c <lwip_htonl>
 80099b6:	4603      	mov	r3, r0
 80099b8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dbe6      	blt.n	800998c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	e009      	b.n	80099e2 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	623b      	str	r3, [r7, #32]
 80099da:	e002      	b.n	80099e2 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80099dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099de:	f7fc feb1 	bl	8006744 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80099e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d015      	beq.n	8009a1a <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fa fc41 	bl	800427c <lwip_htonl>
 80099fa:	4602      	mov	r2, r0
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a04:	8912      	ldrh	r2, [r2, #8]
 8009a06:	4413      	add	r3, r2
  while (seg != NULL &&
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	f4bf aede 	bcs.w	80097cc <tcp_output+0x154>
  }
output_done:
 8009a10:	e003      	b.n	8009a1a <tcp_output+0x3a2>
    goto output_done;
 8009a12:	bf00      	nop
 8009a14:	e002      	b.n	8009a1c <tcp_output+0x3a4>
      break;
 8009a16:	bf00      	nop
 8009a18:	e000      	b.n	8009a1c <tcp_output+0x3a4>
output_done:
 8009a1a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d103      	bne.n	8009a2c <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	7e9b      	ldrb	r3, [r3, #26]
 8009a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3728      	adds	r7, #40	@ 0x28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bdb0      	pop	{r4, r5, r7, pc}

08009a44 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009a44:	b5b0      	push	{r4, r5, r7, lr}
 8009a46:	b08c      	sub	sp, #48	@ 0x30
 8009a48:	af04      	add	r7, sp, #16
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	89db      	ldrh	r3, [r3, #14]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d001      	beq.n	8009a5e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e08a      	b.n	8009b74 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	68dc      	ldr	r4, [r3, #12]
 8009a66:	4610      	mov	r0, r2
 8009a68:	f7fa fc08 	bl	800427c <lwip_htonl>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68dc      	ldr	r4, [r3, #12]
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f7fa fbf2 	bl	8004262 <lwip_htons>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8009a8a:	441a      	add	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	3314      	adds	r3, #20
 8009a96:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	7a9b      	ldrb	r3, [r3, #10]
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d014      	beq.n	8009ace <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8009aae:	f7fd f8b1 	bl	8006c14 <tcp_eff_send_mss_impl>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009ab6:	8b7b      	ldrh	r3, [r7, #26]
 8009ab8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fa fbdd 	bl	800427c <lwip_htonl>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	3304      	adds	r3, #4
 8009acc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da02      	bge.n	8009ade <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10c      	bne.n	8009b00 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8009ae6:	4b25      	ldr	r3, [pc, #148]	@ (8009b7c <tcp_output_segment+0x138>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fa fbc1 	bl	800427c <lwip_htonl>
 8009afa:	4602      	mov	r2, r0
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68da      	ldr	r2, [r3, #12]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	8959      	ldrh	r1, [r3, #10]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	8b3a      	ldrh	r2, [r7, #24]
 8009b1a:	1a8a      	subs	r2, r1, r2
 8009b1c:	b292      	uxth	r2, r2
 8009b1e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	8919      	ldrh	r1, [r3, #8]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	8b3a      	ldrh	r2, [r7, #24]
 8009b2c:	1a8a      	subs	r2, r1, r2
 8009b2e:	b292      	uxth	r2, r2
 8009b30:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	68d2      	ldr	r2, [r2, #12]
 8009b3a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	741a      	strb	r2, [r3, #16]
 8009b44:	2200      	movs	r2, #0
 8009b46:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6858      	ldr	r0, [r3, #4]
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	1d1c      	adds	r4, r3, #4
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	7a9d      	ldrb	r5, [r3, #10]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	7a5b      	ldrb	r3, [r3, #9]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	9202      	str	r2, [sp, #8]
 8009b5e:	2206      	movs	r2, #6
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	462b      	mov	r3, r5
 8009b66:	4622      	mov	r2, r4
 8009b68:	f002 f8e6 	bl	800bd38 <ip4_output_if>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8009b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b7c:	20006c4c 	.word	0x20006c4c

08009b80 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08c      	sub	sp, #48	@ 0x30
 8009b84:	af04      	add	r7, sp, #16
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2114      	movs	r1, #20
 8009b92:	2001      	movs	r0, #1
 8009b94:	f7fb f8fe 	bl	8004d94 <pbuf_alloc>
 8009b98:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d05b      	beq.n	8009c58 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	895b      	ldrh	r3, [r3, #10]
 8009ba4:	2b13      	cmp	r3, #19
 8009ba6:	d806      	bhi.n	8009bb6 <tcp_rst+0x36>
 8009ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8009c60 <tcp_rst+0xe0>)
 8009baa:	f240 524c 	movw	r2, #1356	@ 0x54c
 8009bae:	492d      	ldr	r1, [pc, #180]	@ (8009c64 <tcp_rst+0xe4>)
 8009bb0:	482d      	ldr	r0, [pc, #180]	@ (8009c68 <tcp_rst+0xe8>)
 8009bb2:	f003 f93f 	bl	800ce34 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8009bbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fa fb4f 	bl	8004262 <lwip_htons>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009bcc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fa fb47 	bl	8004262 <lwip_htons>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7fa fb4d 	bl	800427c <lwip_htonl>
 8009be2:	4602      	mov	r2, r0
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	f7fa fb47 	bl	800427c <lwip_htonl>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009bf4:	f245 0014 	movw	r0, #20500	@ 0x5014
 8009bf8:	f7fa fb33 	bl	8004262 <lwip_htons>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	461a      	mov	r2, r3
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f042 0208 	orr.w	r2, r2, #8
 8009c0c:	739a      	strb	r2, [r3, #14]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009c14:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	741a      	strb	r2, [r3, #16]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2200      	movs	r2, #0
 8009c24:	749a      	strb	r2, [r3, #18]
 8009c26:	2200      	movs	r2, #0
 8009c28:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009c2a:	6838      	ldr	r0, [r7, #0]
 8009c2c:	f001 fedc 	bl	800b9e8 <ip4_route>
 8009c30:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00b      	beq.n	8009c50 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	2306      	movs	r3, #6
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	2300      	movs	r3, #0
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	23ff      	movs	r3, #255	@ 0xff
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	69f8      	ldr	r0, [r7, #28]
 8009c4c:	f002 f874 	bl	800bd38 <ip4_output_if>
  }
  pbuf_free(p);
 8009c50:	69f8      	ldr	r0, [r7, #28]
 8009c52:	f7fb fc17 	bl	8005484 <pbuf_free>
 8009c56:	e000      	b.n	8009c5a <tcp_rst+0xda>
    return;
 8009c58:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009c5a:	3720      	adds	r7, #32
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	0800ec2c 	.word	0x0800ec2c
 8009c64:	0800ec60 	.word	0x0800ec60
 8009c68:	0800ec90 	.word	0x0800ec90

08009c6c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d029      	beq.n	8009cd0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	e002      	b.n	8009c8a <tcp_rexmit_rto+0x1e>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f8      	bne.n	8009c84 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cae:	2bff      	cmp	r3, #255	@ 0xff
 8009cb0:	d007      	beq.n	8009cc2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cb8:	3301      	adds	r3, #1
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff fcd5 	bl	8009678 <tcp_output>
 8009cce:	e000      	b.n	8009cd2 <tcp_rexmit_rto+0x66>
    return;
 8009cd0:	bf00      	nop
}
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d043      	beq.n	8009d70 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cec:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3368      	adds	r3, #104	@ 0x68
 8009cfa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009cfc:	e002      	b.n	8009d04 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d011      	beq.n	8009d30 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fa fab1 	bl	800427c <lwip_htonl>
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fa faaa 	bl	800427c <lwip_htonl>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dbe6      	blt.n	8009cfe <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d54:	2bff      	cmp	r3, #255	@ 0xff
 8009d56:	d007      	beq.n	8009d68 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d5e:	3301      	adds	r3, #1
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8009d6e:	e000      	b.n	8009d72 <tcp_rexmit+0x9a>
    return;
 8009d70:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd90      	pop	{r4, r7, pc}

08009d78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d041      	beq.n	8009e0c <tcp_rexmit_fast+0x94>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	7e9b      	ldrb	r3, [r3, #26]
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d13b      	bne.n	8009e0c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff ff9f 	bl	8009cd8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009da6:	4293      	cmp	r3, r2
 8009da8:	bf28      	it	cs
 8009daa:	4613      	movcs	r3, r2
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	0fda      	lsrs	r2, r3, #31
 8009db0:	4413      	add	r3, r2
 8009db2:	105b      	asrs	r3, r3, #1
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d206      	bcs.n	8009ddc <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009de6:	4619      	mov	r1, r3
 8009de8:	0049      	lsls	r1, r1, #1
 8009dea:	440b      	add	r3, r1
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	4413      	add	r3, r2
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	7e9b      	ldrb	r3, [r3, #26]
 8009dfc:	f043 0304 	orr.w	r3, r3, #4
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08a      	sub	sp, #40	@ 0x28
 8009e18:	af04      	add	r7, sp, #16
 8009e1a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e20:	3b01      	subs	r3, #1
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fa fa2a 	bl	800427c <lwip_htonl>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff f98a 	bl	8009148 <tcp_output_alloc_header>
 8009e34:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	e021      	b.n	8009e86 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f001 fdce 	bl	800b9e8 <ip4_route>
 8009e4c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d102      	bne.n	8009e5a <tcp_keepalive+0x46>
    err = ERR_RTE;
 8009e54:	23fc      	movs	r3, #252	@ 0xfc
 8009e56:	75fb      	strb	r3, [r7, #23]
 8009e58:	e010      	b.n	8009e7c <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	1d1a      	adds	r2, r3, #4
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7a98      	ldrb	r0, [r3, #10]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	9302      	str	r3, [sp, #8]
 8009e68:	2306      	movs	r3, #6
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	4603      	mov	r3, r0
 8009e72:	6938      	ldr	r0, [r7, #16]
 8009e74:	f001 ff60 	bl	800bd38 <ip4_output_if>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009e7c:	6938      	ldr	r0, [r7, #16]
 8009e7e:	f7fb fb01 	bl	8005484 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009e8e:	b590      	push	{r4, r7, lr}
 8009e90:	b08f      	sub	sp, #60	@ 0x3c
 8009e92:	af04      	add	r7, sp, #16
 8009e94:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e9a:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ea6:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e085      	b.n	8009fbe <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	899b      	ldrh	r3, [r3, #12]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fa f9d1 	bl	8004262 <lwip_htons>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d005      	beq.n	8009ed6 <tcp_zero_window_probe+0x48>
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	891b      	ldrh	r3, [r3, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <tcp_zero_window_probe+0x48>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e000      	b.n	8009ed8 <tcp_zero_window_probe+0x4a>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009eda:	7ffb      	ldrb	r3, [r7, #31]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bf0c      	ite	eq
 8009ee0:	2301      	moveq	r3, #1
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	8bba      	ldrh	r2, [r7, #28]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff f928 	bl	8009148 <tcp_output_alloc_header>
 8009ef8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009f00:	f04f 33ff 	mov.w	r3, #4294967295
 8009f04:	e05b      	b.n	8009fbe <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009f0c:	7ffb      	ldrb	r3, [r7, #31]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00e      	beq.n	8009f30 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	899b      	ldrh	r3, [r3, #12]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009f1c:	b29c      	uxth	r4, r3
 8009f1e:	2011      	movs	r0, #17
 8009f20:	f7fa f99f 	bl	8004262 <lwip_htons>
 8009f24:	4603      	mov	r3, r0
 8009f26:	4323      	orrs	r3, r4
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	819a      	strh	r2, [r3, #12]
 8009f2e:	e010      	b.n	8009f52 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	3314      	adds	r3, #20
 8009f36:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	6858      	ldr	r0, [r3, #4]
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	891a      	ldrh	r2, [r3, #8]
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	891b      	ldrh	r3, [r3, #8]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	6939      	ldr	r1, [r7, #16]
 8009f4e:	f7fb fc97 	bl	8005880 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fa f98f 	bl	800427c <lwip_htonl>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	3301      	adds	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	da02      	bge.n	8009f76 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 fd34 	bl	800b9e8 <ip4_route>
 8009f80:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d103      	bne.n	8009f90 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8009f88:	23fc      	movs	r3, #252	@ 0xfc
 8009f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f8e:	e011      	b.n	8009fb4 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	1d1a      	adds	r2, r3, #4
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7a98      	ldrb	r0, [r3, #10]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	9302      	str	r3, [sp, #8]
 8009f9e:	2306      	movs	r3, #6
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	69b8      	ldr	r0, [r7, #24]
 8009faa:	f001 fec5 	bl	800bd38 <ip4_output_if>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009fb4:	69b8      	ldr	r0, [r7, #24]
 8009fb6:	f7fb fa65 	bl	8005484 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009fba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	372c      	adds	r7, #44	@ 0x2c
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd90      	pop	{r4, r7, pc}
	...

08009fc8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009fd0:	f7fb fcd6 	bl	8005980 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	@ (800a000 <tcpip_tcp_timer+0x38>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d103      	bne.n	8009fe4 <tcpip_tcp_timer+0x1c>
 8009fdc:	4b09      	ldr	r3, [pc, #36]	@ (800a004 <tcpip_tcp_timer+0x3c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d005      	beq.n	8009ff0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4908      	ldr	r1, [pc, #32]	@ (800a008 <tcpip_tcp_timer+0x40>)
 8009fe8:	20fa      	movs	r0, #250	@ 0xfa
 8009fea:	f000 f86f 	bl	800a0cc <sys_timeout>
 8009fee:	e003      	b.n	8009ff8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009ff0:	4b06      	ldr	r3, [pc, #24]	@ (800a00c <tcpip_tcp_timer+0x44>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20006c58 	.word	0x20006c58
 800a004:	20006c5c 	.word	0x20006c5c
 800a008:	08009fc9 	.word	0x08009fc9
 800a00c:	20006ca4 	.word	0x20006ca4

0800a010 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a014:	4b0a      	ldr	r3, [pc, #40]	@ (800a040 <tcp_timer_needed+0x30>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10f      	bne.n	800a03c <tcp_timer_needed+0x2c>
 800a01c:	4b09      	ldr	r3, [pc, #36]	@ (800a044 <tcp_timer_needed+0x34>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d103      	bne.n	800a02c <tcp_timer_needed+0x1c>
 800a024:	4b08      	ldr	r3, [pc, #32]	@ (800a048 <tcp_timer_needed+0x38>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d007      	beq.n	800a03c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a02c:	4b04      	ldr	r3, [pc, #16]	@ (800a040 <tcp_timer_needed+0x30>)
 800a02e:	2201      	movs	r2, #1
 800a030:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a032:	2200      	movs	r2, #0
 800a034:	4905      	ldr	r1, [pc, #20]	@ (800a04c <tcp_timer_needed+0x3c>)
 800a036:	20fa      	movs	r0, #250	@ 0xfa
 800a038:	f000 f848 	bl	800a0cc <sys_timeout>
  }
}
 800a03c:	bf00      	nop
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20006ca4 	.word	0x20006ca4
 800a044:	20006c58 	.word	0x20006c58
 800a048:	20006c5c 	.word	0x20006c5c
 800a04c:	08009fc9 	.word	0x08009fc9

0800a050 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4903      	ldr	r1, [pc, #12]	@ (800a078 <cyclic_timer+0x28>)
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f82e 	bl	800a0cc <sys_timeout>
}
 800a070:	bf00      	nop
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0800a051 	.word	0x0800a051

0800a07c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a082:	2301      	movs	r3, #1
 800a084:	607b      	str	r3, [r7, #4]
 800a086:	e00e      	b.n	800a0a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a088:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c0 <sys_timeouts_init+0x44>)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c0 <sys_timeouts_init+0x44>)
 800a096:	4413      	add	r3, r2
 800a098:	461a      	mov	r2, r3
 800a09a:	490a      	ldr	r1, [pc, #40]	@ (800a0c4 <sys_timeouts_init+0x48>)
 800a09c:	f000 f816 	bl	800a0cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	607b      	str	r3, [r7, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d9ed      	bls.n	800a088 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a0ac:	f7fa f84c 	bl	8004148 <sys_now>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	4a05      	ldr	r2, [pc, #20]	@ (800a0c8 <sys_timeouts_init+0x4c>)
 800a0b4:	6013      	str	r3, [r2, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	0800f8f4 	.word	0x0800f8f4
 800a0c4:	0800a051 	.word	0x0800a051
 800a0c8:	20006ca0 	.word	0x20006ca0

0800a0cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a0d8:	2006      	movs	r0, #6
 800a0da:	f7fa fc6b 	bl	80049b4 <memp_malloc>
 800a0de:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10a      	bne.n	800a0fc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f040 8084 	bne.w	800a1f6 <sys_timeout+0x12a>
 800a0ee:	4b44      	ldr	r3, [pc, #272]	@ (800a200 <sys_timeout+0x134>)
 800a0f0:	22d4      	movs	r2, #212	@ 0xd4
 800a0f2:	4944      	ldr	r1, [pc, #272]	@ (800a204 <sys_timeout+0x138>)
 800a0f4:	4844      	ldr	r0, [pc, #272]	@ (800a208 <sys_timeout+0x13c>)
 800a0f6:	f002 fe9d 	bl	800ce34 <iprintf>
    return;
 800a0fa:	e07c      	b.n	800a1f6 <sys_timeout+0x12a>
  }

  now = sys_now();
 800a0fc:	f7fa f824 	bl	8004148 <sys_now>
 800a100:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a102:	4b42      	ldr	r3, [pc, #264]	@ (800a20c <sys_timeout+0x140>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <sys_timeout+0x4a>
    diff = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a10e:	4a40      	ldr	r2, [pc, #256]	@ (800a210 <sys_timeout+0x144>)
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	6013      	str	r3, [r2, #0]
 800a114:	e004      	b.n	800a120 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a116:	4b3e      	ldr	r3, [pc, #248]	@ (800a210 <sys_timeout+0x144>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	441a      	add	r2, r3
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a13c:	4b33      	ldr	r3, [pc, #204]	@ (800a20c <sys_timeout+0x140>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d103      	bne.n	800a14c <sys_timeout+0x80>
    next_timeout = timeout;
 800a144:	4a31      	ldr	r2, [pc, #196]	@ (800a20c <sys_timeout+0x140>)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	6013      	str	r3, [r2, #0]
    return;
 800a14a:	e055      	b.n	800a1f8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a14c:	4b2f      	ldr	r3, [pc, #188]	@ (800a20c <sys_timeout+0x140>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	429a      	cmp	r2, r3
 800a156:	d20f      	bcs.n	800a178 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a158:	4b2c      	ldr	r3, [pc, #176]	@ (800a20c <sys_timeout+0x140>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6859      	ldr	r1, [r3, #4]
 800a15e:	4b2b      	ldr	r3, [pc, #172]	@ (800a20c <sys_timeout+0x140>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	1a8a      	subs	r2, r1, r2
 800a166:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a168:	4b28      	ldr	r3, [pc, #160]	@ (800a20c <sys_timeout+0x140>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a170:	4a26      	ldr	r2, [pc, #152]	@ (800a20c <sys_timeout+0x140>)
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	e03f      	b.n	800a1f8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a178:	4b24      	ldr	r3, [pc, #144]	@ (800a20c <sys_timeout+0x140>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	e036      	b.n	800a1ee <sys_timeout+0x122>
      timeout->time -= t->time;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d006      	beq.n	800a1a4 <sys_timeout+0xd8>
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d921      	bls.n	800a1e8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6859      	ldr	r1, [r3, #4]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	1a8a      	subs	r2, r1, r2
 800a1bc:	605a      	str	r2, [r3, #4]
 800a1be:	e00b      	b.n	800a1d8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d206      	bcs.n	800a1d8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a1ca:	4b10      	ldr	r3, [pc, #64]	@ (800a20c <sys_timeout+0x140>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	441a      	add	r2, r3
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	601a      	str	r2, [r3, #0]
        break;
 800a1e6:	e007      	b.n	800a1f8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	61fb      	str	r3, [r7, #28]
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1c5      	bne.n	800a180 <sys_timeout+0xb4>
 800a1f4:	e000      	b.n	800a1f8 <sys_timeout+0x12c>
    return;
 800a1f6:	bf00      	nop
      }
    }
  }
}
 800a1f8:	3720      	adds	r7, #32
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	0800f070 	.word	0x0800f070
 800a204:	0800f0a4 	.word	0x0800f0a4
 800a208:	0800f0e4 	.word	0x0800f0e4
 800a20c:	20006c9c 	.word	0x20006c9c
 800a210:	20006ca0 	.word	0x20006ca0

0800a214 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a21a:	4b24      	ldr	r3, [pc, #144]	@ (800a2ac <sys_check_timeouts+0x98>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d040      	beq.n	800a2a4 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a222:	f7f9 ff91 	bl	8004148 <sys_now>
 800a226:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a228:	4b21      	ldr	r3, [pc, #132]	@ (800a2b0 <sys_check_timeouts+0x9c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a232:	4b20      	ldr	r3, [pc, #128]	@ (800a2b4 <sys_check_timeouts+0xa0>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <sys_check_timeouts+0x2c>
 800a23c:	f7fa fd7a 	bl	8004d34 <pbuf_free_ooseq>
      had_one = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a244:	4b19      	ldr	r3, [pc, #100]	@ (800a2ac <sys_check_timeouts+0x98>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d026      	beq.n	800a29e <sys_check_timeouts+0x8a>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	429a      	cmp	r2, r3
 800a258:	d321      	bcc.n	800a29e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800a25a:	2301      	movs	r3, #1
 800a25c:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	4b13      	ldr	r3, [pc, #76]	@ (800a2b0 <sys_check_timeouts+0x9c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4413      	add	r3, r2
 800a268:	4a11      	ldr	r2, [pc, #68]	@ (800a2b0 <sys_check_timeouts+0x9c>)
 800a26a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a0c      	ldr	r2, [pc, #48]	@ (800a2ac <sys_check_timeouts+0x98>)
 800a27c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	2006      	movs	r0, #6
 800a28e:	f7fa fbdd 	bl	8004a4c <memp_free>
        if (handler != NULL) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6838      	ldr	r0, [r7, #0]
 800a29c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800a29e:	7cfb      	ldrb	r3, [r7, #19]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1c6      	bne.n	800a232 <sys_check_timeouts+0x1e>
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20006c9c 	.word	0x20006c9c
 800a2b0:	20006ca0 	.word	0x20006ca0
 800a2b4:	20006c49 	.word	0x20006c49

0800a2b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a2bc:	bf00      	nop
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bc80      	pop	{r7}
 800a2c2:	4770      	bx	lr

0800a2c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a2ce:	4b17      	ldr	r3, [pc, #92]	@ (800a32c <udp_new_port+0x68>)
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	b291      	uxth	r1, r2
 800a2d6:	4a15      	ldr	r2, [pc, #84]	@ (800a32c <udp_new_port+0x68>)
 800a2d8:	8011      	strh	r1, [r2, #0]
 800a2da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d103      	bne.n	800a2ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a2e2:	4b12      	ldr	r3, [pc, #72]	@ (800a32c <udp_new_port+0x68>)
 800a2e4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800a2e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2ea:	4b11      	ldr	r3, [pc, #68]	@ (800a330 <udp_new_port+0x6c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	e011      	b.n	800a316 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	8a5a      	ldrh	r2, [r3, #18]
 800a2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a32c <udp_new_port+0x68>)
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d108      	bne.n	800a310 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	3301      	adds	r3, #1
 800a302:	80fb      	strh	r3, [r7, #6]
 800a304:	88fb      	ldrh	r3, [r7, #6]
 800a306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a30a:	d3e0      	bcc.n	800a2ce <udp_new_port+0xa>
        return 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e007      	b.n	800a320 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1ea      	bne.n	800a2f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800a31c:	4b03      	ldr	r3, [pc, #12]	@ (800a32c <udp_new_port+0x68>)
 800a31e:	881b      	ldrh	r3, [r3, #0]
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bc80      	pop	{r7}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	20000010 	.word	0x20000010
 800a330:	20006ca8 	.word	0x20006ca8

0800a334 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4613      	mov	r3, r2
 800a340:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d018      	beq.n	800a37a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d013      	beq.n	800a376 <udp_input_local_match+0x42>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00f      	beq.n	800a376 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a356:	4b13      	ldr	r3, [pc, #76]	@ (800a3a4 <udp_input_local_match+0x70>)
 800a358:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35e:	d00a      	beq.n	800a376 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	4b0f      	ldr	r3, [pc, #60]	@ (800a3a4 <udp_input_local_match+0x70>)
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	405a      	eors	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	3308      	adds	r3, #8
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a372:	2b00      	cmp	r3, #0
 800a374:	d110      	bne.n	800a398 <udp_input_local_match+0x64>
          return 1;
 800a376:	2301      	movs	r3, #1
 800a378:	e00f      	b.n	800a39a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d009      	beq.n	800a394 <udp_input_local_match+0x60>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <udp_input_local_match+0x60>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <udp_input_local_match+0x70>)
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	429a      	cmp	r2, r3
 800a392:	d101      	bne.n	800a398 <udp_input_local_match+0x64>
      return 1;
 800a394:	2301      	movs	r3, #1
 800a396:	e000      	b.n	800a39a <udp_input_local_match+0x66>
    }
  }

  return 0;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bc80      	pop	{r7}
 800a3a2:	4770      	bx	lr
 800a3a4:	200036f0 	.word	0x200036f0

0800a3a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b08d      	sub	sp, #52	@ 0x34
 800a3ac:	af02      	add	r7, sp, #8
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	895b      	ldrh	r3, [r3, #10]
 800a3ba:	2b07      	cmp	r3, #7
 800a3bc:	d803      	bhi.n	800a3c6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7fb f860 	bl	8005484 <pbuf_free>
    goto end;
 800a3c4:	e0c6      	b.n	800a554 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a3cc:	4b63      	ldr	r3, [pc, #396]	@ (800a55c <udp_input+0x1b4>)
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	4a62      	ldr	r2, [pc, #392]	@ (800a55c <udp_input+0x1b4>)
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f001 fd80 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7f9 ff3b 	bl	8004262 <lwip_htons>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	885b      	ldrh	r3, [r3, #2]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f9 ff33 	bl	8004262 <lwip_htons>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800a404:	2300      	movs	r3, #0
 800a406:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a40c:	4b54      	ldr	r3, [pc, #336]	@ (800a560 <udp_input+0x1b8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	627b      	str	r3, [r7, #36]	@ 0x24
 800a412:	e03b      	b.n	800a48c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	8a5b      	ldrh	r3, [r3, #18]
 800a418:	89fa      	ldrh	r2, [r7, #14]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d131      	bne.n	800a482 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a41e:	7cfb      	ldrb	r3, [r7, #19]
 800a420:	461a      	mov	r2, r3
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a426:	f7ff ff85 	bl	800a334 <udp_input_local_match>
 800a42a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d028      	beq.n	800a482 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	7c1b      	ldrb	r3, [r3, #16]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d104      	bne.n	800a446 <udp_input+0x9e>
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800a442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a444:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a448:	8a9b      	ldrh	r3, [r3, #20]
 800a44a:	8a3a      	ldrh	r2, [r7, #16]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d118      	bne.n	800a482 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a452:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	4b3f      	ldr	r3, [pc, #252]	@ (800a55c <udp_input+0x1b4>)
 800a45e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a460:	429a      	cmp	r2, r3
 800a462:	d10e      	bne.n	800a482 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d014      	beq.n	800a494 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	68da      	ldr	r2, [r3, #12]
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a472:	4b3b      	ldr	r3, [pc, #236]	@ (800a560 <udp_input+0x1b8>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a47a:	4a39      	ldr	r2, [pc, #228]	@ (800a560 <udp_input+0x1b8>)
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a480:	e008      	b.n	800a494 <udp_input+0xec>
      }
    }

    prev = pcb;
 800a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a484:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1c0      	bne.n	800a414 <udp_input+0x6c>
 800a492:	e000      	b.n	800a496 <udp_input+0xee>
        break;
 800a494:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <udp_input+0xf8>
    pcb = uncon_pcb;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <udp_input+0x104>
    for_us = 1;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	76fb      	strb	r3, [r7, #27]
 800a4aa:	e00a      	b.n	800a4c2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b2a      	ldr	r3, [pc, #168]	@ (800a55c <udp_input+0x1b4>)
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	bf0c      	ite	eq
 800a4ba:	2301      	moveq	r3, #1
 800a4bc:	2300      	movne	r3, #0
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a4c2:	7efb      	ldrb	r3, [r7, #27]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d042      	beq.n	800a54e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800a4c8:	f06f 0107 	mvn.w	r1, #7
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7fa ffb5 	bl	800543c <pbuf_header>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00a      	beq.n	800a4ee <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a4d8:	4b22      	ldr	r3, [pc, #136]	@ (800a564 <udp_input+0x1bc>)
 800a4da:	f240 1255 	movw	r2, #341	@ 0x155
 800a4de:	4922      	ldr	r1, [pc, #136]	@ (800a568 <udp_input+0x1c0>)
 800a4e0:	4822      	ldr	r0, [pc, #136]	@ (800a56c <udp_input+0x1c4>)
 800a4e2:	f002 fca7 	bl	800ce34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7fa ffcc 	bl	8005484 <pbuf_free>
      goto end;
 800a4ec:	e032      	b.n	800a554 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d012      	beq.n	800a51a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00a      	beq.n	800a512 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fe:	699c      	ldr	r4, [r3, #24]
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	69d8      	ldr	r0, [r3, #28]
 800a504:	8a3b      	ldrh	r3, [r7, #16]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	4b19      	ldr	r3, [pc, #100]	@ (800a570 <udp_input+0x1c8>)
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a50e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a510:	e021      	b.n	800a556 <udp_input+0x1ae>
        pbuf_free(p);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7fa ffb6 	bl	8005484 <pbuf_free>
        goto end;
 800a518:	e01c      	b.n	800a554 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a51a:	7cfb      	ldrb	r3, [r7, #19]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d112      	bne.n	800a546 <udp_input+0x19e>
 800a520:	4b0e      	ldr	r3, [pc, #56]	@ (800a55c <udp_input+0x1b4>)
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a528:	2be0      	cmp	r3, #224	@ 0xe0
 800a52a:	d00c      	beq.n	800a546 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a52c:	4b0b      	ldr	r3, [pc, #44]	@ (800a55c <udp_input+0x1b4>)
 800a52e:	899b      	ldrh	r3, [r3, #12]
 800a530:	3308      	adds	r3, #8
 800a532:	b29b      	uxth	r3, r3
 800a534:	b21b      	sxth	r3, r3
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7fa ff91 	bl	8005460 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a53e:	2103      	movs	r1, #3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 f9c9 	bl	800b8d8 <icmp_dest_unreach>
      pbuf_free(p);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7fa ff9c 	bl	8005484 <pbuf_free>
  return;
 800a54c:	e003      	b.n	800a556 <udp_input+0x1ae>
    pbuf_free(p);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7fa ff98 	bl	8005484 <pbuf_free>
  return;
 800a554:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a556:	372c      	adds	r7, #44	@ 0x2c
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd90      	pop	{r4, r7, pc}
 800a55c:	200036f0 	.word	0x200036f0
 800a560:	20006ca8 	.word	0x20006ca8
 800a564:	0800f10c 	.word	0x0800f10c
 800a568:	0800f13c 	.word	0x0800f13c
 800a56c:	0800f150 	.word	0x0800f150
 800a570:	20003700 	.word	0x20003700

0800a574 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af02      	add	r7, sp, #8
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <udp_sendto+0x1e>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <udp_sendto+0x24>
    return ERR_VAL;
 800a592:	f06f 0305 	mvn.w	r3, #5
 800a596:	e013      	b.n	800a5c0 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800a598:	6978      	ldr	r0, [r7, #20]
 800a59a:	f001 fa25 	bl	800b9e8 <ip4_route>
 800a59e:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d102      	bne.n	800a5ac <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800a5a6:	f06f 0303 	mvn.w	r3, #3
 800a5aa:	e009      	b.n	800a5c0 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800a5ac:	887a      	ldrh	r2, [r7, #2]
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 f805 	bl	800a5c8 <udp_sendto_if>
 800a5be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <udp_sendto_if+0x1a>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d102      	bne.n	800a5e8 <udp_sendto_if+0x20>
    return ERR_VAL;
 800a5e2:	f06f 0305 	mvn.w	r3, #5
 800a5e6:	e028      	b.n	800a63a <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d009      	beq.n	800a602 <udp_sendto_if+0x3a>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d005      	beq.n	800a602 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a5fe:	2be0      	cmp	r3, #224	@ 0xe0
 800a600:	d103      	bne.n	800a60a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	3304      	adds	r3, #4
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	e00b      	b.n	800a622 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	3304      	adds	r3, #4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d002      	beq.n	800a61e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800a618:	f06f 0303 	mvn.w	r3, #3
 800a61c:	e00d      	b.n	800a63a <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a622:	887a      	ldrh	r2, [r7, #2]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4613      	mov	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f806 	bl	800a644 <udp_sendto_if_src>
 800a638:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08c      	sub	sp, #48	@ 0x30
 800a648:	af04      	add	r7, sp, #16
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <udp_sendto_if_src+0x1a>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d102      	bne.n	800a664 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800a65e:	f06f 0305 	mvn.w	r3, #5
 800a662:	e07e      	b.n	800a762 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	8a5b      	ldrh	r3, [r3, #18]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10f      	bne.n	800a68c <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a66c:	68f9      	ldr	r1, [r7, #12]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	8a5b      	ldrh	r3, [r3, #18]
 800a672:	461a      	mov	r2, r3
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f87f 	bl	800a778 <udp_bind>
 800a67a:	4603      	mov	r3, r0
 800a67c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800a67e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800a686:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a68a:	e06a      	b.n	800a762 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800a68c:	2108      	movs	r1, #8
 800a68e:	68b8      	ldr	r0, [r7, #8]
 800a690:	f7fa fed4 	bl	800543c <pbuf_header>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d014      	beq.n	800a6c4 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a69a:	2200      	movs	r2, #0
 800a69c:	2108      	movs	r1, #8
 800a69e:	2001      	movs	r0, #1
 800a6a0:	f7fa fb78 	bl	8004d94 <pbuf_alloc>
 800a6a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800a6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b0:	e057      	b.n	800a762 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	891b      	ldrh	r3, [r3, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d006      	beq.n	800a6c8 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800a6ba:	68b9      	ldr	r1, [r7, #8]
 800a6bc:	69f8      	ldr	r0, [r7, #28]
 800a6be:	f7fb f803 	bl	80056c8 <pbuf_chain>
 800a6c2:	e001      	b.n	800a6c8 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	895b      	ldrh	r3, [r3, #10]
 800a6cc:	2b07      	cmp	r3, #7
 800a6ce:	d806      	bhi.n	800a6de <udp_sendto_if_src+0x9a>
 800a6d0:	4b26      	ldr	r3, [pc, #152]	@ (800a76c <udp_sendto_if_src+0x128>)
 800a6d2:	f240 22db 	movw	r2, #731	@ 0x2db
 800a6d6:	4926      	ldr	r1, [pc, #152]	@ (800a770 <udp_sendto_if_src+0x12c>)
 800a6d8:	4826      	ldr	r0, [pc, #152]	@ (800a774 <udp_sendto_if_src+0x130>)
 800a6da:	f002 fbab 	bl	800ce34 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	8a5b      	ldrh	r3, [r3, #18]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7f9 fdba 	bl	8004262 <lwip_htons>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800a6f6:	887b      	ldrh	r3, [r7, #2]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7f9 fdb2 	bl	8004262 <lwip_htons>
 800a6fe:	4603      	mov	r3, r0
 800a700:	461a      	mov	r2, r3
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2200      	movs	r2, #0
 800a70a:	719a      	strb	r2, [r3, #6]
 800a70c:	2200      	movs	r2, #0
 800a70e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	891b      	ldrh	r3, [r3, #8]
 800a714:	4618      	mov	r0, r3
 800a716:	f7f9 fda4 	bl	8004262 <lwip_htons>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800a722:	2311      	movs	r3, #17
 800a724:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	7a9b      	ldrb	r3, [r3, #10]
 800a72a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	7a5b      	ldrb	r3, [r3, #9]
 800a730:	7cb9      	ldrb	r1, [r7, #18]
 800a732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a734:	9202      	str	r2, [sp, #8]
 800a736:	7cfa      	ldrb	r2, [r7, #19]
 800a738:	9201      	str	r2, [sp, #4]
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	460b      	mov	r3, r1
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a742:	69f8      	ldr	r0, [r7, #28]
 800a744:	f001 fb22 	bl	800bd8c <ip4_output_if_src>
 800a748:	4603      	mov	r3, r0
 800a74a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	429a      	cmp	r2, r3
 800a752:	d004      	beq.n	800a75e <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800a754:	69f8      	ldr	r0, [r7, #28]
 800a756:	f7fa fe95 	bl	8005484 <pbuf_free>
    q = NULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800a75e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3720      	adds	r7, #32
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	0800f10c 	.word	0x0800f10c
 800a770:	0800f178 	.word	0x0800f178
 800a774:	0800f150 	.word	0x0800f150

0800a778 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800a78c:	4b30      	ldr	r3, [pc, #192]	@ (800a850 <udp_bind+0xd8>)
 800a78e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <udp_bind+0x24>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <udp_bind+0x2a>
    return ERR_VAL;
 800a79c:	f06f 0305 	mvn.w	r3, #5
 800a7a0:	e052      	b.n	800a848 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a7a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a854 <udp_bind+0xdc>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	e009      	b.n	800a7c2 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d102      	bne.n	800a7bc <udp_bind+0x44>
      rebind = 1;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	74fb      	strb	r3, [r7, #19]
      break;
 800a7ba:	e005      	b.n	800a7c8 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	617b      	str	r3, [r7, #20]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1f2      	bne.n	800a7ae <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a7c8:	88fb      	ldrh	r3, [r7, #6]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d109      	bne.n	800a7e2 <udp_bind+0x6a>
    port = udp_new_port();
 800a7ce:	f7ff fd79 	bl	800a2c4 <udp_new_port>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a7d6:	88fb      	ldrh	r3, [r7, #6]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d11e      	bne.n	800a81a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800a7dc:	f06f 0307 	mvn.w	r3, #7
 800a7e0:	e032      	b.n	800a848 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a7e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a854 <udp_bind+0xdc>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e014      	b.n	800a814 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d00d      	beq.n	800a80e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	8a5b      	ldrh	r3, [r3, #18]
 800a7f6:	88fa      	ldrh	r2, [r7, #6]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d108      	bne.n	800a80e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800a804:	429a      	cmp	r2, r3
 800a806:	d102      	bne.n	800a80e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800a808:	f06f 0307 	mvn.w	r3, #7
 800a80c:	e01c      	b.n	800a848 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1e7      	bne.n	800a7ea <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <udp_bind+0xae>
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	e000      	b.n	800a828 <udp_bind+0xb0>
 800a826:	2300      	movs	r3, #0
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	88fa      	ldrh	r2, [r7, #6]
 800a830:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a832:	7cfb      	ldrb	r3, [r7, #19]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d106      	bne.n	800a846 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a838:	4b06      	ldr	r3, [pc, #24]	@ (800a854 <udp_bind+0xdc>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800a840:	4a04      	ldr	r2, [pc, #16]	@ (800a854 <udp_bind+0xdc>)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	0800f90c 	.word	0x0800f90c
 800a854:	20006ca8 	.word	0x20006ca8

0800a858 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	61da      	str	r2, [r3, #28]
}
 800a870:	bf00      	nop
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr

0800a87a <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a880:	2000      	movs	r0, #0
 800a882:	f7fa f897 	bl	80049b4 <memp_malloc>
 800a886:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d007      	beq.n	800a89e <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a88e:	2220      	movs	r2, #32
 800a890:	2100      	movs	r1, #0
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f002 fb33 	bl	800cefe <memset>
    pcb->ttl = UDP_TTL;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	22ff      	movs	r2, #255	@ 0xff
 800a89c:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800a89e:	687b      	ldr	r3, [r7, #4]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d01e      	beq.n	800a8f6 <udp_netif_ip_addr_changed+0x4e>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d01a      	beq.n	800a8f6 <udp_netif_ip_addr_changed+0x4e>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d017      	beq.n	800a8f6 <udp_netif_ip_addr_changed+0x4e>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d013      	beq.n	800a8f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a900 <udp_netif_ip_addr_changed+0x58>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e00c      	b.n	800a8f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d103      	bne.n	800a8ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1ef      	bne.n	800a8d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr
 800a900:	20006ca8 	.word	0x20006ca8

0800a904 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a90c:	4915      	ldr	r1, [pc, #84]	@ (800a964 <etharp_free_entry+0x60>)
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	4613      	mov	r3, r2
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	4413      	add	r3, r2
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	440b      	add	r3, r1
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d013      	beq.n	800a948 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a920:	4910      	ldr	r1, [pc, #64]	@ (800a964 <etharp_free_entry+0x60>)
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4613      	mov	r3, r2
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	4413      	add	r3, r2
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	440b      	add	r3, r1
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4618      	mov	r0, r3
 800a932:	f7fa fda7 	bl	8005484 <pbuf_free>
    arp_table[i].q = NULL;
 800a936:	490b      	ldr	r1, [pc, #44]	@ (800a964 <etharp_free_entry+0x60>)
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	005b      	lsls	r3, r3, #1
 800a93e:	4413      	add	r3, r2
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	440b      	add	r3, r1
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a948:	4906      	ldr	r1, [pc, #24]	@ (800a964 <etharp_free_entry+0x60>)
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	4613      	mov	r3, r2
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	4413      	add	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	440b      	add	r3, r1
 800a956:	3314      	adds	r3, #20
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20006cac 	.word	0x20006cac

0800a968 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a96e:	2300      	movs	r3, #0
 800a970:	71fb      	strb	r3, [r7, #7]
 800a972:	e096      	b.n	800aaa2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a974:	79fa      	ldrb	r2, [r7, #7]
 800a976:	494f      	ldr	r1, [pc, #316]	@ (800aab4 <etharp_tmr+0x14c>)
 800a978:	4613      	mov	r3, r2
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	4413      	add	r3, r2
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	440b      	add	r3, r1
 800a982:	3314      	adds	r3, #20
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800a988:	79bb      	ldrb	r3, [r7, #6]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 8086 	beq.w	800aa9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800a990:	79fa      	ldrb	r2, [r7, #7]
 800a992:	4948      	ldr	r1, [pc, #288]	@ (800aab4 <etharp_tmr+0x14c>)
 800a994:	4613      	mov	r3, r2
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	440b      	add	r3, r1
 800a99e:	3312      	adds	r3, #18
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	b298      	uxth	r0, r3
 800a9a6:	4943      	ldr	r1, [pc, #268]	@ (800aab4 <etharp_tmr+0x14c>)
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	440b      	add	r3, r1
 800a9b2:	3312      	adds	r3, #18
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a9b8:	79fa      	ldrb	r2, [r7, #7]
 800a9ba:	493e      	ldr	r1, [pc, #248]	@ (800aab4 <etharp_tmr+0x14c>)
 800a9bc:	4613      	mov	r3, r2
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	4413      	add	r3, r2
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	440b      	add	r3, r1
 800a9c6:	3312      	adds	r3, #18
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a9ce:	d215      	bcs.n	800a9fc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a9d0:	79fa      	ldrb	r2, [r7, #7]
 800a9d2:	4938      	ldr	r1, [pc, #224]	@ (800aab4 <etharp_tmr+0x14c>)
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	4413      	add	r3, r2
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	440b      	add	r3, r1
 800a9de:	3314      	adds	r3, #20
 800a9e0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d10f      	bne.n	800aa06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a9e6:	79fa      	ldrb	r2, [r7, #7]
 800a9e8:	4932      	ldr	r1, [pc, #200]	@ (800aab4 <etharp_tmr+0x14c>)
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	4413      	add	r3, r2
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	440b      	add	r3, r1
 800a9f4:	3312      	adds	r3, #18
 800a9f6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	d904      	bls.n	800aa06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a9fc:	79fb      	ldrb	r3, [r7, #7]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff ff80 	bl	800a904 <etharp_free_entry>
 800aa04:	e04a      	b.n	800aa9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800aa06:	79fa      	ldrb	r2, [r7, #7]
 800aa08:	492a      	ldr	r1, [pc, #168]	@ (800aab4 <etharp_tmr+0x14c>)
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	4413      	add	r3, r2
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	440b      	add	r3, r1
 800aa14:	3314      	adds	r3, #20
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d10a      	bne.n	800aa32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800aa1c:	79fa      	ldrb	r2, [r7, #7]
 800aa1e:	4925      	ldr	r1, [pc, #148]	@ (800aab4 <etharp_tmr+0x14c>)
 800aa20:	4613      	mov	r3, r2
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	4413      	add	r3, r2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	440b      	add	r3, r1
 800aa2a:	3314      	adds	r3, #20
 800aa2c:	2204      	movs	r2, #4
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	e034      	b.n	800aa9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800aa32:	79fa      	ldrb	r2, [r7, #7]
 800aa34:	491f      	ldr	r1, [pc, #124]	@ (800aab4 <etharp_tmr+0x14c>)
 800aa36:	4613      	mov	r3, r2
 800aa38:	005b      	lsls	r3, r3, #1
 800aa3a:	4413      	add	r3, r2
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	440b      	add	r3, r1
 800aa40:	3314      	adds	r3, #20
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d10a      	bne.n	800aa5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800aa48:	79fa      	ldrb	r2, [r7, #7]
 800aa4a:	491a      	ldr	r1, [pc, #104]	@ (800aab4 <etharp_tmr+0x14c>)
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	4413      	add	r3, r2
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	440b      	add	r3, r1
 800aa56:	3314      	adds	r3, #20
 800aa58:	2202      	movs	r2, #2
 800aa5a:	701a      	strb	r2, [r3, #0]
 800aa5c:	e01e      	b.n	800aa9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800aa5e:	79fa      	ldrb	r2, [r7, #7]
 800aa60:	4914      	ldr	r1, [pc, #80]	@ (800aab4 <etharp_tmr+0x14c>)
 800aa62:	4613      	mov	r3, r2
 800aa64:	005b      	lsls	r3, r3, #1
 800aa66:	4413      	add	r3, r2
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	440b      	add	r3, r1
 800aa6c:	3314      	adds	r3, #20
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d113      	bne.n	800aa9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800aa74:	79fa      	ldrb	r2, [r7, #7]
 800aa76:	490f      	ldr	r1, [pc, #60]	@ (800aab4 <etharp_tmr+0x14c>)
 800aa78:	4613      	mov	r3, r2
 800aa7a:	005b      	lsls	r3, r3, #1
 800aa7c:	4413      	add	r3, r2
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	440b      	add	r3, r1
 800aa82:	3308      	adds	r3, #8
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	79fa      	ldrb	r2, [r7, #7]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	4413      	add	r3, r2
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	4a08      	ldr	r2, [pc, #32]	@ (800aab4 <etharp_tmr+0x14c>)
 800aa92:	4413      	add	r3, r2
 800aa94:	3304      	adds	r3, #4
 800aa96:	4619      	mov	r1, r3
 800aa98:	f000 fe06 	bl	800b6a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	71fb      	strb	r3, [r7, #7]
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	2b09      	cmp	r3, #9
 800aaa6:	f67f af65 	bls.w	800a974 <etharp_tmr+0xc>
      }
    }
  }
}
 800aaaa:	bf00      	nop
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	20006cac 	.word	0x20006cac

0800aab8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	460b      	mov	r3, r1
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800aac6:	230a      	movs	r3, #10
 800aac8:	77fb      	strb	r3, [r7, #31]
 800aaca:	230a      	movs	r3, #10
 800aacc:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800aace:	230a      	movs	r3, #10
 800aad0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800aad6:	230a      	movs	r3, #10
 800aad8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	833b      	strh	r3, [r7, #24]
 800aade:	2300      	movs	r3, #0
 800aae0:	82fb      	strh	r3, [r7, #22]
 800aae2:	2300      	movs	r3, #0
 800aae4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aae6:	2300      	movs	r3, #0
 800aae8:	773b      	strb	r3, [r7, #28]
 800aaea:	e093      	b.n	800ac14 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800aaec:	7f3a      	ldrb	r2, [r7, #28]
 800aaee:	4990      	ldr	r1, [pc, #576]	@ (800ad30 <etharp_find_entry+0x278>)
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	4413      	add	r3, r2
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	440b      	add	r3, r1
 800aafa:	3314      	adds	r3, #20
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ab00:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ab04:	2b0a      	cmp	r3, #10
 800ab06:	d105      	bne.n	800ab14 <etharp_find_entry+0x5c>
 800ab08:	7cfb      	ldrb	r3, [r7, #19]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800ab0e:	7f3b      	ldrb	r3, [r7, #28]
 800ab10:	777b      	strb	r3, [r7, #29]
 800ab12:	e07c      	b.n	800ac0e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ab14:	7cfb      	ldrb	r3, [r7, #19]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d079      	beq.n	800ac0e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ab1a:	7cfb      	ldrb	r3, [r7, #19]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d009      	beq.n	800ab34 <etharp_find_entry+0x7c>
 800ab20:	7cfb      	ldrb	r3, [r7, #19]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d806      	bhi.n	800ab34 <etharp_find_entry+0x7c>
 800ab26:	4b83      	ldr	r3, [pc, #524]	@ (800ad34 <etharp_find_entry+0x27c>)
 800ab28:	f240 1225 	movw	r2, #293	@ 0x125
 800ab2c:	4982      	ldr	r1, [pc, #520]	@ (800ad38 <etharp_find_entry+0x280>)
 800ab2e:	4883      	ldr	r0, [pc, #524]	@ (800ad3c <etharp_find_entry+0x284>)
 800ab30:	f002 f980 	bl	800ce34 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00f      	beq.n	800ab5a <etharp_find_entry+0xa2>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6819      	ldr	r1, [r3, #0]
 800ab3e:	7f3a      	ldrb	r2, [r7, #28]
 800ab40:	487b      	ldr	r0, [pc, #492]	@ (800ad30 <etharp_find_entry+0x278>)
 800ab42:	4613      	mov	r3, r2
 800ab44:	005b      	lsls	r3, r3, #1
 800ab46:	4413      	add	r3, r2
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	4403      	add	r3, r0
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4299      	cmp	r1, r3
 800ab52:	d102      	bne.n	800ab5a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ab54:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ab58:	e0e5      	b.n	800ad26 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ab5a:	7cfb      	ldrb	r3, [r7, #19]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d13b      	bne.n	800abd8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ab60:	7f3a      	ldrb	r2, [r7, #28]
 800ab62:	4973      	ldr	r1, [pc, #460]	@ (800ad30 <etharp_find_entry+0x278>)
 800ab64:	4613      	mov	r3, r2
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	4413      	add	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	440b      	add	r3, r1
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d018      	beq.n	800aba6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800ab74:	7f3a      	ldrb	r2, [r7, #28]
 800ab76:	496e      	ldr	r1, [pc, #440]	@ (800ad30 <etharp_find_entry+0x278>)
 800ab78:	4613      	mov	r3, r2
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	4413      	add	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	440b      	add	r3, r1
 800ab82:	3312      	adds	r3, #18
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	8b3a      	ldrh	r2, [r7, #24]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d840      	bhi.n	800ac0e <etharp_find_entry+0x156>
            old_queue = i;
 800ab8c:	7f3b      	ldrb	r3, [r7, #28]
 800ab8e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800ab90:	7f3a      	ldrb	r2, [r7, #28]
 800ab92:	4967      	ldr	r1, [pc, #412]	@ (800ad30 <etharp_find_entry+0x278>)
 800ab94:	4613      	mov	r3, r2
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	4413      	add	r3, r2
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	440b      	add	r3, r1
 800ab9e:	3312      	adds	r3, #18
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	833b      	strh	r3, [r7, #24]
 800aba4:	e033      	b.n	800ac0e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800aba6:	7f3a      	ldrb	r2, [r7, #28]
 800aba8:	4961      	ldr	r1, [pc, #388]	@ (800ad30 <etharp_find_entry+0x278>)
 800abaa:	4613      	mov	r3, r2
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	4413      	add	r3, r2
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	440b      	add	r3, r1
 800abb4:	3312      	adds	r3, #18
 800abb6:	881b      	ldrh	r3, [r3, #0]
 800abb8:	8afa      	ldrh	r2, [r7, #22]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d827      	bhi.n	800ac0e <etharp_find_entry+0x156>
            old_pending = i;
 800abbe:	7f3b      	ldrb	r3, [r7, #28]
 800abc0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800abc2:	7f3a      	ldrb	r2, [r7, #28]
 800abc4:	495a      	ldr	r1, [pc, #360]	@ (800ad30 <etharp_find_entry+0x278>)
 800abc6:	4613      	mov	r3, r2
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	4413      	add	r3, r2
 800abcc:	00db      	lsls	r3, r3, #3
 800abce:	440b      	add	r3, r1
 800abd0:	3312      	adds	r3, #18
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	82fb      	strh	r3, [r7, #22]
 800abd6:	e01a      	b.n	800ac0e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800abd8:	7cfb      	ldrb	r3, [r7, #19]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d917      	bls.n	800ac0e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800abde:	7f3a      	ldrb	r2, [r7, #28]
 800abe0:	4953      	ldr	r1, [pc, #332]	@ (800ad30 <etharp_find_entry+0x278>)
 800abe2:	4613      	mov	r3, r2
 800abe4:	005b      	lsls	r3, r3, #1
 800abe6:	4413      	add	r3, r2
 800abe8:	00db      	lsls	r3, r3, #3
 800abea:	440b      	add	r3, r1
 800abec:	3312      	adds	r3, #18
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	8aba      	ldrh	r2, [r7, #20]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d80b      	bhi.n	800ac0e <etharp_find_entry+0x156>
            old_stable = i;
 800abf6:	7f3b      	ldrb	r3, [r7, #28]
 800abf8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800abfa:	7f3a      	ldrb	r2, [r7, #28]
 800abfc:	494c      	ldr	r1, [pc, #304]	@ (800ad30 <etharp_find_entry+0x278>)
 800abfe:	4613      	mov	r3, r2
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	4413      	add	r3, r2
 800ac04:	00db      	lsls	r3, r3, #3
 800ac06:	440b      	add	r3, r1
 800ac08:	3312      	adds	r3, #18
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ac0e:	7f3b      	ldrb	r3, [r7, #28]
 800ac10:	3301      	adds	r3, #1
 800ac12:	773b      	strb	r3, [r7, #28]
 800ac14:	7f3b      	ldrb	r3, [r7, #28]
 800ac16:	2b09      	cmp	r3, #9
 800ac18:	f67f af68 	bls.w	800aaec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d108      	bne.n	800ac38 <etharp_find_entry+0x180>
 800ac26:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ac2a:	2b0a      	cmp	r3, #10
 800ac2c:	d107      	bne.n	800ac3e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ac2e:	7afb      	ldrb	r3, [r7, #11]
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d102      	bne.n	800ac3e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800ac38:	f04f 33ff 	mov.w	r3, #4294967295
 800ac3c:	e073      	b.n	800ad26 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ac3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ac42:	2b09      	cmp	r3, #9
 800ac44:	dc02      	bgt.n	800ac4c <etharp_find_entry+0x194>
    i = empty;
 800ac46:	7f7b      	ldrb	r3, [r7, #29]
 800ac48:	773b      	strb	r3, [r7, #28]
 800ac4a:	e036      	b.n	800acba <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ac4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ac50:	2b09      	cmp	r3, #9
 800ac52:	dc13      	bgt.n	800ac7c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800ac54:	7fbb      	ldrb	r3, [r7, #30]
 800ac56:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ac58:	7f3a      	ldrb	r2, [r7, #28]
 800ac5a:	4935      	ldr	r1, [pc, #212]	@ (800ad30 <etharp_find_entry+0x278>)
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	4413      	add	r3, r2
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	440b      	add	r3, r1
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d018      	beq.n	800ac9e <etharp_find_entry+0x1e6>
 800ac6c:	4b31      	ldr	r3, [pc, #196]	@ (800ad34 <etharp_find_entry+0x27c>)
 800ac6e:	f240 126f 	movw	r2, #367	@ 0x16f
 800ac72:	4933      	ldr	r1, [pc, #204]	@ (800ad40 <etharp_find_entry+0x288>)
 800ac74:	4831      	ldr	r0, [pc, #196]	@ (800ad3c <etharp_find_entry+0x284>)
 800ac76:	f002 f8dd 	bl	800ce34 <iprintf>
 800ac7a:	e010      	b.n	800ac9e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ac7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	dc02      	bgt.n	800ac8a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800ac84:	7ffb      	ldrb	r3, [r7, #31]
 800ac86:	773b      	strb	r3, [r7, #28]
 800ac88:	e009      	b.n	800ac9e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ac8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ac8e:	2b09      	cmp	r3, #9
 800ac90:	dc02      	bgt.n	800ac98 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ac92:	7efb      	ldrb	r3, [r7, #27]
 800ac94:	773b      	strb	r3, [r7, #28]
 800ac96:	e002      	b.n	800ac9e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9c:	e043      	b.n	800ad26 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ac9e:	7f3b      	ldrb	r3, [r7, #28]
 800aca0:	2b09      	cmp	r3, #9
 800aca2:	d906      	bls.n	800acb2 <etharp_find_entry+0x1fa>
 800aca4:	4b23      	ldr	r3, [pc, #140]	@ (800ad34 <etharp_find_entry+0x27c>)
 800aca6:	f240 1281 	movw	r2, #385	@ 0x181
 800acaa:	4926      	ldr	r1, [pc, #152]	@ (800ad44 <etharp_find_entry+0x28c>)
 800acac:	4823      	ldr	r0, [pc, #140]	@ (800ad3c <etharp_find_entry+0x284>)
 800acae:	f002 f8c1 	bl	800ce34 <iprintf>
    etharp_free_entry(i);
 800acb2:	7f3b      	ldrb	r3, [r7, #28]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff fe25 	bl	800a904 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800acba:	7f3b      	ldrb	r3, [r7, #28]
 800acbc:	2b09      	cmp	r3, #9
 800acbe:	d906      	bls.n	800acce <etharp_find_entry+0x216>
 800acc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad34 <etharp_find_entry+0x27c>)
 800acc2:	f240 1285 	movw	r2, #389	@ 0x185
 800acc6:	491f      	ldr	r1, [pc, #124]	@ (800ad44 <etharp_find_entry+0x28c>)
 800acc8:	481c      	ldr	r0, [pc, #112]	@ (800ad3c <etharp_find_entry+0x284>)
 800acca:	f002 f8b3 	bl	800ce34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800acce:	7f3a      	ldrb	r2, [r7, #28]
 800acd0:	4917      	ldr	r1, [pc, #92]	@ (800ad30 <etharp_find_entry+0x278>)
 800acd2:	4613      	mov	r3, r2
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	4413      	add	r3, r2
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	440b      	add	r3, r1
 800acdc:	3314      	adds	r3, #20
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d006      	beq.n	800acf2 <etharp_find_entry+0x23a>
 800ace4:	4b13      	ldr	r3, [pc, #76]	@ (800ad34 <etharp_find_entry+0x27c>)
 800ace6:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 800acea:	4917      	ldr	r1, [pc, #92]	@ (800ad48 <etharp_find_entry+0x290>)
 800acec:	4813      	ldr	r0, [pc, #76]	@ (800ad3c <etharp_find_entry+0x284>)
 800acee:	f002 f8a1 	bl	800ce34 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00a      	beq.n	800ad0e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800acf8:	7f3a      	ldrb	r2, [r7, #28]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6819      	ldr	r1, [r3, #0]
 800acfe:	480c      	ldr	r0, [pc, #48]	@ (800ad30 <etharp_find_entry+0x278>)
 800ad00:	4613      	mov	r3, r2
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	4413      	add	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	4403      	add	r3, r0
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ad0e:	7f3a      	ldrb	r2, [r7, #28]
 800ad10:	4907      	ldr	r1, [pc, #28]	@ (800ad30 <etharp_find_entry+0x278>)
 800ad12:	4613      	mov	r3, r2
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4413      	add	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3312      	adds	r3, #18
 800ad1e:	2200      	movs	r2, #0
 800ad20:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800ad22:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20006cac 	.word	0x20006cac
 800ad34:	0800f1a8 	.word	0x0800f1a8
 800ad38:	0800f1e0 	.word	0x0800f1e0
 800ad3c:	0800f220 	.word	0x0800f220
 800ad40:	0800f248 	.word	0x0800f248
 800ad44:	0800f260 	.word	0x0800f260
 800ad48:	0800f274 	.word	0x0800f274

0800ad4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad60:	2b06      	cmp	r3, #6
 800ad62:	d006      	beq.n	800ad72 <etharp_update_arp_entry+0x26>
 800ad64:	4b48      	ldr	r3, [pc, #288]	@ (800ae88 <etharp_update_arp_entry+0x13c>)
 800ad66:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800ad6a:	4948      	ldr	r1, [pc, #288]	@ (800ae8c <etharp_update_arp_entry+0x140>)
 800ad6c:	4848      	ldr	r0, [pc, #288]	@ (800ae90 <etharp_update_arp_entry+0x144>)
 800ad6e:	f002 f861 	bl	800ce34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d012      	beq.n	800ad9e <etharp_update_arp_entry+0x52>
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00e      	beq.n	800ad9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68f9      	ldr	r1, [r7, #12]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 f8a8 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800ad8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d105      	bne.n	800ad9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ad9a:	2be0      	cmp	r3, #224	@ 0xe0
 800ad9c:	d102      	bne.n	800ada4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ad9e:	f06f 030f 	mvn.w	r3, #15
 800ada2:	e06c      	b.n	800ae7e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	4619      	mov	r1, r3
 800adaa:	68b8      	ldr	r0, [r7, #8]
 800adac:	f7ff fe84 	bl	800aab8 <etharp_find_entry>
 800adb0:	4603      	mov	r3, r0
 800adb2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800adb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	da02      	bge.n	800adc2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800adbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adc0:	e05d      	b.n	800ae7e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800adc2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800adc6:	4933      	ldr	r1, [pc, #204]	@ (800ae94 <etharp_update_arp_entry+0x148>)
 800adc8:	4613      	mov	r3, r2
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	4413      	add	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	440b      	add	r3, r1
 800add2:	3314      	adds	r3, #20
 800add4:	2202      	movs	r2, #2
 800add6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800add8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800addc:	492d      	ldr	r1, [pc, #180]	@ (800ae94 <etharp_update_arp_entry+0x148>)
 800adde:	4613      	mov	r3, r2
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	4413      	add	r3, r2
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	440b      	add	r3, r1
 800ade8:	3308      	adds	r3, #8
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800adee:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800adf2:	4613      	mov	r3, r2
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	4413      	add	r3, r2
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	3308      	adds	r3, #8
 800adfc:	4a25      	ldr	r2, [pc, #148]	@ (800ae94 <etharp_update_arp_entry+0x148>)
 800adfe:	4413      	add	r3, r2
 800ae00:	3304      	adds	r3, #4
 800ae02:	2206      	movs	r2, #6
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f002 f8ef 	bl	800cfea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ae0c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae10:	4920      	ldr	r1, [pc, #128]	@ (800ae94 <etharp_update_arp_entry+0x148>)
 800ae12:	4613      	mov	r3, r2
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	440b      	add	r3, r1
 800ae1c:	3312      	adds	r3, #18
 800ae1e:	2200      	movs	r2, #0
 800ae20:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ae22:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae26:	491b      	ldr	r1, [pc, #108]	@ (800ae94 <etharp_update_arp_entry+0x148>)
 800ae28:	4613      	mov	r3, r2
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	4413      	add	r3, r2
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	440b      	add	r3, r1
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d021      	beq.n	800ae7c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ae38:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae3c:	4915      	ldr	r1, [pc, #84]	@ (800ae94 <etharp_update_arp_entry+0x148>)
 800ae3e:	4613      	mov	r3, r2
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	4413      	add	r3, r2
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	440b      	add	r3, r1
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ae4c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ae50:	4910      	ldr	r1, [pc, #64]	@ (800ae94 <etharp_update_arp_entry+0x148>)
 800ae52:	4613      	mov	r3, r2
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	4413      	add	r3, r2
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	440b      	add	r3, r1
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800ae66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6939      	ldr	r1, [r7, #16]
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f001 fed5 	bl	800cc20 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f7fa fb04 	bl	8005484 <pbuf_free>
  }
  return ERR_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	0800f1a8 	.word	0x0800f1a8
 800ae8c:	0800f2a0 	.word	0x0800f2a0
 800ae90:	0800f220 	.word	0x0800f220
 800ae94:	20006cac 	.word	0x20006cac

0800ae98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ae98:	b5b0      	push	{r4, r5, r7, lr}
 800ae9a:	b08a      	sub	sp, #40	@ 0x28
 800ae9c:	af04      	add	r7, sp, #16
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d107      	bne.n	800aeb8 <etharp_input+0x20>
 800aea8:	4b3d      	ldr	r3, [pc, #244]	@ (800afa0 <etharp_input+0x108>)
 800aeaa:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800aeae:	493d      	ldr	r1, [pc, #244]	@ (800afa4 <etharp_input+0x10c>)
 800aeb0:	483d      	ldr	r0, [pc, #244]	@ (800afa8 <etharp_input+0x110>)
 800aeb2:	f001 ffbf 	bl	800ce34 <iprintf>
 800aeb6:	e06f      	b.n	800af98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aec8:	d10c      	bne.n	800aee4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800aece:	2b06      	cmp	r3, #6
 800aed0:	d108      	bne.n	800aee4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d104      	bne.n	800aee4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	885b      	ldrh	r3, [r3, #2]
 800aede:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d003      	beq.n	800aeec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7fa facd 	bl	8005484 <pbuf_free>
    return;
 800aeea:	e055      	b.n	800af98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	330e      	adds	r3, #14
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	3318      	adds	r3, #24
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	3304      	adds	r3, #4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <etharp_input+0x74>
    for_us = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]
 800af0a:	e009      	b.n	800af20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	3304      	adds	r3, #4
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	429a      	cmp	r2, r3
 800af16:	bf0c      	ite	eq
 800af18:	2301      	moveq	r3, #1
 800af1a:	2300      	movne	r3, #0
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f103 0208 	add.w	r2, r3, #8
 800af26:	7dfb      	ldrb	r3, [r7, #23]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <etharp_input+0x98>
 800af2c:	2301      	movs	r3, #1
 800af2e:	e000      	b.n	800af32 <etharp_input+0x9a>
 800af30:	2302      	movs	r3, #2
 800af32:	f107 010c 	add.w	r1, r7, #12
 800af36:	6838      	ldr	r0, [r7, #0]
 800af38:	f7ff ff08 	bl	800ad4c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	88db      	ldrh	r3, [r3, #6]
 800af40:	b29b      	uxth	r3, r3
 800af42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af46:	d003      	beq.n	800af50 <etharp_input+0xb8>
 800af48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af4c:	d01e      	beq.n	800af8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800af4e:	e020      	b.n	800af92 <etharp_input+0xfa>
    if (for_us) {
 800af50:	7dfb      	ldrb	r3, [r7, #23]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d01c      	beq.n	800af90 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	f103 0529 	add.w	r5, r3, #41	@ 0x29
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800af70:	2102      	movs	r1, #2
 800af72:	9103      	str	r1, [sp, #12]
 800af74:	f107 010c 	add.w	r1, r7, #12
 800af78:	9102      	str	r1, [sp, #8]
 800af7a:	9201      	str	r2, [sp, #4]
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	462b      	mov	r3, r5
 800af80:	4622      	mov	r2, r4
 800af82:	4601      	mov	r1, r0
 800af84:	6838      	ldr	r0, [r7, #0]
 800af86:	f000 fae1 	bl	800b54c <etharp_raw>
    break;
 800af8a:	e001      	b.n	800af90 <etharp_input+0xf8>
    break;
 800af8c:	bf00      	nop
 800af8e:	e000      	b.n	800af92 <etharp_input+0xfa>
    break;
 800af90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7fa fa76 	bl	8005484 <pbuf_free>
}
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bdb0      	pop	{r4, r5, r7, pc}
 800af9e:	bf00      	nop
 800afa0:	0800f1a8 	.word	0x0800f1a8
 800afa4:	0800f2f8 	.word	0x0800f2f8
 800afa8:	0800f220 	.word	0x0800f220

0800afac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800afba:	79fa      	ldrb	r2, [r7, #7]
 800afbc:	4944      	ldr	r1, [pc, #272]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800afbe:	4613      	mov	r3, r2
 800afc0:	005b      	lsls	r3, r3, #1
 800afc2:	4413      	add	r3, r2
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	440b      	add	r3, r1
 800afc8:	3314      	adds	r3, #20
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d806      	bhi.n	800afde <etharp_output_to_arp_index+0x32>
 800afd0:	4b40      	ldr	r3, [pc, #256]	@ (800b0d4 <etharp_output_to_arp_index+0x128>)
 800afd2:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800afd6:	4940      	ldr	r1, [pc, #256]	@ (800b0d8 <etharp_output_to_arp_index+0x12c>)
 800afd8:	4840      	ldr	r0, [pc, #256]	@ (800b0dc <etharp_output_to_arp_index+0x130>)
 800afda:	f001 ff2b 	bl	800ce34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800afde:	79fa      	ldrb	r2, [r7, #7]
 800afe0:	493b      	ldr	r1, [pc, #236]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800afe2:	4613      	mov	r3, r2
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	4413      	add	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	440b      	add	r3, r1
 800afec:	3314      	adds	r3, #20
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d153      	bne.n	800b09c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800aff4:	79fa      	ldrb	r2, [r7, #7]
 800aff6:	4936      	ldr	r1, [pc, #216]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800aff8:	4613      	mov	r3, r2
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	4413      	add	r3, r2
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	440b      	add	r3, r1
 800b002:	3312      	adds	r3, #18
 800b004:	881b      	ldrh	r3, [r3, #0]
 800b006:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800b00a:	d919      	bls.n	800b040 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b00c:	79fa      	ldrb	r2, [r7, #7]
 800b00e:	4613      	mov	r3, r2
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	4413      	add	r3, r2
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	4a2e      	ldr	r2, [pc, #184]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800b018:	4413      	add	r3, r2
 800b01a:	3304      	adds	r3, #4
 800b01c:	4619      	mov	r1, r3
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 fb42 	bl	800b6a8 <etharp_request>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d138      	bne.n	800b09c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b02a:	79fa      	ldrb	r2, [r7, #7]
 800b02c:	4928      	ldr	r1, [pc, #160]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800b02e:	4613      	mov	r3, r2
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	4413      	add	r3, r2
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	440b      	add	r3, r1
 800b038:	3314      	adds	r3, #20
 800b03a:	2203      	movs	r2, #3
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	e02d      	b.n	800b09c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b040:	79fa      	ldrb	r2, [r7, #7]
 800b042:	4923      	ldr	r1, [pc, #140]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800b044:	4613      	mov	r3, r2
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	4413      	add	r3, r2
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	440b      	add	r3, r1
 800b04e:	3312      	adds	r3, #18
 800b050:	881b      	ldrh	r3, [r3, #0]
 800b052:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800b056:	d321      	bcc.n	800b09c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b058:	79fa      	ldrb	r2, [r7, #7]
 800b05a:	4613      	mov	r3, r2
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	4413      	add	r3, r2
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4a1b      	ldr	r2, [pc, #108]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800b064:	4413      	add	r3, r2
 800b066:	1d19      	adds	r1, r3, #4
 800b068:	79fa      	ldrb	r2, [r7, #7]
 800b06a:	4613      	mov	r3, r2
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	4413      	add	r3, r2
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	3308      	adds	r3, #8
 800b074:	4a16      	ldr	r2, [pc, #88]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800b076:	4413      	add	r3, r2
 800b078:	3304      	adds	r3, #4
 800b07a:	461a      	mov	r2, r3
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 faf1 	bl	800b664 <etharp_request_dst>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d109      	bne.n	800b09c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b088:	79fa      	ldrb	r2, [r7, #7]
 800b08a:	4911      	ldr	r1, [pc, #68]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800b08c:	4613      	mov	r3, r2
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	4413      	add	r3, r2
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	440b      	add	r3, r1
 800b096:	3314      	adds	r3, #20
 800b098:	2203      	movs	r2, #3
 800b09a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f103 0129 	add.w	r1, r3, #41	@ 0x29
 800b0a2:	79fa      	ldrb	r2, [r7, #7]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	4413      	add	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	4a08      	ldr	r2, [pc, #32]	@ (800b0d0 <etharp_output_to_arp_index+0x124>)
 800b0b0:	4413      	add	r3, r2
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0b8:	9200      	str	r2, [sp, #0]
 800b0ba:	460a      	mov	r2, r1
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f001 fdae 	bl	800cc20 <ethernet_output>
 800b0c4:	4603      	mov	r3, r0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20006cac 	.word	0x20006cac
 800b0d4:	0800f1a8 	.word	0x0800f1a8
 800b0d8:	0800f318 	.word	0x0800f318
 800b0dc:	0800f220 	.word	0x0800f220

0800b0e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08a      	sub	sp, #40	@ 0x28
 800b0e4:	af02      	add	r7, sp, #8
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d106      	bne.n	800b104 <etharp_output+0x24>
 800b0f6:	4b69      	ldr	r3, [pc, #420]	@ (800b29c <etharp_output+0x1bc>)
 800b0f8:	f240 321b 	movw	r2, #795	@ 0x31b
 800b0fc:	4968      	ldr	r1, [pc, #416]	@ (800b2a0 <etharp_output+0x1c0>)
 800b0fe:	4869      	ldr	r0, [pc, #420]	@ (800b2a4 <etharp_output+0x1c4>)
 800b100:	f001 fe98 	bl	800ce34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d106      	bne.n	800b118 <etharp_output+0x38>
 800b10a:	4b64      	ldr	r3, [pc, #400]	@ (800b29c <etharp_output+0x1bc>)
 800b10c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b110:	4965      	ldr	r1, [pc, #404]	@ (800b2a8 <etharp_output+0x1c8>)
 800b112:	4864      	ldr	r0, [pc, #400]	@ (800b2a4 <etharp_output+0x1c4>)
 800b114:	f001 fe8e 	bl	800ce34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <etharp_output+0x4c>
 800b11e:	4b5f      	ldr	r3, [pc, #380]	@ (800b29c <etharp_output+0x1bc>)
 800b120:	f240 321d 	movw	r2, #797	@ 0x31d
 800b124:	4961      	ldr	r1, [pc, #388]	@ (800b2ac <etharp_output+0x1cc>)
 800b126:	485f      	ldr	r0, [pc, #380]	@ (800b2a4 <etharp_output+0x1c4>)
 800b128:	f001 fe84 	bl	800ce34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68f9      	ldr	r1, [r7, #12]
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fed2 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b13e:	4b5c      	ldr	r3, [pc, #368]	@ (800b2b0 <etharp_output+0x1d0>)
 800b140:	61fb      	str	r3, [r7, #28]
 800b142:	e09b      	b.n	800b27c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b14c:	2be0      	cmp	r3, #224	@ 0xe0
 800b14e:	d118      	bne.n	800b182 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b150:	2301      	movs	r3, #1
 800b152:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b154:	2300      	movs	r3, #0
 800b156:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b158:	235e      	movs	r3, #94	@ 0x5e
 800b15a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3301      	adds	r3, #1
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b166:	b2db      	uxtb	r3, r3
 800b168:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3302      	adds	r3, #2
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3303      	adds	r3, #3
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b17a:	f107 0310 	add.w	r3, r7, #16
 800b17e:	61fb      	str	r3, [r7, #28]
 800b180:	e07c      	b.n	800b27c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3304      	adds	r3, #4
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	405a      	eors	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3308      	adds	r3, #8
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4013      	ands	r3, r2
 800b196:	2b00      	cmp	r3, #0
 800b198:	d012      	beq.n	800b1c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b1a0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d00b      	beq.n	800b1c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	330c      	adds	r3, #12
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	330c      	adds	r3, #12
 800b1b6:	61bb      	str	r3, [r7, #24]
 800b1b8:	e002      	b.n	800b1c0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b1ba:	f06f 0303 	mvn.w	r3, #3
 800b1be:	e069      	b.n	800b294 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b1c0:	4b3c      	ldr	r3, [pc, #240]	@ (800b2b4 <etharp_output+0x1d4>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4a3c      	ldr	r2, [pc, #240]	@ (800b2b8 <etharp_output+0x1d8>)
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	440b      	add	r3, r1
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	4413      	add	r3, r2
 800b1d2:	3314      	adds	r3, #20
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d917      	bls.n	800b20a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b35      	ldr	r3, [pc, #212]	@ (800b2b4 <etharp_output+0x1d4>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	4934      	ldr	r1, [pc, #208]	@ (800b2b8 <etharp_output+0x1d8>)
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	4403      	add	r3, r0
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	440b      	add	r3, r1
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d108      	bne.n	800b20a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b1f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b2b4 <etharp_output+0x1d4>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff fed3 	bl	800afac <etharp_output_to_arp_index>
 800b206:	4603      	mov	r3, r0
 800b208:	e044      	b.n	800b294 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b20a:	2300      	movs	r3, #0
 800b20c:	75fb      	strb	r3, [r7, #23]
 800b20e:	e02a      	b.n	800b266 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b210:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b214:	4928      	ldr	r1, [pc, #160]	@ (800b2b8 <etharp_output+0x1d8>)
 800b216:	4613      	mov	r3, r2
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	4413      	add	r3, r2
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	440b      	add	r3, r1
 800b220:	3314      	adds	r3, #20
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d918      	bls.n	800b25a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	6819      	ldr	r1, [r3, #0]
 800b22c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b230:	4821      	ldr	r0, [pc, #132]	@ (800b2b8 <etharp_output+0x1d8>)
 800b232:	4613      	mov	r3, r2
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	4413      	add	r3, r2
 800b238:	00db      	lsls	r3, r3, #3
 800b23a:	4403      	add	r3, r0
 800b23c:	3304      	adds	r3, #4
 800b23e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b240:	4299      	cmp	r1, r3
 800b242:	d10a      	bne.n	800b25a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b244:	7dfa      	ldrb	r2, [r7, #23]
 800b246:	4b1b      	ldr	r3, [pc, #108]	@ (800b2b4 <etharp_output+0x1d4>)
 800b248:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
 800b24c:	461a      	mov	r2, r3
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff feab 	bl	800afac <etharp_output_to_arp_index>
 800b256:	4603      	mov	r3, r0
 800b258:	e01c      	b.n	800b294 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b25a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	3301      	adds	r3, #1
 800b262:	b2db      	uxtb	r3, r3
 800b264:	75fb      	strb	r3, [r7, #23]
 800b266:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b26a:	2b09      	cmp	r3, #9
 800b26c:	ddd0      	ble.n	800b210 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	69b9      	ldr	r1, [r7, #24]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f822 	bl	800b2bc <etharp_query>
 800b278:	4603      	mov	r3, r0
 800b27a:	e00b      	b.n	800b294 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800b282:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	68b9      	ldr	r1, [r7, #8]
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f001 fcc7 	bl	800cc20 <ethernet_output>
 800b292:	4603      	mov	r3, r0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3720      	adds	r7, #32
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	0800f1a8 	.word	0x0800f1a8
 800b2a0:	0800f2f8 	.word	0x0800f2f8
 800b2a4:	0800f220 	.word	0x0800f220
 800b2a8:	0800f348 	.word	0x0800f348
 800b2ac:	0800f2e8 	.word	0x0800f2e8
 800b2b0:	0800f910 	.word	0x0800f910
 800b2b4:	20006d9c 	.word	0x20006d9c
 800b2b8:	20006cac 	.word	0x20006cac

0800b2bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08c      	sub	sp, #48	@ 0x30
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	3329      	adds	r3, #41	@ 0x29
 800b2cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b2ce:	23ff      	movs	r3, #255	@ 0xff
 800b2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68f9      	ldr	r1, [r7, #12]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 fdfc 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10c      	bne.n	800b304 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b2f2:	2be0      	cmp	r3, #224	@ 0xe0
 800b2f4:	d006      	beq.n	800b304 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d102      	bne.n	800b30a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b304:	f06f 030f 	mvn.w	r3, #15
 800b308:	e10e      	b.n	800b528 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	2101      	movs	r1, #1
 800b30e:	68b8      	ldr	r0, [r7, #8]
 800b310:	f7ff fbd2 	bl	800aab8 <etharp_find_entry>
 800b314:	4603      	mov	r3, r0
 800b316:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800b318:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	da02      	bge.n	800b326 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b320:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b324:	e100      	b.n	800b528 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b326:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b32a:	4981      	ldr	r1, [pc, #516]	@ (800b530 <etharp_query+0x274>)
 800b32c:	4613      	mov	r3, r2
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	4413      	add	r3, r2
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	440b      	add	r3, r1
 800b336:	3314      	adds	r3, #20
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d117      	bne.n	800b36e <etharp_query+0xb2>
    is_new_entry = 1;
 800b33e:	2301      	movs	r3, #1
 800b340:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b342:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b346:	497a      	ldr	r1, [pc, #488]	@ (800b530 <etharp_query+0x274>)
 800b348:	4613      	mov	r3, r2
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	4413      	add	r3, r2
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	440b      	add	r3, r1
 800b352:	3314      	adds	r3, #20
 800b354:	2201      	movs	r2, #1
 800b356:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b358:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b35c:	4974      	ldr	r1, [pc, #464]	@ (800b530 <etharp_query+0x274>)
 800b35e:	4613      	mov	r3, r2
 800b360:	005b      	lsls	r3, r3, #1
 800b362:	4413      	add	r3, r2
 800b364:	00db      	lsls	r3, r3, #3
 800b366:	440b      	add	r3, r1
 800b368:	3308      	adds	r3, #8
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b36e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b372:	496f      	ldr	r1, [pc, #444]	@ (800b530 <etharp_query+0x274>)
 800b374:	4613      	mov	r3, r2
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	4413      	add	r3, r2
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	440b      	add	r3, r1
 800b37e:	3314      	adds	r3, #20
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d012      	beq.n	800b3ac <etharp_query+0xf0>
 800b386:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b38a:	4969      	ldr	r1, [pc, #420]	@ (800b530 <etharp_query+0x274>)
 800b38c:	4613      	mov	r3, r2
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	4413      	add	r3, r2
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	440b      	add	r3, r1
 800b396:	3314      	adds	r3, #20
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d806      	bhi.n	800b3ac <etharp_query+0xf0>
 800b39e:	4b65      	ldr	r3, [pc, #404]	@ (800b534 <etharp_query+0x278>)
 800b3a0:	f240 32c7 	movw	r2, #967	@ 0x3c7
 800b3a4:	4964      	ldr	r1, [pc, #400]	@ (800b538 <etharp_query+0x27c>)
 800b3a6:	4865      	ldr	r0, [pc, #404]	@ (800b53c <etharp_query+0x280>)
 800b3a8:	f001 fd44 	bl	800ce34 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <etharp_query+0xfc>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10c      	bne.n	800b3d2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b3b8:	68b9      	ldr	r1, [r7, #8]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 f974 	bl	800b6a8 <etharp_request>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <etharp_query+0x116>
      return result;
 800b3cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b3d0:	e0aa      	b.n	800b528 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d106      	bne.n	800b3e6 <etharp_query+0x12a>
 800b3d8:	4b56      	ldr	r3, [pc, #344]	@ (800b534 <etharp_query+0x278>)
 800b3da:	f240 32db 	movw	r2, #987	@ 0x3db
 800b3de:	4958      	ldr	r1, [pc, #352]	@ (800b540 <etharp_query+0x284>)
 800b3e0:	4856      	ldr	r0, [pc, #344]	@ (800b53c <etharp_query+0x280>)
 800b3e2:	f001 fd27 	bl	800ce34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b3e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b3ea:	4951      	ldr	r1, [pc, #324]	@ (800b530 <etharp_query+0x274>)
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	4413      	add	r3, r2
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	440b      	add	r3, r1
 800b3f6:	3314      	adds	r3, #20
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d918      	bls.n	800b430 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800b3fe:	7cfa      	ldrb	r2, [r7, #19]
 800b400:	4b50      	ldr	r3, [pc, #320]	@ (800b544 <etharp_query+0x288>)
 800b402:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b404:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b408:	4613      	mov	r3, r2
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	4413      	add	r3, r2
 800b40e:	00db      	lsls	r3, r3, #3
 800b410:	3308      	adds	r3, #8
 800b412:	4a47      	ldr	r2, [pc, #284]	@ (800b530 <etharp_query+0x274>)
 800b414:	4413      	add	r3, r2
 800b416:	3304      	adds	r3, #4
 800b418:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b41c:	9200      	str	r2, [sp, #0]
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f001 fbfc 	bl	800cc20 <ethernet_output>
 800b428:	4603      	mov	r3, r0
 800b42a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b42e:	e079      	b.n	800b524 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b430:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b434:	493e      	ldr	r1, [pc, #248]	@ (800b530 <etharp_query+0x274>)
 800b436:	4613      	mov	r3, r2
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	4413      	add	r3, r2
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	440b      	add	r3, r1
 800b440:	3314      	adds	r3, #20
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d16d      	bne.n	800b524 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b450:	e01a      	b.n	800b488 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	895a      	ldrh	r2, [r3, #10]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	891b      	ldrh	r3, [r3, #8]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d10a      	bne.n	800b474 <etharp_query+0x1b8>
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d006      	beq.n	800b474 <etharp_query+0x1b8>
 800b466:	4b33      	ldr	r3, [pc, #204]	@ (800b534 <etharp_query+0x278>)
 800b468:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800b46c:	4936      	ldr	r1, [pc, #216]	@ (800b548 <etharp_query+0x28c>)
 800b46e:	4833      	ldr	r0, [pc, #204]	@ (800b53c <etharp_query+0x280>)
 800b470:	f001 fce0 	bl	800ce34 <iprintf>
      if (p->type != PBUF_ROM) {
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	7b1b      	ldrb	r3, [r3, #12]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d002      	beq.n	800b482 <etharp_query+0x1c6>
        copy_needed = 1;
 800b47c:	2301      	movs	r3, #1
 800b47e:	61bb      	str	r3, [r7, #24]
        break;
 800b480:	e005      	b.n	800b48e <etharp_query+0x1d2>
      }
      p = p->next;
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1e1      	bne.n	800b452 <etharp_query+0x196>
    }
    if (copy_needed) {
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d017      	beq.n	800b4c4 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	891b      	ldrh	r3, [r3, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	4619      	mov	r1, r3
 800b49c:	2002      	movs	r0, #2
 800b49e:	f7f9 fc79 	bl	8004d94 <pbuf_alloc>
 800b4a2:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d011      	beq.n	800b4ce <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	69f8      	ldr	r0, [r7, #28]
 800b4ae:	f7fa f91b 	bl	80056e8 <pbuf_copy>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00a      	beq.n	800b4ce <etharp_query+0x212>
          pbuf_free(p);
 800b4b8:	69f8      	ldr	r0, [r7, #28]
 800b4ba:	f7f9 ffe3 	bl	8005484 <pbuf_free>
          p = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61fb      	str	r3, [r7, #28]
 800b4c2:	e004      	b.n	800b4ce <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b4c8:	69f8      	ldr	r0, [r7, #28]
 800b4ca:	f7fa f885 	bl	80055d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d024      	beq.n	800b51e <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b4d4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4d8:	4915      	ldr	r1, [pc, #84]	@ (800b530 <etharp_query+0x274>)
 800b4da:	4613      	mov	r3, r2
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	4413      	add	r3, r2
 800b4e0:	00db      	lsls	r3, r3, #3
 800b4e2:	440b      	add	r3, r1
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00b      	beq.n	800b502 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800b4ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b4ee:	4910      	ldr	r1, [pc, #64]	@ (800b530 <etharp_query+0x274>)
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	4413      	add	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	440b      	add	r3, r1
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7f9 ffc1 	bl	8005484 <pbuf_free>
      }
      arp_table[i].q = p;
 800b502:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b506:	490a      	ldr	r1, [pc, #40]	@ (800b530 <etharp_query+0x274>)
 800b508:	4613      	mov	r3, r2
 800b50a:	005b      	lsls	r3, r3, #1
 800b50c:	4413      	add	r3, r2
 800b50e:	00db      	lsls	r3, r3, #3
 800b510:	440b      	add	r3, r1
 800b512:	69fa      	ldr	r2, [r7, #28]
 800b514:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b51c:	e002      	b.n	800b524 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b51e:	23ff      	movs	r3, #255	@ 0xff
 800b520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800b524:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3728      	adds	r7, #40	@ 0x28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	20006cac 	.word	0x20006cac
 800b534:	0800f1a8 	.word	0x0800f1a8
 800b538:	0800f354 	.word	0x0800f354
 800b53c:	0800f220 	.word	0x0800f220
 800b540:	0800f348 	.word	0x0800f348
 800b544:	20006d9c 	.word	0x20006d9c
 800b548:	0800f37c 	.word	0x0800f37c

0800b54c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	@ 0x28
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
 800b558:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d106      	bne.n	800b572 <etharp_raw+0x26>
 800b564:	4b3a      	ldr	r3, [pc, #232]	@ (800b650 <etharp_raw+0x104>)
 800b566:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800b56a:	493a      	ldr	r1, [pc, #232]	@ (800b654 <etharp_raw+0x108>)
 800b56c:	483a      	ldr	r0, [pc, #232]	@ (800b658 <etharp_raw+0x10c>)
 800b56e:	f001 fc61 	bl	800ce34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b572:	2200      	movs	r2, #0
 800b574:	211c      	movs	r1, #28
 800b576:	2002      	movs	r0, #2
 800b578:	f7f9 fc0c 	bl	8004d94 <pbuf_alloc>
 800b57c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d102      	bne.n	800b58a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	e05d      	b.n	800b646 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	895b      	ldrh	r3, [r3, #10]
 800b58e:	2b1b      	cmp	r3, #27
 800b590:	d806      	bhi.n	800b5a0 <etharp_raw+0x54>
 800b592:	4b2f      	ldr	r3, [pc, #188]	@ (800b650 <etharp_raw+0x104>)
 800b594:	f240 4263 	movw	r2, #1123	@ 0x463
 800b598:	4930      	ldr	r1, [pc, #192]	@ (800b65c <etharp_raw+0x110>)
 800b59a:	482f      	ldr	r0, [pc, #188]	@ (800b658 <etharp_raw+0x10c>)
 800b59c:	f001 fc4a 	bl	800ce34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b5a6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7f8 fe5a 	bl	8004262 <lwip_htons>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5bc:	2b06      	cmp	r3, #6
 800b5be:	d006      	beq.n	800b5ce <etharp_raw+0x82>
 800b5c0:	4b23      	ldr	r3, [pc, #140]	@ (800b650 <etharp_raw+0x104>)
 800b5c2:	f240 426a 	movw	r2, #1130	@ 0x46a
 800b5c6:	4926      	ldr	r1, [pc, #152]	@ (800b660 <etharp_raw+0x114>)
 800b5c8:	4823      	ldr	r0, [pc, #140]	@ (800b658 <etharp_raw+0x10c>)
 800b5ca:	f001 fc33 	bl	800ce34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	2206      	movs	r2, #6
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f001 fd07 	bl	800cfea <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	3312      	adds	r3, #18
 800b5e0:	2206      	movs	r2, #6
 800b5e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f001 fd00 	bl	800cfea <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	330e      	adds	r3, #14
 800b5ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5f0:	6812      	ldr	r2, [r2, #0]
 800b5f2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	3318      	adds	r3, #24
 800b5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5fa:	6812      	ldr	r2, [r2, #0]
 800b5fc:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2200      	movs	r2, #0
 800b602:	701a      	strb	r2, [r3, #0]
 800b604:	2200      	movs	r2, #0
 800b606:	f042 0201 	orr.w	r2, r2, #1
 800b60a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	2200      	movs	r2, #0
 800b610:	f042 0208 	orr.w	r2, r2, #8
 800b614:	709a      	strb	r2, [r3, #2]
 800b616:	2200      	movs	r2, #0
 800b618:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2206      	movs	r2, #6
 800b61e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	2204      	movs	r2, #4
 800b624:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b626:	f640 0306 	movw	r3, #2054	@ 0x806
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	69b9      	ldr	r1, [r7, #24]
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f001 faf4 	bl	800cc20 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b638:	69b8      	ldr	r0, [r7, #24]
 800b63a:	f7f9 ff23 	bl	8005484 <pbuf_free>
  p = NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b642:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3720      	adds	r7, #32
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	0800f1a8 	.word	0x0800f1a8
 800b654:	0800f2f8 	.word	0x0800f2f8
 800b658:	0800f220 	.word	0x0800f220
 800b65c:	0800f398 	.word	0x0800f398
 800b660:	0800f3cc 	.word	0x0800f3cc

0800b664 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af04      	add	r7, sp, #16
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f103 0129 	add.w	r1, r3, #41	@ 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b680:	2201      	movs	r2, #1
 800b682:	9203      	str	r2, [sp, #12]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	9202      	str	r2, [sp, #8]
 800b688:	4a06      	ldr	r2, [pc, #24]	@ (800b6a4 <etharp_request_dst+0x40>)
 800b68a:	9201      	str	r2, [sp, #4]
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	4603      	mov	r3, r0
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f7ff ff5a 	bl	800b54c <etharp_raw>
 800b698:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	0800f918 	.word	0x0800f918

0800b6a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b6b2:	4a05      	ldr	r2, [pc, #20]	@ (800b6c8 <etharp_request+0x20>)
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff ffd4 	bl	800b664 <etharp_request_dst>
 800b6bc:	4603      	mov	r3, r0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	0800f910 	.word	0x0800f910

0800b6cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08e      	sub	sp, #56	@ 0x38
 800b6d0:	af04      	add	r7, sp, #16
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b6d6:	4b7a      	ldr	r3, [pc, #488]	@ (800b8c0 <icmp_input+0x1f4>)
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800b6ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6ec:	2b13      	cmp	r3, #19
 800b6ee:	f240 80d1 	bls.w	800b894 <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	895b      	ldrh	r3, [r3, #10]
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	f240 80ce 	bls.w	800b898 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b706:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f000 80bb 	beq.w	800b886 <icmp_input+0x1ba>
 800b710:	2b08      	cmp	r3, #8
 800b712:	f040 80bb 	bne.w	800b88c <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800b716:	4b6b      	ldr	r3, [pc, #428]	@ (800b8c4 <icmp_input+0x1f8>)
 800b718:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b71a:	4b69      	ldr	r3, [pc, #420]	@ (800b8c0 <icmp_input+0x1f4>)
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b722:	2be0      	cmp	r3, #224	@ 0xe0
 800b724:	f000 80bf 	beq.w	800b8a6 <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b728:	4b65      	ldr	r3, [pc, #404]	@ (800b8c0 <icmp_input+0x1f4>)
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	4a64      	ldr	r2, [pc, #400]	@ (800b8c0 <icmp_input+0x1f4>)
 800b72e:	6812      	ldr	r2, [r2, #0]
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fbd2 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f040 80b5 	bne.w	800b8aa <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	891b      	ldrh	r3, [r3, #8]
 800b744:	2b07      	cmp	r3, #7
 800b746:	f240 80a9 	bls.w	800b89c <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b74a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b74c:	330e      	adds	r3, #14
 800b74e:	b29b      	uxth	r3, r3
 800b750:	b21b      	sxth	r3, r3
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7f9 fe71 	bl	800543c <pbuf_header>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d046      	beq.n	800b7ee <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	891a      	ldrh	r2, [r3, #8]
 800b764:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b766:	4413      	add	r3, r2
 800b768:	b29b      	uxth	r3, r3
 800b76a:	2200      	movs	r2, #0
 800b76c:	4619      	mov	r1, r3
 800b76e:	2002      	movs	r0, #2
 800b770:	f7f9 fb10 	bl	8004d94 <pbuf_alloc>
 800b774:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 8098 	beq.w	800b8ae <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	895b      	ldrh	r3, [r3, #10]
 800b782:	461a      	mov	r2, r3
 800b784:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b786:	3308      	adds	r3, #8
 800b788:	429a      	cmp	r2, r3
 800b78a:	d203      	bcs.n	800b794 <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800b78c:	69b8      	ldr	r0, [r7, #24]
 800b78e:	f7f9 fe79 	bl	8005484 <pbuf_free>
        goto icmperr;
 800b792:	e08d      	b.n	800b8b0 <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b79a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b79c:	4618      	mov	r0, r3
 800b79e:	f001 fc24 	bl	800cfea <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800b7a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7a4:	425b      	negs	r3, r3
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	b21b      	sxth	r3, r3
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	69b8      	ldr	r0, [r7, #24]
 800b7ae:	f7f9 fe45 	bl	800543c <pbuf_header>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d009      	beq.n	800b7cc <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b7b8:	4b43      	ldr	r3, [pc, #268]	@ (800b8c8 <icmp_input+0x1fc>)
 800b7ba:	22af      	movs	r2, #175	@ 0xaf
 800b7bc:	4943      	ldr	r1, [pc, #268]	@ (800b8cc <icmp_input+0x200>)
 800b7be:	4844      	ldr	r0, [pc, #272]	@ (800b8d0 <icmp_input+0x204>)
 800b7c0:	f001 fb38 	bl	800ce34 <iprintf>
        pbuf_free(r);
 800b7c4:	69b8      	ldr	r0, [r7, #24]
 800b7c6:	f7f9 fe5d 	bl	8005484 <pbuf_free>
        goto icmperr;
 800b7ca:	e071      	b.n	800b8b0 <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	69b8      	ldr	r0, [r7, #24]
 800b7d0:	f7f9 ff8a 	bl	80056e8 <pbuf_copy>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d003      	beq.n	800b7e2 <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800b7da:	69b8      	ldr	r0, [r7, #24]
 800b7dc:	f7f9 fe52 	bl	8005484 <pbuf_free>
        goto icmperr;
 800b7e0:	e066      	b.n	800b8b0 <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7f9 fe4e 	bl	8005484 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	607b      	str	r3, [r7, #4]
 800b7ec:	e015      	b.n	800b81a <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b7ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7f0:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800b7f4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800b7f8:	33f2      	adds	r3, #242	@ 0xf2
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	b21b      	sxth	r3, r3
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7f9 fe1b 	bl	800543c <pbuf_header>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d006      	beq.n	800b81a <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b80c:	4b2e      	ldr	r3, [pc, #184]	@ (800b8c8 <icmp_input+0x1fc>)
 800b80e:	22c0      	movs	r2, #192	@ 0xc0
 800b810:	4930      	ldr	r1, [pc, #192]	@ (800b8d4 <icmp_input+0x208>)
 800b812:	482f      	ldr	r0, [pc, #188]	@ (800b8d0 <icmp_input+0x204>)
 800b814:	f001 fb0e 	bl	800ce34 <iprintf>
        goto icmperr;
 800b818:	e04a      	b.n	800b8b0 <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800b820:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7f9 fe08 	bl	800543c <pbuf_header>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d12b      	bne.n	800b88a <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b840:	4b1f      	ldr	r3, [pc, #124]	@ (800b8c0 <icmp_input+0x1f4>)
 800b842:	691a      	ldr	r2, [r3, #16]
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2200      	movs	r2, #0
 800b84c:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2200      	movs	r2, #0
 800b852:	709a      	strb	r2, [r3, #2]
 800b854:	2200      	movs	r2, #0
 800b856:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	22ff      	movs	r2, #255	@ 0xff
 800b85c:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	2200      	movs	r2, #0
 800b862:	729a      	strb	r2, [r3, #10]
 800b864:	2200      	movs	r2, #0
 800b866:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	9302      	str	r3, [sp, #8]
 800b86c:	2301      	movs	r3, #1
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	2300      	movs	r3, #0
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	23ff      	movs	r3, #255	@ 0xff
 800b876:	2200      	movs	r2, #0
 800b878:	69f9      	ldr	r1, [r7, #28]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa5c 	bl	800bd38 <ip4_output_if>
 800b880:	4603      	mov	r3, r0
 800b882:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800b884:	e001      	b.n	800b88a <icmp_input+0x1be>
    break;
 800b886:	bf00      	nop
 800b888:	e000      	b.n	800b88c <icmp_input+0x1c0>
    break;
 800b88a:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7f9 fdf9 	bl	8005484 <pbuf_free>
  return;
 800b892:	e011      	b.n	800b8b8 <icmp_input+0x1ec>
    goto lenerr;
 800b894:	bf00      	nop
 800b896:	e002      	b.n	800b89e <icmp_input+0x1d2>
    goto lenerr;
 800b898:	bf00      	nop
 800b89a:	e000      	b.n	800b89e <icmp_input+0x1d2>
      goto lenerr;
 800b89c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7f9 fdf0 	bl	8005484 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b8a4:	e008      	b.n	800b8b8 <icmp_input+0x1ec>
      goto icmperr;
 800b8a6:	bf00      	nop
 800b8a8:	e002      	b.n	800b8b0 <icmp_input+0x1e4>
      goto icmperr;
 800b8aa:	bf00      	nop
 800b8ac:	e000      	b.n	800b8b0 <icmp_input+0x1e4>
        goto icmperr;
 800b8ae:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7f9 fde7 	bl	8005484 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b8b6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b8b8:	3728      	adds	r7, #40	@ 0x28
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	200036f0 	.word	0x200036f0
 800b8c4:	20003704 	.word	0x20003704
 800b8c8:	0800f410 	.word	0x0800f410
 800b8cc:	0800f448 	.word	0x0800f448
 800b8d0:	0800f480 	.word	0x0800f480
 800b8d4:	0800f4a8 	.word	0x0800f4a8

0800b8d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	2103      	movs	r1, #3
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f814 	bl	800b918 <icmp_send_response>
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b904:	78fb      	ldrb	r3, [r7, #3]
 800b906:	461a      	mov	r2, r3
 800b908:	210b      	movs	r1, #11
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f804 	bl	800b918 <icmp_send_response>
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08c      	sub	sp, #48	@ 0x30
 800b91c:	af04      	add	r7, sp, #16
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
 800b924:	4613      	mov	r3, r2
 800b926:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b928:	2200      	movs	r2, #0
 800b92a:	2124      	movs	r1, #36	@ 0x24
 800b92c:	2001      	movs	r0, #1
 800b92e:	f7f9 fa31 	bl	8004d94 <pbuf_alloc>
 800b932:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d04c      	beq.n	800b9d4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	895b      	ldrh	r3, [r3, #10]
 800b93e:	2b23      	cmp	r3, #35	@ 0x23
 800b940:	d806      	bhi.n	800b950 <icmp_send_response+0x38>
 800b942:	4b26      	ldr	r3, [pc, #152]	@ (800b9dc <icmp_send_response+0xc4>)
 800b944:	f240 1261 	movw	r2, #353	@ 0x161
 800b948:	4925      	ldr	r1, [pc, #148]	@ (800b9e0 <icmp_send_response+0xc8>)
 800b94a:	4826      	ldr	r0, [pc, #152]	@ (800b9e4 <icmp_send_response+0xcc>)
 800b94c:	f001 fa72 	bl	800ce34 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	78fa      	ldrb	r2, [r7, #3]
 800b960:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	78ba      	ldrb	r2, [r7, #2]
 800b966:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	2200      	movs	r2, #0
 800b96c:	711a      	strb	r2, [r3, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2200      	movs	r2, #0
 800b976:	719a      	strb	r2, [r3, #6]
 800b978:	2200      	movs	r2, #0
 800b97a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	f103 0008 	add.w	r0, r3, #8
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	221c      	movs	r2, #28
 800b98a:	4619      	mov	r1, r3
 800b98c:	f001 fb2d 	bl	800cfea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b996:	f107 030c 	add.w	r3, r7, #12
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f824 	bl	800b9e8 <ip4_route>
 800b9a0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d011      	beq.n	800b9cc <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	709a      	strb	r2, [r3, #2]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b9b2:	f107 020c 	add.w	r2, r7, #12
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	9302      	str	r3, [sp, #8]
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	23ff      	movs	r3, #255	@ 0xff
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	69f8      	ldr	r0, [r7, #28]
 800b9c8:	f000 f9b6 	bl	800bd38 <ip4_output_if>
  }
  pbuf_free(q);
 800b9cc:	69f8      	ldr	r0, [r7, #28]
 800b9ce:	f7f9 fd59 	bl	8005484 <pbuf_free>
 800b9d2:	e000      	b.n	800b9d6 <icmp_send_response+0xbe>
    return;
 800b9d4:	bf00      	nop
}
 800b9d6:	3720      	adds	r7, #32
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	0800f410 	.word	0x0800f410
 800b9e0:	0800f4dc 	.word	0x0800f4dc
 800b9e4:	0800f480 	.word	0x0800f480

0800b9e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b9f0:	4b30      	ldr	r3, [pc, #192]	@ (800bab4 <ip4_route+0xcc>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e036      	b.n	800ba66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d02b      	beq.n	800ba60 <ip4_route+0x78>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba0e:	089b      	lsrs	r3, r3, #2
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d022      	beq.n	800ba60 <ip4_route+0x78>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01d      	beq.n	800ba60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	405a      	eors	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3308      	adds	r3, #8
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4013      	ands	r3, r2
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d101      	bne.n	800ba40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	e033      	b.n	800baa8 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d108      	bne.n	800ba60 <ip4_route+0x78>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	330c      	adds	r3, #12
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d101      	bne.n	800ba60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	e023      	b.n	800baa8 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1c5      	bne.n	800b9f8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ba6c:	4b12      	ldr	r3, [pc, #72]	@ (800bab8 <ip4_route+0xd0>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d015      	beq.n	800baa0 <ip4_route+0xb8>
 800ba74:	4b10      	ldr	r3, [pc, #64]	@ (800bab8 <ip4_route+0xd0>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00d      	beq.n	800baa0 <ip4_route+0xb8>
 800ba84:	4b0c      	ldr	r3, [pc, #48]	@ (800bab8 <ip4_route+0xd0>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba8c:	f003 0304 	and.w	r3, r3, #4
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d005      	beq.n	800baa0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800ba94:	4b08      	ldr	r3, [pc, #32]	@ (800bab8 <ip4_route+0xd0>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3304      	adds	r3, #4
 800ba9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800baa0:	2300      	movs	r3, #0
 800baa2:	e001      	b.n	800baa8 <ip4_route+0xc0>
  }

  return netif_default;
 800baa4:	4b04      	ldr	r3, [pc, #16]	@ (800bab8 <ip4_route+0xd0>)
 800baa6:	681b      	ldr	r3, [r3, #0]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	bc80      	pop	{r7}
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	20006c40 	.word	0x20006c40
 800bab8:	20006c44 	.word	0x20006c44

0800babc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	091b      	lsrs	r3, r3, #4
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d004      	beq.n	800bae2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7f9 fcd3 	bl	8005484 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	e122      	b.n	800bd28 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	f003 030f 	and.w	r3, r3, #15
 800baea:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800baec:	897b      	ldrh	r3, [r7, #10]
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	885b      	ldrh	r3, [r3, #2]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7f8 fbb2 	bl	8004262 <lwip_htons>
 800bafe:	4603      	mov	r3, r0
 800bb00:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	891b      	ldrh	r3, [r3, #8]
 800bb06:	893a      	ldrh	r2, [r7, #8]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d204      	bcs.n	800bb16 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bb0c:	893b      	ldrh	r3, [r7, #8]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7f9 fb43 	bl	800519c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	895b      	ldrh	r3, [r3, #10]
 800bb1a:	897a      	ldrh	r2, [r7, #10]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d807      	bhi.n	800bb30 <ip4_input+0x74>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	891b      	ldrh	r3, [r3, #8]
 800bb24:	893a      	ldrh	r2, [r7, #8]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d802      	bhi.n	800bb30 <ip4_input+0x74>
 800bb2a:	897b      	ldrh	r3, [r7, #10]
 800bb2c:	2b13      	cmp	r3, #19
 800bb2e:	d804      	bhi.n	800bb3a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7f9 fca7 	bl	8005484 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e0f6      	b.n	800bd28 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	4a7c      	ldr	r2, [pc, #496]	@ (800bd30 <ip4_input+0x274>)
 800bb40:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	4a7a      	ldr	r2, [pc, #488]	@ (800bd30 <ip4_input+0x274>)
 800bb48:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb4a:	4b79      	ldr	r3, [pc, #484]	@ (800bd30 <ip4_input+0x274>)
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb52:	2be0      	cmp	r3, #224	@ 0xe0
 800bb54:	d112      	bne.n	800bb7c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb5c:	f003 0301 	and.w	r3, r3, #1
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <ip4_input+0xba>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	3304      	adds	r3, #4
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <ip4_input+0xba>
      netif = inp;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	613b      	str	r3, [r7, #16]
 800bb74:	e041      	b.n	800bbfa <ip4_input+0x13e>
    } else {
      netif = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	613b      	str	r3, [r7, #16]
 800bb7a:	e03e      	b.n	800bbfa <ip4_input+0x13e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d014      	beq.n	800bbbe <ip4_input+0x102>
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	3304      	adds	r3, #4
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00f      	beq.n	800bbbe <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bb9e:	4b64      	ldr	r3, [pc, #400]	@ (800bd30 <ip4_input+0x274>)
 800bba0:	695a      	ldr	r2, [r3, #20]
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	3304      	adds	r3, #4
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d026      	beq.n	800bbfa <ip4_input+0x13e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bbac:	4b60      	ldr	r3, [pc, #384]	@ (800bd30 <ip4_input+0x274>)
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	6939      	ldr	r1, [r7, #16]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 f992 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800bbb8:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d11d      	bne.n	800bbfa <ip4_input+0x13e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00d      	beq.n	800bbe0 <ip4_input+0x124>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800bbc4:	4b5a      	ldr	r3, [pc, #360]	@ (800bd30 <ip4_input+0x274>)
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbcc:	d102      	bne.n	800bbd4 <ip4_input+0x118>
          netif = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]
          break;
 800bbd2:	e012      	b.n	800bbfa <ip4_input+0x13e>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800bbd8:	4b56      	ldr	r3, [pc, #344]	@ (800bd34 <ip4_input+0x278>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	613b      	str	r3, [r7, #16]
 800bbde:	e002      	b.n	800bbe6 <ip4_input+0x12a>
      } else {
        netif = netif->next;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d102      	bne.n	800bbf4 <ip4_input+0x138>
        netif = netif->next;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1c4      	bne.n	800bb84 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bbfa:	4b4d      	ldr	r3, [pc, #308]	@ (800bd30 <ip4_input+0x274>)
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 f96b 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d105      	bne.n	800bc18 <ip4_input+0x15c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800bc0c:	4b48      	ldr	r3, [pc, #288]	@ (800bd30 <ip4_input+0x274>)
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bc14:	2be0      	cmp	r3, #224	@ 0xe0
 800bc16:	d104      	bne.n	800bc22 <ip4_input+0x166>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7f9 fc33 	bl	8005484 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e082      	b.n	800bd28 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d104      	bne.n	800bc32 <ip4_input+0x176>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7f9 fc2b 	bl	8005484 <pbuf_free>
    return ERR_OK;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e07a      	b.n	800bd28 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	88db      	ldrh	r3, [r3, #6]
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	461a      	mov	r2, r3
 800bc3a:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800bc3e:	4013      	ands	r3, r2
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00b      	beq.n	800bc5c <ip4_input+0x1a0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fc8d 	bl	800c564 <ip4_reass>
 800bc4a:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <ip4_input+0x19a>
      return ERR_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	e068      	b.n	800bd28 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bc5c:	4a34      	ldr	r2, [pc, #208]	@ (800bd30 <ip4_input+0x274>)
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bc62:	4a33      	ldr	r2, [pc, #204]	@ (800bd30 <ip4_input+0x274>)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bc68:	4a31      	ldr	r2, [pc, #196]	@ (800bd30 <ip4_input+0x274>)
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	f003 030f 	and.w	r3, r3, #15
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	4b2c      	ldr	r3, [pc, #176]	@ (800bd30 <ip4_input+0x274>)
 800bc7e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800bc80:	897b      	ldrh	r3, [r7, #10]
 800bc82:	425b      	negs	r3, r3
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	b21b      	sxth	r3, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7f9 fbd6 	bl	800543c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	7a5b      	ldrb	r3, [r3, #9]
 800bc94:	2b11      	cmp	r3, #17
 800bc96:	d006      	beq.n	800bca6 <ip4_input+0x1ea>
 800bc98:	2b11      	cmp	r3, #17
 800bc9a:	dc13      	bgt.n	800bcc4 <ip4_input+0x208>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d00c      	beq.n	800bcba <ip4_input+0x1fe>
 800bca0:	2b06      	cmp	r3, #6
 800bca2:	d005      	beq.n	800bcb0 <ip4_input+0x1f4>
 800bca4:	e00e      	b.n	800bcc4 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7fe fb7d 	bl	800a3a8 <udp_input>
      break;
 800bcae:	e028      	b.n	800bd02 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7fb f834 	bl	8006d20 <tcp_input>
      break;
 800bcb8:	e023      	b.n	800bd02 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7ff fd05 	bl	800b6cc <icmp_input>
      break;
 800bcc2:	e01e      	b.n	800bd02 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bcc4:	4b1a      	ldr	r3, [pc, #104]	@ (800bd30 <ip4_input+0x274>)
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	6939      	ldr	r1, [r7, #16]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 f906 	bl	800bedc <ip4_addr_isbroadcast_u32>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d112      	bne.n	800bcfc <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bcd6:	4b16      	ldr	r3, [pc, #88]	@ (800bd30 <ip4_input+0x274>)
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bcde:	2be0      	cmp	r3, #224	@ 0xe0
 800bce0:	d00c      	beq.n	800bcfc <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800bce2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7f9 fbb9 	bl	8005460 <pbuf_header_force>
        p->payload = iphdr;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bcf4:	2102      	movs	r1, #2
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff fdee 	bl	800b8d8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7f9 fbc1 	bl	8005484 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bd02:	4b0b      	ldr	r3, [pc, #44]	@ (800bd30 <ip4_input+0x274>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800bd08:	4b09      	ldr	r3, [pc, #36]	@ (800bd30 <ip4_input+0x274>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800bd0e:	4b08      	ldr	r3, [pc, #32]	@ (800bd30 <ip4_input+0x274>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bd14:	4b06      	ldr	r3, [pc, #24]	@ (800bd30 <ip4_input+0x274>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800bd1a:	4b05      	ldr	r3, [pc, #20]	@ (800bd30 <ip4_input+0x274>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bd20:	4b03      	ldr	r3, [pc, #12]	@ (800bd30 <ip4_input+0x274>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	200036f0 	.word	0x200036f0
 800bd34:	20006c40 	.word	0x20006c40

0800bd38 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	@ 0x28
 800bd3c:	af04      	add	r7, sp, #16
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
 800bd44:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d009      	beq.n	800bd64 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d003      	beq.n	800bd5e <ip4_output_if+0x26>
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd60:	3304      	adds	r3, #4
 800bd62:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bd64:	78fa      	ldrb	r2, [r7, #3]
 800bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd68:	9302      	str	r3, [sp, #8]
 800bd6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	4613      	mov	r3, r2
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	6979      	ldr	r1, [r7, #20]
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f000 f805 	bl	800bd8c <ip4_output_if_src>
 800bd82:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b088      	sub	sp, #32
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
 800bd98:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	89db      	ldrh	r3, [r3, #14]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d006      	beq.n	800bdb0 <ip4_output_if_src+0x24>
 800bda2:	4b48      	ldr	r3, [pc, #288]	@ (800bec4 <ip4_output_if_src+0x138>)
 800bda4:	f240 3233 	movw	r2, #819	@ 0x333
 800bda8:	4947      	ldr	r1, [pc, #284]	@ (800bec8 <ip4_output_if_src+0x13c>)
 800bdaa:	4848      	ldr	r0, [pc, #288]	@ (800becc <ip4_output_if_src+0x140>)
 800bdac:	f001 f842 	bl	800ce34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d060      	beq.n	800be78 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bdb6:	2314      	movs	r3, #20
 800bdb8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800bdba:	2114      	movs	r1, #20
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f7f9 fb3d 	bl	800543c <pbuf_header>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bdc8:	f06f 0301 	mvn.w	r3, #1
 800bdcc:	e075      	b.n	800beba <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	895b      	ldrh	r3, [r3, #10]
 800bdd8:	2b13      	cmp	r3, #19
 800bdda:	d806      	bhi.n	800bdea <ip4_output_if_src+0x5e>
 800bddc:	4b39      	ldr	r3, [pc, #228]	@ (800bec4 <ip4_output_if_src+0x138>)
 800bdde:	f44f 7258 	mov.w	r2, #864	@ 0x360
 800bde2:	493b      	ldr	r1, [pc, #236]	@ (800bed0 <ip4_output_if_src+0x144>)
 800bde4:	4839      	ldr	r0, [pc, #228]	@ (800becc <ip4_output_if_src+0x140>)
 800bde6:	f001 f825 	bl	800ce34 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	78fa      	ldrb	r2, [r7, #3]
 800bdee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800bdf6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800be00:	8b7b      	ldrh	r3, [r7, #26]
 800be02:	089b      	lsrs	r3, r3, #2
 800be04:	b29b      	uxth	r3, r3
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800be18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	891b      	ldrh	r3, [r3, #8]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7f8 fa1f 	bl	8004262 <lwip_htons>
 800be24:	4603      	mov	r3, r0
 800be26:	461a      	mov	r2, r3
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	2200      	movs	r2, #0
 800be30:	719a      	strb	r2, [r3, #6]
 800be32:	2200      	movs	r2, #0
 800be34:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800be36:	4b27      	ldr	r3, [pc, #156]	@ (800bed4 <ip4_output_if_src+0x148>)
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7f8 fa11 	bl	8004262 <lwip_htons>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800be48:	4b22      	ldr	r3, [pc, #136]	@ (800bed4 <ip4_output_if_src+0x148>)
 800be4a:	881b      	ldrh	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	b29a      	uxth	r2, r3
 800be50:	4b20      	ldr	r3, [pc, #128]	@ (800bed4 <ip4_output_if_src+0x148>)
 800be52:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d104      	bne.n	800be64 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800be5a:	4b1f      	ldr	r3, [pc, #124]	@ (800bed8 <ip4_output_if_src+0x14c>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	60da      	str	r2, [r3, #12]
 800be62:	e003      	b.n	800be6c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	2200      	movs	r2, #0
 800be70:	729a      	strb	r2, [r3, #10]
 800be72:	2200      	movs	r2, #0
 800be74:	72da      	strb	r2, [r3, #11]
 800be76:	e008      	b.n	800be8a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800be84:	f107 0314 	add.w	r3, r7, #20
 800be88:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00c      	beq.n	800beac <ip4_output_if_src+0x120>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	891a      	ldrh	r2, [r3, #8]
 800be96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d906      	bls.n	800beac <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 fd08 	bl	800c8b8 <ip4_frag>
 800bea8:	4603      	mov	r3, r0
 800beaa:	e006      	b.n	800beba <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800beac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	68f9      	ldr	r1, [r7, #12]
 800beb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800beb6:	4798      	blx	r3
 800beb8:	4603      	mov	r3, r0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3720      	adds	r7, #32
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	0800f508 	.word	0x0800f508
 800bec8:	0800f53c 	.word	0x0800f53c
 800becc:	0800f548 	.word	0x0800f548
 800bed0:	0800f570 	.word	0x0800f570
 800bed4:	20006d9e 	.word	0x20006d9e
 800bed8:	0800f90c 	.word	0x0800f90c

0800bedc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef0:	d002      	beq.n	800bef8 <ip4_addr_isbroadcast_u32+0x1c>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d101      	bne.n	800befc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bef8:	2301      	movs	r3, #1
 800befa:	e02a      	b.n	800bf52 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e021      	b.n	800bf52 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	3304      	adds	r3, #4
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d101      	bne.n	800bf1e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	e019      	b.n	800bf52 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	3304      	adds	r3, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	405a      	eors	r2, r3
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4013      	ands	r3, r2
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10d      	bne.n	800bf50 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	3308      	adds	r3, #8
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	43da      	mvns	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d101      	bne.n	800bf50 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800bf50:	2300      	movs	r3, #0
  }
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bc80      	pop	{r7}
 800bf5a:	4770      	bx	lr

0800bf5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800bf66:	4b12      	ldr	r3, [pc, #72]	@ (800bfb0 <ip_reass_tmr+0x54>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800bf6c:	e018      	b.n	800bfa0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	7fdb      	ldrb	r3, [r3, #31]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00b      	beq.n	800bf8e <ip_reass_tmr+0x32>
      r->timer--;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	7fdb      	ldrb	r3, [r3, #31]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e008      	b.n	800bfa0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800bf98:	68b9      	ldr	r1, [r7, #8]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f80a 	bl	800bfb4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e3      	bne.n	800bf6e <ip_reass_tmr+0x12>
     }
   }
}
 800bfa6:	bf00      	nop
 800bfa8:	bf00      	nop
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	20006da0 	.word	0x20006da0

0800bfb4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b088      	sub	sp, #32
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d105      	bne.n	800bfd6 <ip_reass_free_complete_datagram+0x22>
 800bfca:	4b45      	ldr	r3, [pc, #276]	@ (800c0e0 <ip_reass_free_complete_datagram+0x12c>)
 800bfcc:	22ab      	movs	r2, #171	@ 0xab
 800bfce:	4945      	ldr	r1, [pc, #276]	@ (800c0e4 <ip_reass_free_complete_datagram+0x130>)
 800bfd0:	4845      	ldr	r0, [pc, #276]	@ (800c0e8 <ip_reass_free_complete_datagram+0x134>)
 800bfd2:	f000 ff2f 	bl	800ce34 <iprintf>
  if (prev != NULL) {
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00a      	beq.n	800bff2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d005      	beq.n	800bff2 <ip_reass_free_complete_datagram+0x3e>
 800bfe6:	4b3e      	ldr	r3, [pc, #248]	@ (800c0e0 <ip_reass_free_complete_datagram+0x12c>)
 800bfe8:	22ad      	movs	r2, #173	@ 0xad
 800bfea:	4940      	ldr	r1, [pc, #256]	@ (800c0ec <ip_reass_free_complete_datagram+0x138>)
 800bfec:	483e      	ldr	r0, [pc, #248]	@ (800c0e8 <ip_reass_free_complete_datagram+0x134>)
 800bfee:	f000 ff21 	bl	800ce34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	889b      	ldrh	r3, [r3, #4]
 800bffe:	b29b      	uxth	r3, r3
 800c000:	2b00      	cmp	r3, #0
 800c002:	d12a      	bne.n	800c05a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	6858      	ldr	r0, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3308      	adds	r3, #8
 800c01a:	2214      	movs	r2, #20
 800c01c:	4619      	mov	r1, r3
 800c01e:	f000 ffe4 	bl	800cfea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c022:	2101      	movs	r1, #1
 800c024:	69b8      	ldr	r0, [r7, #24]
 800c026:	f7ff fc67 	bl	800b8f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c02a:	69b8      	ldr	r0, [r7, #24]
 800c02c:	f7f9 fabe 	bl	80055ac <pbuf_clen>
 800c030:	4603      	mov	r3, r0
 800c032:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c034:	8bfa      	ldrh	r2, [r7, #30]
 800c036:	8a7b      	ldrh	r3, [r7, #18]
 800c038:	4413      	add	r3, r2
 800c03a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c03e:	db05      	blt.n	800c04c <ip_reass_free_complete_datagram+0x98>
 800c040:	4b27      	ldr	r3, [pc, #156]	@ (800c0e0 <ip_reass_free_complete_datagram+0x12c>)
 800c042:	22bc      	movs	r2, #188	@ 0xbc
 800c044:	492a      	ldr	r1, [pc, #168]	@ (800c0f0 <ip_reass_free_complete_datagram+0x13c>)
 800c046:	4828      	ldr	r0, [pc, #160]	@ (800c0e8 <ip_reass_free_complete_datagram+0x134>)
 800c048:	f000 fef4 	bl	800ce34 <iprintf>
    pbufs_freed += clen;
 800c04c:	8bfa      	ldrh	r2, [r7, #30]
 800c04e:	8a7b      	ldrh	r3, [r7, #18]
 800c050:	4413      	add	r3, r2
 800c052:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c054:	69b8      	ldr	r0, [r7, #24]
 800c056:	f7f9 fa15 	bl	8005484 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c060:	e01f      	b.n	800c0a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f7f9 fa9a 	bl	80055ac <pbuf_clen>
 800c078:	4603      	mov	r3, r0
 800c07a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c07c:	8bfa      	ldrh	r2, [r7, #30]
 800c07e:	8a7b      	ldrh	r3, [r7, #18]
 800c080:	4413      	add	r3, r2
 800c082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c086:	db05      	blt.n	800c094 <ip_reass_free_complete_datagram+0xe0>
 800c088:	4b15      	ldr	r3, [pc, #84]	@ (800c0e0 <ip_reass_free_complete_datagram+0x12c>)
 800c08a:	22cc      	movs	r2, #204	@ 0xcc
 800c08c:	4918      	ldr	r1, [pc, #96]	@ (800c0f0 <ip_reass_free_complete_datagram+0x13c>)
 800c08e:	4816      	ldr	r0, [pc, #88]	@ (800c0e8 <ip_reass_free_complete_datagram+0x134>)
 800c090:	f000 fed0 	bl	800ce34 <iprintf>
    pbufs_freed += clen;
 800c094:	8bfa      	ldrh	r2, [r7, #30]
 800c096:	8a7b      	ldrh	r3, [r7, #18]
 800c098:	4413      	add	r3, r2
 800c09a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7f9 f9f1 	bl	8005484 <pbuf_free>
  while (p != NULL) {
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1dc      	bne.n	800c062 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f8c2 	bl	800c234 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c0b0:	4b10      	ldr	r3, [pc, #64]	@ (800c0f4 <ip_reass_free_complete_datagram+0x140>)
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	8bfa      	ldrh	r2, [r7, #30]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d905      	bls.n	800c0c6 <ip_reass_free_complete_datagram+0x112>
 800c0ba:	4b09      	ldr	r3, [pc, #36]	@ (800c0e0 <ip_reass_free_complete_datagram+0x12c>)
 800c0bc:	22d2      	movs	r2, #210	@ 0xd2
 800c0be:	490e      	ldr	r1, [pc, #56]	@ (800c0f8 <ip_reass_free_complete_datagram+0x144>)
 800c0c0:	4809      	ldr	r0, [pc, #36]	@ (800c0e8 <ip_reass_free_complete_datagram+0x134>)
 800c0c2:	f000 feb7 	bl	800ce34 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c0f4 <ip_reass_free_complete_datagram+0x140>)
 800c0c8:	881a      	ldrh	r2, [r3, #0]
 800c0ca:	8bfb      	ldrh	r3, [r7, #30]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	4b08      	ldr	r3, [pc, #32]	@ (800c0f4 <ip_reass_free_complete_datagram+0x140>)
 800c0d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c0d4:	8bfb      	ldrh	r3, [r7, #30]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3720      	adds	r7, #32
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	0800f5a0 	.word	0x0800f5a0
 800c0e4:	0800f5dc 	.word	0x0800f5dc
 800c0e8:	0800f5e8 	.word	0x0800f5e8
 800c0ec:	0800f610 	.word	0x0800f610
 800c0f0:	0800f624 	.word	0x0800f624
 800c0f4:	20006da4 	.word	0x20006da4
 800c0f8:	0800f644 	.word	0x0800f644

0800c0fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08a      	sub	sp, #40	@ 0x28
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c10e:	2300      	movs	r3, #0
 800c110:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c112:	2300      	movs	r3, #0
 800c114:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c11a:	4b28      	ldr	r3, [pc, #160]	@ (800c1bc <ip_reass_remove_oldest_datagram+0xc0>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c120:	e030      	b.n	800c184 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c124:	695a      	ldr	r2, [r3, #20]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d10c      	bne.n	800c148 <ip_reass_remove_oldest_datagram+0x4c>
 800c12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c130:	699a      	ldr	r2, [r3, #24]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	429a      	cmp	r2, r3
 800c138:	d106      	bne.n	800c148 <ip_reass_remove_oldest_datagram+0x4c>
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	899a      	ldrh	r2, [r3, #12]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	889b      	ldrh	r3, [r3, #4]
 800c142:	b29b      	uxth	r3, r3
 800c144:	429a      	cmp	r2, r3
 800c146:	d014      	beq.n	800c172 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	3301      	adds	r3, #1
 800c14c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d104      	bne.n	800c15e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	61bb      	str	r3, [r7, #24]
 800c15c:	e009      	b.n	800c172 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c160:	7fda      	ldrb	r2, [r3, #31]
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	7fdb      	ldrb	r3, [r3, #31]
 800c166:	429a      	cmp	r2, r3
 800c168:	d803      	bhi.n	800c172 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1cb      	bne.n	800c122 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d008      	beq.n	800c1a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c190:	69b9      	ldr	r1, [r7, #24]
 800c192:	6a38      	ldr	r0, [r7, #32]
 800c194:	f7ff ff0e 	bl	800bfb4 <ip_reass_free_complete_datagram>
 800c198:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	da02      	bge.n	800c1b0 <ip_reass_remove_oldest_datagram+0xb4>
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	dcac      	bgt.n	800c10a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c1b0:	697b      	ldr	r3, [r7, #20]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3728      	adds	r7, #40	@ 0x28
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20006da0 	.word	0x20006da0

0800c1c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c1ca:	2004      	movs	r0, #4
 800c1cc:	f7f8 fbf2 	bl	80049b4 <memp_malloc>
 800c1d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d110      	bne.n	800c1fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff ff8e 	bl	800c0fc <ip_reass_remove_oldest_datagram>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	dc03      	bgt.n	800c1f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c1e8:	2004      	movs	r0, #4
 800c1ea:	f7f8 fbe3 	bl	80049b4 <memp_malloc>
 800c1ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	e016      	b.n	800c228 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 fe7d 	bl	800cefe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2203      	movs	r2, #3
 800c208:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c20a:	4b09      	ldr	r3, [pc, #36]	@ (800c230 <ip_reass_enqueue_new_datagram+0x70>)
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c212:	4a07      	ldr	r2, [pc, #28]	@ (800c230 <ip_reass_enqueue_new_datagram+0x70>)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3308      	adds	r3, #8
 800c21c:	2214      	movs	r2, #20
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	4618      	mov	r0, r3
 800c222:	f000 fee2 	bl	800cfea <memcpy>
  return ipr;
 800c226:	68fb      	ldr	r3, [r7, #12]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	20006da0 	.word	0x20006da0

0800c234 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c23e:	4b10      	ldr	r3, [pc, #64]	@ (800c280 <ip_reass_dequeue_datagram+0x4c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	429a      	cmp	r2, r3
 800c246:	d104      	bne.n	800c252 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a0c      	ldr	r2, [pc, #48]	@ (800c280 <ip_reass_dequeue_datagram+0x4c>)
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	e00d      	b.n	800c26e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d106      	bne.n	800c266 <ip_reass_dequeue_datagram+0x32>
 800c258:	4b0a      	ldr	r3, [pc, #40]	@ (800c284 <ip_reass_dequeue_datagram+0x50>)
 800c25a:	f240 1245 	movw	r2, #325	@ 0x145
 800c25e:	490a      	ldr	r1, [pc, #40]	@ (800c288 <ip_reass_dequeue_datagram+0x54>)
 800c260:	480a      	ldr	r0, [pc, #40]	@ (800c28c <ip_reass_dequeue_datagram+0x58>)
 800c262:	f000 fde7 	bl	800ce34 <iprintf>
    prev->next = ipr->next;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	2004      	movs	r0, #4
 800c272:	f7f8 fbeb 	bl	8004a4c <memp_free>
}
 800c276:	bf00      	nop
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20006da0 	.word	0x20006da0
 800c284:	0800f5a0 	.word	0x0800f5a0
 800c288:	0800f660 	.word	0x0800f660
 800c28c:	0800f5e8 	.word	0x0800f5e8

0800c290 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08c      	sub	sp, #48	@ 0x30
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c29c:	2300      	movs	r3, #0
 800c29e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	885b      	ldrh	r3, [r3, #2]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7f7 ffd6 	bl	8004262 <lwip_htons>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	f003 030f 	and.w	r3, r3, #15
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	1ad3      	subs	r3, r2, r3
 800c2ca:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	88db      	ldrh	r3, [r3, #6]
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7f7 ffc5 	bl	8004262 <lwip_htons>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800c2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	705a      	strb	r2, [r3, #1]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	709a      	strb	r2, [r3, #2]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2fe:	8b3a      	ldrh	r2, [r7, #24]
 800c300:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c302:	8b3a      	ldrh	r2, [r7, #24]
 800c304:	8b7b      	ldrh	r3, [r7, #26]
 800c306:	4413      	add	r3, r2
 800c308:	b29a      	uxth	r2, r3
 800c30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30c:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	627b      	str	r3, [r7, #36]	@ 0x24
 800c314:	e061      	b.n	800c3da <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31e:	889b      	ldrh	r3, [r3, #4]
 800c320:	b29a      	uxth	r2, r3
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	889b      	ldrh	r3, [r3, #4]
 800c326:	b29b      	uxth	r3, r3
 800c328:	429a      	cmp	r2, r3
 800c32a:	d232      	bcs.n	800c392 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c330:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c334:	2b00      	cmp	r3, #0
 800c336:	d01f      	beq.n	800c378 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33a:	889b      	ldrh	r3, [r3, #4]
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c340:	88db      	ldrh	r3, [r3, #6]
 800c342:	b29b      	uxth	r3, r3
 800c344:	429a      	cmp	r2, r3
 800c346:	f0c0 80e3 	bcc.w	800c510 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 800c34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34c:	88db      	ldrh	r3, [r3, #6]
 800c34e:	b29a      	uxth	r2, r3
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	889b      	ldrh	r3, [r3, #4]
 800c354:	b29b      	uxth	r3, r3
 800c356:	429a      	cmp	r2, r3
 800c358:	f200 80da 	bhi.w	800c510 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c364:	88db      	ldrh	r3, [r3, #6]
 800c366:	b29a      	uxth	r2, r3
 800c368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36a:	889b      	ldrh	r3, [r3, #4]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	429a      	cmp	r2, r3
 800c370:	d037      	beq.n	800c3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c376:	e034      	b.n	800c3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 800c378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37a:	88db      	ldrh	r3, [r3, #6]
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	889b      	ldrh	r3, [r3, #4]
 800c382:	b29b      	uxth	r3, r3
 800c384:	429a      	cmp	r2, r3
 800c386:	f200 80c5 	bhi.w	800c514 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	605a      	str	r2, [r3, #4]
      break;
 800c390:	e027      	b.n	800c3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 800c392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c394:	889b      	ldrh	r3, [r3, #4]
 800c396:	b29a      	uxth	r2, r3
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	889b      	ldrh	r3, [r3, #4]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	f000 80ba 	beq.w	800c518 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a6:	889b      	ldrh	r3, [r3, #4]
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	88db      	ldrh	r3, [r3, #6]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	f0c0 80b3 	bcc.w	800c51c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d009      	beq.n	800c3d0 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 800c3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3be:	88db      	ldrh	r3, [r3, #6]
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	889b      	ldrh	r3, [r3, #4]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d001      	beq.n	800c3d0 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800c3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d19a      	bne.n	800c316 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 800c3e0:	e000      	b.n	800c3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 800c3e2:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d12d      	bne.n	800c446 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 800c3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01c      	beq.n	800c42a <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f2:	88db      	ldrh	r3, [r3, #6]
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f8:	889b      	ldrh	r3, [r3, #4]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d906      	bls.n	800c40e <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 800c400:	4b51      	ldr	r3, [pc, #324]	@ (800c548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c402:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800c406:	4951      	ldr	r1, [pc, #324]	@ (800c54c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c408:	4851      	ldr	r0, [pc, #324]	@ (800c550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c40a:	f000 fd13 	bl	800ce34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	88db      	ldrh	r3, [r3, #6]
 800c418:	b29a      	uxth	r2, r3
 800c41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41c:	889b      	ldrh	r3, [r3, #4]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	429a      	cmp	r2, r3
 800c422:	d010      	beq.n	800c446 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	623b      	str	r3, [r7, #32]
 800c428:	e00d      	b.n	800c446 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d006      	beq.n	800c440 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 800c432:	4b45      	ldr	r3, [pc, #276]	@ (800c548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c434:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800c438:	4946      	ldr	r1, [pc, #280]	@ (800c554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c43a:	4845      	ldr	r0, [pc, #276]	@ (800c550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c43c:	f000 fcfa 	bl	800ce34 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d105      	bne.n	800c458 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	7f9b      	ldrb	r3, [r3, #30]
 800c450:	f003 0301 	and.w	r3, r3, #1
 800c454:	2b00      	cmp	r3, #0
 800c456:	d059      	beq.n	800c50c <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d04f      	beq.n	800c4fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d006      	beq.n	800c474 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	889b      	ldrh	r3, [r3, #4]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	623b      	str	r3, [r7, #32]
 800c478:	e041      	b.n	800c4fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47c:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800c47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c484:	e012      	b.n	800c4ac <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 800c486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800c48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48e:	88db      	ldrh	r3, [r3, #6]
 800c490:	b29a      	uxth	r2, r3
 800c492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c494:	889b      	ldrh	r3, [r3, #4]
 800c496:	b29b      	uxth	r3, r3
 800c498:	429a      	cmp	r2, r3
 800c49a:	d002      	beq.n	800c4a2 <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	623b      	str	r3, [r7, #32]
            break;
 800c4a0:	e007      	b.n	800c4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 800c4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800c4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1e9      	bne.n	800c486 <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d022      	beq.n	800c4fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d106      	bne.n	800c4ce <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 800c4c0:	4b21      	ldr	r3, [pc, #132]	@ (800c548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c4c2:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800c4c6:	4924      	ldr	r1, [pc, #144]	@ (800c558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c4c8:	4821      	ldr	r0, [pc, #132]	@ (800c550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c4ca:	f000 fcb3 	bl	800ce34 <iprintf>
          LWIP_ASSERT("sanity check",
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d106      	bne.n	800c4e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 800c4da:	4b1b      	ldr	r3, [pc, #108]	@ (800c548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c4dc:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800c4e0:	491d      	ldr	r1, [pc, #116]	@ (800c558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c4e2:	481b      	ldr	r0, [pc, #108]	@ (800c550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c4e4:	f000 fca6 	bl	800ce34 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d006      	beq.n	800c4fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 800c4f0:	4b15      	ldr	r3, [pc, #84]	@ (800c548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c4f2:	f240 12d7 	movw	r2, #471	@ 0x1d7
 800c4f6:	4919      	ldr	r1, [pc, #100]	@ (800c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c4f8:	4815      	ldr	r0, [pc, #84]	@ (800c550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c4fa:	f000 fc9b 	bl	800ce34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	2b00      	cmp	r3, #0
 800c502:	bf14      	ite	ne
 800c504:	2301      	movne	r3, #1
 800c506:	2300      	moveq	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	e018      	b.n	800c53e <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c50c:	2300      	movs	r3, #0
 800c50e:	e016      	b.n	800c53e <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 800c510:	bf00      	nop
 800c512:	e004      	b.n	800c51e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 800c514:	bf00      	nop
 800c516:	e002      	b.n	800c51e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800c518:	bf00      	nop
 800c51a:	e000      	b.n	800c51e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800c51c:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c51e:	68b8      	ldr	r0, [r7, #8]
 800c520:	f7f9 f844 	bl	80055ac <pbuf_clen>
 800c524:	4603      	mov	r3, r0
 800c526:	461a      	mov	r2, r3
 800c528:	4b0d      	ldr	r3, [pc, #52]	@ (800c560 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	1a9b      	subs	r3, r3, r2
 800c52e:	b29a      	uxth	r2, r3
 800c530:	4b0b      	ldr	r3, [pc, #44]	@ (800c560 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c532:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c534:	68b8      	ldr	r0, [r7, #8]
 800c536:	f7f8 ffa5 	bl	8005484 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c53a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3730      	adds	r7, #48	@ 0x30
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	0800f5a0 	.word	0x0800f5a0
 800c54c:	0800f67c 	.word	0x0800f67c
 800c550:	0800f5e8 	.word	0x0800f5e8
 800c554:	0800f69c 	.word	0x0800f69c
 800c558:	0800f6d4 	.word	0x0800f6d4
 800c55c:	0800f6e4 	.word	0x0800f6e4
 800c560:	20006da4 	.word	0x20006da4

0800c564 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08e      	sub	sp, #56	@ 0x38
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	f003 030f 	and.w	r3, r3, #15
 800c57a:	2b05      	cmp	r3, #5
 800c57c:	f040 8130 	bne.w	800c7e0 <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c582:	88db      	ldrh	r3, [r3, #6]
 800c584:	b29b      	uxth	r3, r3
 800c586:	4618      	mov	r0, r3
 800c588:	f7f7 fe6b 	bl	8004262 <lwip_htons>
 800c58c:	4603      	mov	r3, r0
 800c58e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c592:	b29b      	uxth	r3, r3
 800c594:	00db      	lsls	r3, r3, #3
 800c596:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59a:	885b      	ldrh	r3, [r3, #2]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7f7 fe5f 	bl	8004262 <lwip_htons>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	f003 030f 	and.w	r3, r3, #15
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7f8 fff6 	bl	80055ac <pbuf_clen>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c5c4:	4b8e      	ldr	r3, [pc, #568]	@ (800c800 <ip4_reass+0x29c>)
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5cc:	4413      	add	r3, r2
 800c5ce:	2b0a      	cmp	r3, #10
 800c5d0:	dd10      	ble.n	800c5f4 <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c5d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5d8:	f7ff fd90 	bl	800c0fc <ip_reass_remove_oldest_datagram>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f000 8100 	beq.w	800c7e4 <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c5e4:	4b86      	ldr	r3, [pc, #536]	@ (800c800 <ip4_reass+0x29c>)
 800c5e6:	881b      	ldrh	r3, [r3, #0]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5ec:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c5ee:	2b0a      	cmp	r3, #10
 800c5f0:	f300 80f8 	bgt.w	800c7e4 <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c5f4:	4b83      	ldr	r3, [pc, #524]	@ (800c804 <ip4_reass+0x2a0>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5fa:	e015      	b.n	800c628 <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fe:	695a      	ldr	r2, [r3, #20]
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	429a      	cmp	r2, r3
 800c606:	d10c      	bne.n	800c622 <ip4_reass+0xbe>
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	699a      	ldr	r2, [r3, #24]
 800c60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	429a      	cmp	r2, r3
 800c612:	d106      	bne.n	800c622 <ip4_reass+0xbe>
 800c614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c616:	899a      	ldrh	r2, [r3, #12]
 800c618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61a:	889b      	ldrh	r3, [r3, #4]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	429a      	cmp	r2, r3
 800c620:	d006      	beq.n	800c630 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	633b      	str	r3, [r7, #48]	@ 0x30
 800c628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1e6      	bne.n	800c5fc <ip4_reass+0x98>
 800c62e:	e000      	b.n	800c632 <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c630:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c634:	2b00      	cmp	r3, #0
 800c636:	d109      	bne.n	800c64c <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c638:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c63a:	4619      	mov	r1, r3
 800c63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c63e:	f7ff fdbf 	bl	800c1c0 <ip_reass_enqueue_new_datagram>
 800c642:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c646:	2b00      	cmp	r3, #0
 800c648:	d11c      	bne.n	800c684 <ip4_reass+0x120>
      goto nullreturn;
 800c64a:	e0d0      	b.n	800c7ee <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64e:	88db      	ldrh	r3, [r3, #6]
 800c650:	b29b      	uxth	r3, r3
 800c652:	4618      	mov	r0, r3
 800c654:	f7f7 fe05 	bl	8004262 <lwip_htons>
 800c658:	4603      	mov	r3, r0
 800c65a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d110      	bne.n	800c684 <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c664:	89db      	ldrh	r3, [r3, #14]
 800c666:	4618      	mov	r0, r3
 800c668:	f7f7 fdfb 	bl	8004262 <lwip_htons>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c672:	2b00      	cmp	r3, #0
 800c674:	d006      	beq.n	800c684 <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	3308      	adds	r3, #8
 800c67a:	2214      	movs	r2, #20
 800c67c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 fcb3 	bl	800cfea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c686:	88db      	ldrh	r3, [r3, #6]
 800c688:	b29b      	uxth	r3, r3
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bf0c      	ite	eq
 800c692:	2301      	moveq	r3, #1
 800c694:	2300      	movne	r3, #0
 800c696:	b2db      	uxtb	r3, r3
 800c698:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00e      	beq.n	800c6be <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 800c6a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6a4:	4413      	add	r3, r2
 800c6a6:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c6a8:	8b7a      	ldrh	r2, [r7, #26]
 800c6aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	f0c0 809b 	bcc.w	800c7e8 <ip4_reass+0x284>
 800c6b2:	8b7b      	ldrh	r3, [r7, #26]
 800c6b4:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	f200 8095 	bhi.w	800c7e8 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c6be:	69fa      	ldr	r2, [r7, #28]
 800c6c0:	6879      	ldr	r1, [r7, #4]
 800c6c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6c4:	f7ff fde4 	bl	800c290 <ip_reass_chain_frag_into_datagram_and_validate>
 800c6c8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d0:	f000 808c 	beq.w	800c7ec <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c6d4:	4b4a      	ldr	r3, [pc, #296]	@ (800c800 <ip4_reass+0x29c>)
 800c6d6:	881a      	ldrh	r2, [r3, #0]
 800c6d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6da:	4413      	add	r3, r2
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	4b48      	ldr	r3, [pc, #288]	@ (800c800 <ip4_reass+0x29c>)
 800c6e0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00d      	beq.n	800c704 <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 800c6e8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6ec:	4413      	add	r3, r2
 800c6ee:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f2:	8a7a      	ldrh	r2, [r7, #18]
 800c6f4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f8:	7f9b      	ldrb	r3, [r3, #30]
 800c6fa:	f043 0301 	orr.w	r3, r3, #1
 800c6fe:	b2da      	uxtb	r2, r3
 800c700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c702:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d168      	bne.n	800c7dc <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800c70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70c:	8b9b      	ldrh	r3, [r3, #28]
 800c70e:	3314      	adds	r3, #20
 800c710:	b29a      	uxth	r2, r3
 800c712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c714:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800c716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800c720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72a:	3308      	adds	r3, #8
 800c72c:	2214      	movs	r2, #20
 800c72e:	4619      	mov	r1, r3
 800c730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c732:	f000 fc5a 	bl	800cfea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800c736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c738:	8b9b      	ldrh	r3, [r3, #28]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f7 fd91 	bl	8004262 <lwip_htons>
 800c740:	4603      	mov	r3, r0
 800c742:	461a      	mov	r2, r3
 800c744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c746:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74a:	2200      	movs	r2, #0
 800c74c:	719a      	strb	r2, [r3, #6]
 800c74e:	2200      	movs	r2, #0
 800c750:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c754:	2200      	movs	r2, #0
 800c756:	729a      	strb	r2, [r3, #10]
 800c758:	2200      	movs	r2, #0
 800c75a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c762:	e00e      	b.n	800c782 <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 800c764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800c76a:	f06f 0113 	mvn.w	r1, #19
 800c76e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c770:	f7f8 fe64 	bl	800543c <pbuf_header>
      pbuf_cat(p, r);
 800c774:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7f8 ff50 	bl	800561c <pbuf_cat>
      r = iprh->next_pbuf;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800c782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1ed      	bne.n	800c764 <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c788:	4b1e      	ldr	r3, [pc, #120]	@ (800c804 <ip4_reass+0x2a0>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c78e:	429a      	cmp	r2, r3
 800c790:	d102      	bne.n	800c798 <ip4_reass+0x234>
      ipr_prev = NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c796:	e010      	b.n	800c7ba <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c798:	4b1a      	ldr	r3, [pc, #104]	@ (800c804 <ip4_reass+0x2a0>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c79e:	e007      	b.n	800c7b0 <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 800c7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d006      	beq.n	800c7b8 <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1f4      	bne.n	800c7a0 <ip4_reass+0x23c>
 800c7b6:	e000      	b.n	800c7ba <ip4_reass+0x256>
          break;
 800c7b8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c7ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7be:	f7ff fd39 	bl	800c234 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7f8 fef2 	bl	80055ac <pbuf_clen>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c800 <ip4_reass+0x29c>)
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	1a9b      	subs	r3, r3, r2
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c800 <ip4_reass+0x29c>)
 800c7d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	e00c      	b.n	800c7f6 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	e00a      	b.n	800c7f6 <ip4_reass+0x292>
    goto nullreturn;
 800c7e0:	bf00      	nop
 800c7e2:	e004      	b.n	800c7ee <ip4_reass+0x28a>
      goto nullreturn;
 800c7e4:	bf00      	nop
 800c7e6:	e002      	b.n	800c7ee <ip4_reass+0x28a>
      goto nullreturn;
 800c7e8:	bf00      	nop
 800c7ea:	e000      	b.n	800c7ee <ip4_reass+0x28a>
    goto nullreturn;
 800c7ec:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f8 fe48 	bl	8005484 <pbuf_free>
  return NULL;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3738      	adds	r7, #56	@ 0x38
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	20006da4 	.word	0x20006da4
 800c804:	20006da0 	.word	0x20006da0

0800c808 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800c80c:	2005      	movs	r0, #5
 800c80e:	f7f8 f8d1 	bl	80049b4 <memp_malloc>
 800c812:	4603      	mov	r3, r0
}
 800c814:	4618      	mov	r0, r3
 800c816:	bd80      	pop	{r7, pc}

0800c818 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d106      	bne.n	800c834 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c826:	4b07      	ldr	r3, [pc, #28]	@ (800c844 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c828:	f240 22ae 	movw	r2, #686	@ 0x2ae
 800c82c:	4906      	ldr	r1, [pc, #24]	@ (800c848 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c82e:	4807      	ldr	r0, [pc, #28]	@ (800c84c <ip_frag_free_pbuf_custom_ref+0x34>)
 800c830:	f000 fb00 	bl	800ce34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	2005      	movs	r0, #5
 800c838:	f7f8 f908 	bl	8004a4c <memp_free>
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	0800f5a0 	.word	0x0800f5a0
 800c848:	0800f708 	.word	0x0800f708
 800c84c:	0800f5e8 	.word	0x0800f5e8

0800c850 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <ipfrag_free_pbuf_custom+0x20>
 800c862:	4b11      	ldr	r3, [pc, #68]	@ (800c8a8 <ipfrag_free_pbuf_custom+0x58>)
 800c864:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 800c868:	4910      	ldr	r1, [pc, #64]	@ (800c8ac <ipfrag_free_pbuf_custom+0x5c>)
 800c86a:	4811      	ldr	r0, [pc, #68]	@ (800c8b0 <ipfrag_free_pbuf_custom+0x60>)
 800c86c:	f000 fae2 	bl	800ce34 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	429a      	cmp	r2, r3
 800c876:	d006      	beq.n	800c886 <ipfrag_free_pbuf_custom+0x36>
 800c878:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a8 <ipfrag_free_pbuf_custom+0x58>)
 800c87a:	f240 22b9 	movw	r2, #697	@ 0x2b9
 800c87e:	490d      	ldr	r1, [pc, #52]	@ (800c8b4 <ipfrag_free_pbuf_custom+0x64>)
 800c880:	480b      	ldr	r0, [pc, #44]	@ (800c8b0 <ipfrag_free_pbuf_custom+0x60>)
 800c882:	f000 fad7 	bl	800ce34 <iprintf>
  if (pcr->original != NULL) {
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	4618      	mov	r0, r3
 800c894:	f7f8 fdf6 	bl	8005484 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f7ff ffbd 	bl	800c818 <ip_frag_free_pbuf_custom_ref>
}
 800c89e:	bf00      	nop
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	0800f5a0 	.word	0x0800f5a0
 800c8ac:	0800f714 	.word	0x0800f714
 800c8b0:	0800f5e8 	.word	0x0800f5e8
 800c8b4:	0800f720 	.word	0x0800f720

0800c8b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b092      	sub	sp, #72	@ 0x48
 800c8bc:	af02      	add	r7, sp, #8
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c8cc:	3b14      	subs	r3, #20
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	da00      	bge.n	800c8d4 <ip4_frag+0x1c>
 800c8d2:	3307      	adds	r3, #7
 800c8d4:	10db      	asrs	r3, r3, #3
 800c8d6:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c8d8:	2314      	movs	r3, #20
 800c8da:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 800c8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	f003 030f 	and.w	r3, r3, #15
 800c8ee:	2b05      	cmp	r3, #5
 800c8f0:	d009      	beq.n	800c906 <ip4_frag+0x4e>
 800c8f2:	4b7a      	ldr	r3, [pc, #488]	@ (800cadc <ip4_frag+0x224>)
 800c8f4:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800c8f8:	4979      	ldr	r1, [pc, #484]	@ (800cae0 <ip4_frag+0x228>)
 800c8fa:	487a      	ldr	r0, [pc, #488]	@ (800cae4 <ip4_frag+0x22c>)
 800c8fc:	f000 fa9a 	bl	800ce34 <iprintf>
 800c900:	f06f 0305 	mvn.w	r3, #5
 800c904:	e0e6      	b.n	800cad4 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c908:	88db      	ldrh	r3, [r3, #6]
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7f7 fca8 	bl	8004262 <lwip_htons>
 800c912:	4603      	mov	r3, r0
 800c914:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 800c916:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c91c:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800c91e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d009      	beq.n	800c93c <ip4_frag+0x84>
 800c928:	4b6c      	ldr	r3, [pc, #432]	@ (800cadc <ip4_frag+0x224>)
 800c92a:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c92e:	496e      	ldr	r1, [pc, #440]	@ (800cae8 <ip4_frag+0x230>)
 800c930:	486c      	ldr	r0, [pc, #432]	@ (800cae4 <ip4_frag+0x22c>)
 800c932:	f000 fa7f 	bl	800ce34 <iprintf>
 800c936:	f06f 0305 	mvn.w	r3, #5
 800c93a:	e0cb      	b.n	800cad4 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	891b      	ldrh	r3, [r3, #8]
 800c940:	3b14      	subs	r3, #20
 800c942:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 800c944:	e0bd      	b.n	800cac2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800c946:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c948:	00da      	lsls	r2, r3, #3
 800c94a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c94c:	4293      	cmp	r3, r2
 800c94e:	bfa8      	it	ge
 800c950:	4613      	movge	r3, r2
 800c952:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c954:	2200      	movs	r2, #0
 800c956:	2114      	movs	r1, #20
 800c958:	2002      	movs	r0, #2
 800c95a:	f7f8 fa1b 	bl	8004d94 <pbuf_alloc>
 800c95e:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	2b00      	cmp	r3, #0
 800c964:	f000 80b3 	beq.w	800cace <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	895b      	ldrh	r3, [r3, #10]
 800c96c:	2b13      	cmp	r3, #19
 800c96e:	d806      	bhi.n	800c97e <ip4_frag+0xc6>
 800c970:	4b5a      	ldr	r3, [pc, #360]	@ (800cadc <ip4_frag+0x224>)
 800c972:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800c976:	495d      	ldr	r1, [pc, #372]	@ (800caec <ip4_frag+0x234>)
 800c978:	485a      	ldr	r0, [pc, #360]	@ (800cae4 <ip4_frag+0x22c>)
 800c97a:	f000 fa5b 	bl	800ce34 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	2214      	movs	r2, #20
 800c984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c986:	4618      	mov	r0, r3
 800c988:	f000 fb2f 	bl	800cfea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 800c992:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c994:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 800c996:	e04f      	b.n	800ca38 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	895a      	ldrh	r2, [r3, #10]
 800c99c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c9a2:	8b7a      	ldrh	r2, [r7, #26]
 800c9a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	bf28      	it	cs
 800c9aa:	4613      	movcs	r3, r2
 800c9ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c9ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d105      	bne.n	800c9c0 <ip4_frag+0x108>
        poff = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	60fb      	str	r3, [r7, #12]
        continue;
 800c9be:	e03b      	b.n	800ca38 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c9c0:	f7ff ff22 	bl	800c808 <ip_frag_alloc_pbuf_custom_ref>
 800c9c4:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d103      	bne.n	800c9d4 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 800c9cc:	6a38      	ldr	r0, [r7, #32]
 800c9ce:	f7f8 fd59 	bl	8005484 <pbuf_free>
        goto memerr;
 800c9d2:	e07d      	b.n	800cad0 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c9d4:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c9da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9dc:	4413      	add	r3, r2
 800c9de:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800c9e0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c9e2:	9201      	str	r2, [sp, #4]
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	2004      	movs	r0, #4
 800c9ec:	f7f8 fb6c 	bl	80050c8 <pbuf_alloced_custom>
 800c9f0:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d106      	bne.n	800ca06 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c9f8:	6978      	ldr	r0, [r7, #20]
 800c9fa:	f7ff ff0d 	bl	800c818 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c9fe:	6a38      	ldr	r0, [r7, #32]
 800ca00:	f7f8 fd40 	bl	8005484 <pbuf_free>
        goto memerr;
 800ca04:	e064      	b.n	800cad0 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f7f8 fde6 	bl	80055d8 <pbuf_ref>
      pcr->original = p;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	4a36      	ldr	r2, [pc, #216]	@ (800caf0 <ip4_frag+0x238>)
 800ca16:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ca18:	6939      	ldr	r1, [r7, #16]
 800ca1a:	6a38      	ldr	r0, [r7, #32]
 800ca1c:	f7f8 fdfe 	bl	800561c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800ca20:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ca22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 800ca28:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d004      	beq.n	800ca38 <ip4_frag+0x180>
        poff = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ca38:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1ac      	bne.n	800c998 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 800ca3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ca40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ca42:	4413      	add	r3, r2
 800ca44:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ca4a:	f1a3 0213 	sub.w	r2, r3, #19
 800ca4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca50:	429a      	cmp	r2, r3
 800ca52:	bfcc      	ite	gt
 800ca54:	2301      	movgt	r3, #1
 800ca56:	2300      	movle	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ca5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ca5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca62:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d103      	bne.n	800ca72 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800ca6a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ca6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ca70:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ca72:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7f7 fbf4 	bl	8004262 <lwip_htons>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca80:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ca82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca84:	3314      	adds	r3, #20
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f7 fbea 	bl	8004262 <lwip_htons>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca94:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ca96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca98:	2200      	movs	r2, #0
 800ca9a:	729a      	strb	r2, [r3, #10]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	695b      	ldr	r3, [r3, #20]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	6a39      	ldr	r1, [r7, #32]
 800caa8:	68b8      	ldr	r0, [r7, #8]
 800caaa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800caac:	6a38      	ldr	r0, [r7, #32]
 800caae:	f7f8 fce9 	bl	8005484 <pbuf_free>
    left -= fragsize;
 800cab2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cab4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 800caba:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800cabc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800cabe:	4413      	add	r3, r2
 800cac0:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 800cac2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f47f af3e 	bne.w	800c946 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	e002      	b.n	800cad4 <ip4_frag+0x21c>
      goto memerr;
 800cace:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3740      	adds	r7, #64	@ 0x40
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	0800f5a0 	.word	0x0800f5a0
 800cae0:	0800f72c 	.word	0x0800f72c
 800cae4:	0800f5e8 	.word	0x0800f5e8
 800cae8:	0800f754 	.word	0x0800f754
 800caec:	0800f770 	.word	0x0800f770
 800caf0:	0800c851 	.word	0x0800c851

0800caf4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800cafe:	230e      	movs	r3, #14
 800cb00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	895b      	ldrh	r3, [r3, #10]
 800cb06:	2b0e      	cmp	r3, #14
 800cb08:	d977      	bls.n	800cbfa <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	7b1a      	ldrb	r2, [r3, #12]
 800cb14:	7b5b      	ldrb	r3, [r3, #13]
 800cb16:	021b      	lsls	r3, r3, #8
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d023      	beq.n	800cb70 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d10f      	bne.n	800cb50 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	785b      	ldrb	r3, [r3, #1]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d11b      	bne.n	800cb70 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cb3c:	2b5e      	cmp	r3, #94	@ 0x5e
 800cb3e:	d117      	bne.n	800cb70 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	7b5b      	ldrb	r3, [r3, #13]
 800cb44:	f043 0310 	orr.w	r3, r3, #16
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	735a      	strb	r2, [r3, #13]
 800cb4e:	e00f      	b.n	800cb70 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	2206      	movs	r2, #6
 800cb54:	4931      	ldr	r1, [pc, #196]	@ (800cc1c <ethernet_input+0x128>)
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f9c1 	bl	800cede <memcmp>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	7b5b      	ldrb	r3, [r3, #13]
 800cb66:	f043 0308 	orr.w	r3, r3, #8
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cb70:	89fb      	ldrh	r3, [r7, #14]
 800cb72:	2b08      	cmp	r3, #8
 800cb74:	d003      	beq.n	800cb7e <ethernet_input+0x8a>
 800cb76:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800cb7a:	d01e      	beq.n	800cbba <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cb7c:	e046      	b.n	800cc0c <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cb84:	f003 0308 	and.w	r3, r3, #8
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d038      	beq.n	800cbfe <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	895b      	ldrh	r3, [r3, #10]
 800cb90:	461a      	mov	r2, r3
 800cb92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	db33      	blt.n	800cc02 <ethernet_input+0x10e>
 800cb9a:	8afb      	ldrh	r3, [r7, #22]
 800cb9c:	425b      	negs	r3, r3
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	b21b      	sxth	r3, r3
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7f8 fc49 	bl	800543c <pbuf_header>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d128      	bne.n	800cc02 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7fe ff82 	bl	800babc <ip4_input>
      break;
 800cbb8:	e01d      	b.n	800cbf6 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cbc0:	f003 0308 	and.w	r3, r3, #8
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01e      	beq.n	800cc06 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	895b      	ldrh	r3, [r3, #10]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	db19      	blt.n	800cc0a <ethernet_input+0x116>
 800cbd6:	8afb      	ldrh	r3, [r7, #22]
 800cbd8:	425b      	negs	r3, r3
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	b21b      	sxth	r3, r3
 800cbde:	4619      	mov	r1, r3
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7f8 fc2b 	bl	800543c <pbuf_header>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d10e      	bne.n	800cc0a <ethernet_input+0x116>
        etharp_input(p, netif);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7fe f952 	bl	800ae98 <etharp_input>
      break;
 800cbf4:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e00c      	b.n	800cc14 <ethernet_input+0x120>
    goto free_and_return;
 800cbfa:	bf00      	nop
 800cbfc:	e006      	b.n	800cc0c <ethernet_input+0x118>
        goto free_and_return;
 800cbfe:	bf00      	nop
 800cc00:	e004      	b.n	800cc0c <ethernet_input+0x118>
        goto free_and_return;
 800cc02:	bf00      	nop
 800cc04:	e002      	b.n	800cc0c <ethernet_input+0x118>
        goto free_and_return;
 800cc06:	bf00      	nop
 800cc08:	e000      	b.n	800cc0c <ethernet_input+0x118>
        goto free_and_return;
 800cc0a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7f8 fc39 	bl	8005484 <pbuf_free>
  return ERR_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	0800f910 	.word	0x0800f910

0800cc20 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
 800cc2c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cc2e:	8c3b      	ldrh	r3, [r7, #32]
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f7 fb16 	bl	8004262 <lwip_htons>
 800cc36:	4603      	mov	r3, r0
 800cc38:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800cc3a:	210e      	movs	r1, #14
 800cc3c:	68b8      	ldr	r0, [r7, #8]
 800cc3e:	f7f8 fbfd 	bl	800543c <pbuf_header>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d125      	bne.n	800cc94 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	8afa      	ldrh	r2, [r7, #22]
 800cc52:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2206      	movs	r2, #6
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 f9c5 	bl	800cfea <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	3306      	adds	r3, #6
 800cc64:	2206      	movs	r2, #6
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 f9be 	bl	800cfea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc74:	2b06      	cmp	r3, #6
 800cc76:	d006      	beq.n	800cc86 <ethernet_output+0x66>
 800cc78:	4b0a      	ldr	r3, [pc, #40]	@ (800cca4 <ethernet_output+0x84>)
 800cc7a:	f240 122b 	movw	r2, #299	@ 0x12b
 800cc7e:	490a      	ldr	r1, [pc, #40]	@ (800cca8 <ethernet_output+0x88>)
 800cc80:	480a      	ldr	r0, [pc, #40]	@ (800ccac <ethernet_output+0x8c>)
 800cc82:	f000 f8d7 	bl	800ce34 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	4798      	blx	r3
 800cc90:	4603      	mov	r3, r0
 800cc92:	e002      	b.n	800cc9a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800cc94:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800cc96:	f06f 0301 	mvn.w	r3, #1
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	0800f790 	.word	0x0800f790
 800cca8:	0800f7c8 	.word	0x0800f7c8
 800ccac:	0800f7fc 	.word	0x0800f7fc

0800ccb0 <std>:
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	b510      	push	{r4, lr}
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	e9c0 3300 	strd	r3, r3, [r0]
 800ccba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccbe:	6083      	str	r3, [r0, #8]
 800ccc0:	8181      	strh	r1, [r0, #12]
 800ccc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ccc4:	81c2      	strh	r2, [r0, #14]
 800ccc6:	6183      	str	r3, [r0, #24]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	2208      	movs	r2, #8
 800cccc:	305c      	adds	r0, #92	@ 0x5c
 800ccce:	f000 f916 	bl	800cefe <memset>
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd08 <std+0x58>)
 800ccd4:	6224      	str	r4, [r4, #32]
 800ccd6:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccd8:	4b0c      	ldr	r3, [pc, #48]	@ (800cd0c <std+0x5c>)
 800ccda:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccdc:	4b0c      	ldr	r3, [pc, #48]	@ (800cd10 <std+0x60>)
 800ccde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cce0:	4b0c      	ldr	r3, [pc, #48]	@ (800cd14 <std+0x64>)
 800cce2:	6323      	str	r3, [r4, #48]	@ 0x30
 800cce4:	4b0c      	ldr	r3, [pc, #48]	@ (800cd18 <std+0x68>)
 800cce6:	429c      	cmp	r4, r3
 800cce8:	d006      	beq.n	800ccf8 <std+0x48>
 800ccea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccee:	4294      	cmp	r4, r2
 800ccf0:	d002      	beq.n	800ccf8 <std+0x48>
 800ccf2:	33d0      	adds	r3, #208	@ 0xd0
 800ccf4:	429c      	cmp	r4, r3
 800ccf6:	d105      	bne.n	800cd04 <std+0x54>
 800ccf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd00:	f000 b970 	b.w	800cfe4 <__retarget_lock_init_recursive>
 800cd04:	bd10      	pop	{r4, pc}
 800cd06:	bf00      	nop
 800cd08:	0800ce59 	.word	0x0800ce59
 800cd0c:	0800ce7b 	.word	0x0800ce7b
 800cd10:	0800ceb3 	.word	0x0800ceb3
 800cd14:	0800ced7 	.word	0x0800ced7
 800cd18:	20006da8 	.word	0x20006da8

0800cd1c <stdio_exit_handler>:
 800cd1c:	4a02      	ldr	r2, [pc, #8]	@ (800cd28 <stdio_exit_handler+0xc>)
 800cd1e:	4903      	ldr	r1, [pc, #12]	@ (800cd2c <stdio_exit_handler+0x10>)
 800cd20:	4803      	ldr	r0, [pc, #12]	@ (800cd30 <stdio_exit_handler+0x14>)
 800cd22:	f000 b869 	b.w	800cdf8 <_fwalk_sglue>
 800cd26:	bf00      	nop
 800cd28:	20000014 	.word	0x20000014
 800cd2c:	0800d899 	.word	0x0800d899
 800cd30:	20000024 	.word	0x20000024

0800cd34 <cleanup_stdio>:
 800cd34:	6841      	ldr	r1, [r0, #4]
 800cd36:	4b0c      	ldr	r3, [pc, #48]	@ (800cd68 <cleanup_stdio+0x34>)
 800cd38:	b510      	push	{r4, lr}
 800cd3a:	4299      	cmp	r1, r3
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	d001      	beq.n	800cd44 <cleanup_stdio+0x10>
 800cd40:	f000 fdaa 	bl	800d898 <_fflush_r>
 800cd44:	68a1      	ldr	r1, [r4, #8]
 800cd46:	4b09      	ldr	r3, [pc, #36]	@ (800cd6c <cleanup_stdio+0x38>)
 800cd48:	4299      	cmp	r1, r3
 800cd4a:	d002      	beq.n	800cd52 <cleanup_stdio+0x1e>
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f000 fda3 	bl	800d898 <_fflush_r>
 800cd52:	68e1      	ldr	r1, [r4, #12]
 800cd54:	4b06      	ldr	r3, [pc, #24]	@ (800cd70 <cleanup_stdio+0x3c>)
 800cd56:	4299      	cmp	r1, r3
 800cd58:	d004      	beq.n	800cd64 <cleanup_stdio+0x30>
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd60:	f000 bd9a 	b.w	800d898 <_fflush_r>
 800cd64:	bd10      	pop	{r4, pc}
 800cd66:	bf00      	nop
 800cd68:	20006da8 	.word	0x20006da8
 800cd6c:	20006e10 	.word	0x20006e10
 800cd70:	20006e78 	.word	0x20006e78

0800cd74 <global_stdio_init.part.0>:
 800cd74:	b510      	push	{r4, lr}
 800cd76:	4b0b      	ldr	r3, [pc, #44]	@ (800cda4 <global_stdio_init.part.0+0x30>)
 800cd78:	4c0b      	ldr	r4, [pc, #44]	@ (800cda8 <global_stdio_init.part.0+0x34>)
 800cd7a:	4a0c      	ldr	r2, [pc, #48]	@ (800cdac <global_stdio_init.part.0+0x38>)
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	2104      	movs	r1, #4
 800cd82:	2200      	movs	r2, #0
 800cd84:	f7ff ff94 	bl	800ccb0 <std>
 800cd88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	2109      	movs	r1, #9
 800cd90:	f7ff ff8e 	bl	800ccb0 <std>
 800cd94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd98:	2202      	movs	r2, #2
 800cd9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd9e:	2112      	movs	r1, #18
 800cda0:	f7ff bf86 	b.w	800ccb0 <std>
 800cda4:	20006ee0 	.word	0x20006ee0
 800cda8:	20006da8 	.word	0x20006da8
 800cdac:	0800cd1d 	.word	0x0800cd1d

0800cdb0 <__sfp_lock_acquire>:
 800cdb0:	4801      	ldr	r0, [pc, #4]	@ (800cdb8 <__sfp_lock_acquire+0x8>)
 800cdb2:	f000 b918 	b.w	800cfe6 <__retarget_lock_acquire_recursive>
 800cdb6:	bf00      	nop
 800cdb8:	20006ee9 	.word	0x20006ee9

0800cdbc <__sfp_lock_release>:
 800cdbc:	4801      	ldr	r0, [pc, #4]	@ (800cdc4 <__sfp_lock_release+0x8>)
 800cdbe:	f000 b913 	b.w	800cfe8 <__retarget_lock_release_recursive>
 800cdc2:	bf00      	nop
 800cdc4:	20006ee9 	.word	0x20006ee9

0800cdc8 <__sinit>:
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	4604      	mov	r4, r0
 800cdcc:	f7ff fff0 	bl	800cdb0 <__sfp_lock_acquire>
 800cdd0:	6a23      	ldr	r3, [r4, #32]
 800cdd2:	b11b      	cbz	r3, 800cddc <__sinit+0x14>
 800cdd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdd8:	f7ff bff0 	b.w	800cdbc <__sfp_lock_release>
 800cddc:	4b04      	ldr	r3, [pc, #16]	@ (800cdf0 <__sinit+0x28>)
 800cdde:	6223      	str	r3, [r4, #32]
 800cde0:	4b04      	ldr	r3, [pc, #16]	@ (800cdf4 <__sinit+0x2c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1f5      	bne.n	800cdd4 <__sinit+0xc>
 800cde8:	f7ff ffc4 	bl	800cd74 <global_stdio_init.part.0>
 800cdec:	e7f2      	b.n	800cdd4 <__sinit+0xc>
 800cdee:	bf00      	nop
 800cdf0:	0800cd35 	.word	0x0800cd35
 800cdf4:	20006ee0 	.word	0x20006ee0

0800cdf8 <_fwalk_sglue>:
 800cdf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	4688      	mov	r8, r1
 800ce00:	4614      	mov	r4, r2
 800ce02:	2600      	movs	r6, #0
 800ce04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce08:	f1b9 0901 	subs.w	r9, r9, #1
 800ce0c:	d505      	bpl.n	800ce1a <_fwalk_sglue+0x22>
 800ce0e:	6824      	ldr	r4, [r4, #0]
 800ce10:	2c00      	cmp	r4, #0
 800ce12:	d1f7      	bne.n	800ce04 <_fwalk_sglue+0xc>
 800ce14:	4630      	mov	r0, r6
 800ce16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1a:	89ab      	ldrh	r3, [r5, #12]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d907      	bls.n	800ce30 <_fwalk_sglue+0x38>
 800ce20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce24:	3301      	adds	r3, #1
 800ce26:	d003      	beq.n	800ce30 <_fwalk_sglue+0x38>
 800ce28:	4629      	mov	r1, r5
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	47c0      	blx	r8
 800ce2e:	4306      	orrs	r6, r0
 800ce30:	3568      	adds	r5, #104	@ 0x68
 800ce32:	e7e9      	b.n	800ce08 <_fwalk_sglue+0x10>

0800ce34 <iprintf>:
 800ce34:	b40f      	push	{r0, r1, r2, r3}
 800ce36:	b507      	push	{r0, r1, r2, lr}
 800ce38:	4906      	ldr	r1, [pc, #24]	@ (800ce54 <iprintf+0x20>)
 800ce3a:	ab04      	add	r3, sp, #16
 800ce3c:	6808      	ldr	r0, [r1, #0]
 800ce3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce42:	6881      	ldr	r1, [r0, #8]
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	f000 f9fd 	bl	800d244 <_vfiprintf_r>
 800ce4a:	b003      	add	sp, #12
 800ce4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce50:	b004      	add	sp, #16
 800ce52:	4770      	bx	lr
 800ce54:	20000020 	.word	0x20000020

0800ce58 <__sread>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce60:	f000 f878 	bl	800cf54 <_read_r>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	bfab      	itete	ge
 800ce68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce6c:	181b      	addge	r3, r3, r0
 800ce6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce72:	bfac      	ite	ge
 800ce74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce76:	81a3      	strhlt	r3, [r4, #12]
 800ce78:	bd10      	pop	{r4, pc}

0800ce7a <__swrite>:
 800ce7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7e:	461f      	mov	r7, r3
 800ce80:	898b      	ldrh	r3, [r1, #12]
 800ce82:	4605      	mov	r5, r0
 800ce84:	05db      	lsls	r3, r3, #23
 800ce86:	460c      	mov	r4, r1
 800ce88:	4616      	mov	r6, r2
 800ce8a:	d505      	bpl.n	800ce98 <__swrite+0x1e>
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce94:	f000 f84c 	bl	800cf30 <_lseek_r>
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	4632      	mov	r2, r6
 800ce9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cea0:	81a3      	strh	r3, [r4, #12]
 800cea2:	4628      	mov	r0, r5
 800cea4:	463b      	mov	r3, r7
 800cea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceae:	f000 b863 	b.w	800cf78 <_write_r>

0800ceb2 <__sseek>:
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	460c      	mov	r4, r1
 800ceb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceba:	f000 f839 	bl	800cf30 <_lseek_r>
 800cebe:	1c43      	adds	r3, r0, #1
 800cec0:	89a3      	ldrh	r3, [r4, #12]
 800cec2:	bf15      	itete	ne
 800cec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ceca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cece:	81a3      	strheq	r3, [r4, #12]
 800ced0:	bf18      	it	ne
 800ced2:	81a3      	strhne	r3, [r4, #12]
 800ced4:	bd10      	pop	{r4, pc}

0800ced6 <__sclose>:
 800ced6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceda:	f000 b819 	b.w	800cf10 <_close_r>

0800cede <memcmp>:
 800cede:	b510      	push	{r4, lr}
 800cee0:	3901      	subs	r1, #1
 800cee2:	4402      	add	r2, r0
 800cee4:	4290      	cmp	r0, r2
 800cee6:	d101      	bne.n	800ceec <memcmp+0xe>
 800cee8:	2000      	movs	r0, #0
 800ceea:	e005      	b.n	800cef8 <memcmp+0x1a>
 800ceec:	7803      	ldrb	r3, [r0, #0]
 800ceee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cef2:	42a3      	cmp	r3, r4
 800cef4:	d001      	beq.n	800cefa <memcmp+0x1c>
 800cef6:	1b18      	subs	r0, r3, r4
 800cef8:	bd10      	pop	{r4, pc}
 800cefa:	3001      	adds	r0, #1
 800cefc:	e7f2      	b.n	800cee4 <memcmp+0x6>

0800cefe <memset>:
 800cefe:	4603      	mov	r3, r0
 800cf00:	4402      	add	r2, r0
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d100      	bne.n	800cf08 <memset+0xa>
 800cf06:	4770      	bx	lr
 800cf08:	f803 1b01 	strb.w	r1, [r3], #1
 800cf0c:	e7f9      	b.n	800cf02 <memset+0x4>
	...

0800cf10 <_close_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	2300      	movs	r3, #0
 800cf14:	4d05      	ldr	r5, [pc, #20]	@ (800cf2c <_close_r+0x1c>)
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	602b      	str	r3, [r5, #0]
 800cf1c:	f7f3 fdd1 	bl	8000ac2 <_close>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d102      	bne.n	800cf2a <_close_r+0x1a>
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	b103      	cbz	r3, 800cf2a <_close_r+0x1a>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	20006ee4 	.word	0x20006ee4

0800cf30 <_lseek_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	4611      	mov	r1, r2
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4d05      	ldr	r5, [pc, #20]	@ (800cf50 <_lseek_r+0x20>)
 800cf3c:	602a      	str	r2, [r5, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	f7f3 fde3 	bl	8000b0a <_lseek>
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d102      	bne.n	800cf4e <_lseek_r+0x1e>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	b103      	cbz	r3, 800cf4e <_lseek_r+0x1e>
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	20006ee4 	.word	0x20006ee4

0800cf54 <_read_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4604      	mov	r4, r0
 800cf58:	4608      	mov	r0, r1
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	4d05      	ldr	r5, [pc, #20]	@ (800cf74 <_read_r+0x20>)
 800cf60:	602a      	str	r2, [r5, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	f7f3 fd74 	bl	8000a50 <_read>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_read_r+0x1e>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_read_r+0x1e>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	20006ee4 	.word	0x20006ee4

0800cf78 <_write_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	4611      	mov	r1, r2
 800cf80:	2200      	movs	r2, #0
 800cf82:	4d05      	ldr	r5, [pc, #20]	@ (800cf98 <_write_r+0x20>)
 800cf84:	602a      	str	r2, [r5, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	f7f3 fd7f 	bl	8000a8a <_write>
 800cf8c:	1c43      	adds	r3, r0, #1
 800cf8e:	d102      	bne.n	800cf96 <_write_r+0x1e>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	b103      	cbz	r3, 800cf96 <_write_r+0x1e>
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	bd38      	pop	{r3, r4, r5, pc}
 800cf98:	20006ee4 	.word	0x20006ee4

0800cf9c <__libc_init_array>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	2600      	movs	r6, #0
 800cfa0:	4d0c      	ldr	r5, [pc, #48]	@ (800cfd4 <__libc_init_array+0x38>)
 800cfa2:	4c0d      	ldr	r4, [pc, #52]	@ (800cfd8 <__libc_init_array+0x3c>)
 800cfa4:	1b64      	subs	r4, r4, r5
 800cfa6:	10a4      	asrs	r4, r4, #2
 800cfa8:	42a6      	cmp	r6, r4
 800cfaa:	d109      	bne.n	800cfc0 <__libc_init_array+0x24>
 800cfac:	f000 fdd2 	bl	800db54 <_init>
 800cfb0:	2600      	movs	r6, #0
 800cfb2:	4d0a      	ldr	r5, [pc, #40]	@ (800cfdc <__libc_init_array+0x40>)
 800cfb4:	4c0a      	ldr	r4, [pc, #40]	@ (800cfe0 <__libc_init_array+0x44>)
 800cfb6:	1b64      	subs	r4, r4, r5
 800cfb8:	10a4      	asrs	r4, r4, #2
 800cfba:	42a6      	cmp	r6, r4
 800cfbc:	d105      	bne.n	800cfca <__libc_init_array+0x2e>
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}
 800cfc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfc4:	4798      	blx	r3
 800cfc6:	3601      	adds	r6, #1
 800cfc8:	e7ee      	b.n	800cfa8 <__libc_init_array+0xc>
 800cfca:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfce:	4798      	blx	r3
 800cfd0:	3601      	adds	r6, #1
 800cfd2:	e7f2      	b.n	800cfba <__libc_init_array+0x1e>
 800cfd4:	0800f95c 	.word	0x0800f95c
 800cfd8:	0800f95c 	.word	0x0800f95c
 800cfdc:	0800f95c 	.word	0x0800f95c
 800cfe0:	0800f960 	.word	0x0800f960

0800cfe4 <__retarget_lock_init_recursive>:
 800cfe4:	4770      	bx	lr

0800cfe6 <__retarget_lock_acquire_recursive>:
 800cfe6:	4770      	bx	lr

0800cfe8 <__retarget_lock_release_recursive>:
 800cfe8:	4770      	bx	lr

0800cfea <memcpy>:
 800cfea:	440a      	add	r2, r1
 800cfec:	4291      	cmp	r1, r2
 800cfee:	f100 33ff 	add.w	r3, r0, #4294967295
 800cff2:	d100      	bne.n	800cff6 <memcpy+0xc>
 800cff4:	4770      	bx	lr
 800cff6:	b510      	push	{r4, lr}
 800cff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cffc:	4291      	cmp	r1, r2
 800cffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d002:	d1f9      	bne.n	800cff8 <memcpy+0xe>
 800d004:	bd10      	pop	{r4, pc}
	...

0800d008 <_free_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4605      	mov	r5, r0
 800d00c:	2900      	cmp	r1, #0
 800d00e:	d040      	beq.n	800d092 <_free_r+0x8a>
 800d010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d014:	1f0c      	subs	r4, r1, #4
 800d016:	2b00      	cmp	r3, #0
 800d018:	bfb8      	it	lt
 800d01a:	18e4      	addlt	r4, r4, r3
 800d01c:	f000 f8de 	bl	800d1dc <__malloc_lock>
 800d020:	4a1c      	ldr	r2, [pc, #112]	@ (800d094 <_free_r+0x8c>)
 800d022:	6813      	ldr	r3, [r2, #0]
 800d024:	b933      	cbnz	r3, 800d034 <_free_r+0x2c>
 800d026:	6063      	str	r3, [r4, #4]
 800d028:	6014      	str	r4, [r2, #0]
 800d02a:	4628      	mov	r0, r5
 800d02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d030:	f000 b8da 	b.w	800d1e8 <__malloc_unlock>
 800d034:	42a3      	cmp	r3, r4
 800d036:	d908      	bls.n	800d04a <_free_r+0x42>
 800d038:	6820      	ldr	r0, [r4, #0]
 800d03a:	1821      	adds	r1, r4, r0
 800d03c:	428b      	cmp	r3, r1
 800d03e:	bf01      	itttt	eq
 800d040:	6819      	ldreq	r1, [r3, #0]
 800d042:	685b      	ldreq	r3, [r3, #4]
 800d044:	1809      	addeq	r1, r1, r0
 800d046:	6021      	streq	r1, [r4, #0]
 800d048:	e7ed      	b.n	800d026 <_free_r+0x1e>
 800d04a:	461a      	mov	r2, r3
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	b10b      	cbz	r3, 800d054 <_free_r+0x4c>
 800d050:	42a3      	cmp	r3, r4
 800d052:	d9fa      	bls.n	800d04a <_free_r+0x42>
 800d054:	6811      	ldr	r1, [r2, #0]
 800d056:	1850      	adds	r0, r2, r1
 800d058:	42a0      	cmp	r0, r4
 800d05a:	d10b      	bne.n	800d074 <_free_r+0x6c>
 800d05c:	6820      	ldr	r0, [r4, #0]
 800d05e:	4401      	add	r1, r0
 800d060:	1850      	adds	r0, r2, r1
 800d062:	4283      	cmp	r3, r0
 800d064:	6011      	str	r1, [r2, #0]
 800d066:	d1e0      	bne.n	800d02a <_free_r+0x22>
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	4408      	add	r0, r1
 800d06e:	6010      	str	r0, [r2, #0]
 800d070:	6053      	str	r3, [r2, #4]
 800d072:	e7da      	b.n	800d02a <_free_r+0x22>
 800d074:	d902      	bls.n	800d07c <_free_r+0x74>
 800d076:	230c      	movs	r3, #12
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	e7d6      	b.n	800d02a <_free_r+0x22>
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	1821      	adds	r1, r4, r0
 800d080:	428b      	cmp	r3, r1
 800d082:	bf01      	itttt	eq
 800d084:	6819      	ldreq	r1, [r3, #0]
 800d086:	685b      	ldreq	r3, [r3, #4]
 800d088:	1809      	addeq	r1, r1, r0
 800d08a:	6021      	streq	r1, [r4, #0]
 800d08c:	6063      	str	r3, [r4, #4]
 800d08e:	6054      	str	r4, [r2, #4]
 800d090:	e7cb      	b.n	800d02a <_free_r+0x22>
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	20006ef0 	.word	0x20006ef0

0800d098 <sbrk_aligned>:
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	4e0f      	ldr	r6, [pc, #60]	@ (800d0d8 <sbrk_aligned+0x40>)
 800d09c:	460c      	mov	r4, r1
 800d09e:	6831      	ldr	r1, [r6, #0]
 800d0a0:	4605      	mov	r5, r0
 800d0a2:	b911      	cbnz	r1, 800d0aa <sbrk_aligned+0x12>
 800d0a4:	f000 fcb4 	bl	800da10 <_sbrk_r>
 800d0a8:	6030      	str	r0, [r6, #0]
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f000 fcaf 	bl	800da10 <_sbrk_r>
 800d0b2:	1c43      	adds	r3, r0, #1
 800d0b4:	d103      	bne.n	800d0be <sbrk_aligned+0x26>
 800d0b6:	f04f 34ff 	mov.w	r4, #4294967295
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	bd70      	pop	{r4, r5, r6, pc}
 800d0be:	1cc4      	adds	r4, r0, #3
 800d0c0:	f024 0403 	bic.w	r4, r4, #3
 800d0c4:	42a0      	cmp	r0, r4
 800d0c6:	d0f8      	beq.n	800d0ba <sbrk_aligned+0x22>
 800d0c8:	1a21      	subs	r1, r4, r0
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f000 fca0 	bl	800da10 <_sbrk_r>
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	d1f2      	bne.n	800d0ba <sbrk_aligned+0x22>
 800d0d4:	e7ef      	b.n	800d0b6 <sbrk_aligned+0x1e>
 800d0d6:	bf00      	nop
 800d0d8:	20006eec 	.word	0x20006eec

0800d0dc <_malloc_r>:
 800d0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e0:	1ccd      	adds	r5, r1, #3
 800d0e2:	f025 0503 	bic.w	r5, r5, #3
 800d0e6:	3508      	adds	r5, #8
 800d0e8:	2d0c      	cmp	r5, #12
 800d0ea:	bf38      	it	cc
 800d0ec:	250c      	movcc	r5, #12
 800d0ee:	2d00      	cmp	r5, #0
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	db01      	blt.n	800d0f8 <_malloc_r+0x1c>
 800d0f4:	42a9      	cmp	r1, r5
 800d0f6:	d904      	bls.n	800d102 <_malloc_r+0x26>
 800d0f8:	230c      	movs	r3, #12
 800d0fa:	6033      	str	r3, [r6, #0]
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1d8 <_malloc_r+0xfc>
 800d106:	f000 f869 	bl	800d1dc <__malloc_lock>
 800d10a:	f8d8 3000 	ldr.w	r3, [r8]
 800d10e:	461c      	mov	r4, r3
 800d110:	bb44      	cbnz	r4, 800d164 <_malloc_r+0x88>
 800d112:	4629      	mov	r1, r5
 800d114:	4630      	mov	r0, r6
 800d116:	f7ff ffbf 	bl	800d098 <sbrk_aligned>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	4604      	mov	r4, r0
 800d11e:	d158      	bne.n	800d1d2 <_malloc_r+0xf6>
 800d120:	f8d8 4000 	ldr.w	r4, [r8]
 800d124:	4627      	mov	r7, r4
 800d126:	2f00      	cmp	r7, #0
 800d128:	d143      	bne.n	800d1b2 <_malloc_r+0xd6>
 800d12a:	2c00      	cmp	r4, #0
 800d12c:	d04b      	beq.n	800d1c6 <_malloc_r+0xea>
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	4639      	mov	r1, r7
 800d132:	4630      	mov	r0, r6
 800d134:	eb04 0903 	add.w	r9, r4, r3
 800d138:	f000 fc6a 	bl	800da10 <_sbrk_r>
 800d13c:	4581      	cmp	r9, r0
 800d13e:	d142      	bne.n	800d1c6 <_malloc_r+0xea>
 800d140:	6821      	ldr	r1, [r4, #0]
 800d142:	4630      	mov	r0, r6
 800d144:	1a6d      	subs	r5, r5, r1
 800d146:	4629      	mov	r1, r5
 800d148:	f7ff ffa6 	bl	800d098 <sbrk_aligned>
 800d14c:	3001      	adds	r0, #1
 800d14e:	d03a      	beq.n	800d1c6 <_malloc_r+0xea>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	442b      	add	r3, r5
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	f8d8 3000 	ldr.w	r3, [r8]
 800d15a:	685a      	ldr	r2, [r3, #4]
 800d15c:	bb62      	cbnz	r2, 800d1b8 <_malloc_r+0xdc>
 800d15e:	f8c8 7000 	str.w	r7, [r8]
 800d162:	e00f      	b.n	800d184 <_malloc_r+0xa8>
 800d164:	6822      	ldr	r2, [r4, #0]
 800d166:	1b52      	subs	r2, r2, r5
 800d168:	d420      	bmi.n	800d1ac <_malloc_r+0xd0>
 800d16a:	2a0b      	cmp	r2, #11
 800d16c:	d917      	bls.n	800d19e <_malloc_r+0xc2>
 800d16e:	1961      	adds	r1, r4, r5
 800d170:	42a3      	cmp	r3, r4
 800d172:	6025      	str	r5, [r4, #0]
 800d174:	bf18      	it	ne
 800d176:	6059      	strne	r1, [r3, #4]
 800d178:	6863      	ldr	r3, [r4, #4]
 800d17a:	bf08      	it	eq
 800d17c:	f8c8 1000 	streq.w	r1, [r8]
 800d180:	5162      	str	r2, [r4, r5]
 800d182:	604b      	str	r3, [r1, #4]
 800d184:	4630      	mov	r0, r6
 800d186:	f000 f82f 	bl	800d1e8 <__malloc_unlock>
 800d18a:	f104 000b 	add.w	r0, r4, #11
 800d18e:	1d23      	adds	r3, r4, #4
 800d190:	f020 0007 	bic.w	r0, r0, #7
 800d194:	1ac2      	subs	r2, r0, r3
 800d196:	bf1c      	itt	ne
 800d198:	1a1b      	subne	r3, r3, r0
 800d19a:	50a3      	strne	r3, [r4, r2]
 800d19c:	e7af      	b.n	800d0fe <_malloc_r+0x22>
 800d19e:	6862      	ldr	r2, [r4, #4]
 800d1a0:	42a3      	cmp	r3, r4
 800d1a2:	bf0c      	ite	eq
 800d1a4:	f8c8 2000 	streq.w	r2, [r8]
 800d1a8:	605a      	strne	r2, [r3, #4]
 800d1aa:	e7eb      	b.n	800d184 <_malloc_r+0xa8>
 800d1ac:	4623      	mov	r3, r4
 800d1ae:	6864      	ldr	r4, [r4, #4]
 800d1b0:	e7ae      	b.n	800d110 <_malloc_r+0x34>
 800d1b2:	463c      	mov	r4, r7
 800d1b4:	687f      	ldr	r7, [r7, #4]
 800d1b6:	e7b6      	b.n	800d126 <_malloc_r+0x4a>
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	42a3      	cmp	r3, r4
 800d1be:	d1fb      	bne.n	800d1b8 <_malloc_r+0xdc>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	6053      	str	r3, [r2, #4]
 800d1c4:	e7de      	b.n	800d184 <_malloc_r+0xa8>
 800d1c6:	230c      	movs	r3, #12
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	6033      	str	r3, [r6, #0]
 800d1cc:	f000 f80c 	bl	800d1e8 <__malloc_unlock>
 800d1d0:	e794      	b.n	800d0fc <_malloc_r+0x20>
 800d1d2:	6005      	str	r5, [r0, #0]
 800d1d4:	e7d6      	b.n	800d184 <_malloc_r+0xa8>
 800d1d6:	bf00      	nop
 800d1d8:	20006ef0 	.word	0x20006ef0

0800d1dc <__malloc_lock>:
 800d1dc:	4801      	ldr	r0, [pc, #4]	@ (800d1e4 <__malloc_lock+0x8>)
 800d1de:	f7ff bf02 	b.w	800cfe6 <__retarget_lock_acquire_recursive>
 800d1e2:	bf00      	nop
 800d1e4:	20006ee8 	.word	0x20006ee8

0800d1e8 <__malloc_unlock>:
 800d1e8:	4801      	ldr	r0, [pc, #4]	@ (800d1f0 <__malloc_unlock+0x8>)
 800d1ea:	f7ff befd 	b.w	800cfe8 <__retarget_lock_release_recursive>
 800d1ee:	bf00      	nop
 800d1f0:	20006ee8 	.word	0x20006ee8

0800d1f4 <__sfputc_r>:
 800d1f4:	6893      	ldr	r3, [r2, #8]
 800d1f6:	b410      	push	{r4}
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	6093      	str	r3, [r2, #8]
 800d1fe:	da07      	bge.n	800d210 <__sfputc_r+0x1c>
 800d200:	6994      	ldr	r4, [r2, #24]
 800d202:	42a3      	cmp	r3, r4
 800d204:	db01      	blt.n	800d20a <__sfputc_r+0x16>
 800d206:	290a      	cmp	r1, #10
 800d208:	d102      	bne.n	800d210 <__sfputc_r+0x1c>
 800d20a:	bc10      	pop	{r4}
 800d20c:	f000 bb6c 	b.w	800d8e8 <__swbuf_r>
 800d210:	6813      	ldr	r3, [r2, #0]
 800d212:	1c58      	adds	r0, r3, #1
 800d214:	6010      	str	r0, [r2, #0]
 800d216:	7019      	strb	r1, [r3, #0]
 800d218:	4608      	mov	r0, r1
 800d21a:	bc10      	pop	{r4}
 800d21c:	4770      	bx	lr

0800d21e <__sfputs_r>:
 800d21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d220:	4606      	mov	r6, r0
 800d222:	460f      	mov	r7, r1
 800d224:	4614      	mov	r4, r2
 800d226:	18d5      	adds	r5, r2, r3
 800d228:	42ac      	cmp	r4, r5
 800d22a:	d101      	bne.n	800d230 <__sfputs_r+0x12>
 800d22c:	2000      	movs	r0, #0
 800d22e:	e007      	b.n	800d240 <__sfputs_r+0x22>
 800d230:	463a      	mov	r2, r7
 800d232:	4630      	mov	r0, r6
 800d234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d238:	f7ff ffdc 	bl	800d1f4 <__sfputc_r>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d1f3      	bne.n	800d228 <__sfputs_r+0xa>
 800d240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d244 <_vfiprintf_r>:
 800d244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d248:	460d      	mov	r5, r1
 800d24a:	4614      	mov	r4, r2
 800d24c:	4698      	mov	r8, r3
 800d24e:	4606      	mov	r6, r0
 800d250:	b09d      	sub	sp, #116	@ 0x74
 800d252:	b118      	cbz	r0, 800d25c <_vfiprintf_r+0x18>
 800d254:	6a03      	ldr	r3, [r0, #32]
 800d256:	b90b      	cbnz	r3, 800d25c <_vfiprintf_r+0x18>
 800d258:	f7ff fdb6 	bl	800cdc8 <__sinit>
 800d25c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d25e:	07d9      	lsls	r1, r3, #31
 800d260:	d405      	bmi.n	800d26e <_vfiprintf_r+0x2a>
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	059a      	lsls	r2, r3, #22
 800d266:	d402      	bmi.n	800d26e <_vfiprintf_r+0x2a>
 800d268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d26a:	f7ff febc 	bl	800cfe6 <__retarget_lock_acquire_recursive>
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	071b      	lsls	r3, r3, #28
 800d272:	d501      	bpl.n	800d278 <_vfiprintf_r+0x34>
 800d274:	692b      	ldr	r3, [r5, #16]
 800d276:	b99b      	cbnz	r3, 800d2a0 <_vfiprintf_r+0x5c>
 800d278:	4629      	mov	r1, r5
 800d27a:	4630      	mov	r0, r6
 800d27c:	f000 fb72 	bl	800d964 <__swsetup_r>
 800d280:	b170      	cbz	r0, 800d2a0 <_vfiprintf_r+0x5c>
 800d282:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d284:	07dc      	lsls	r4, r3, #31
 800d286:	d504      	bpl.n	800d292 <_vfiprintf_r+0x4e>
 800d288:	f04f 30ff 	mov.w	r0, #4294967295
 800d28c:	b01d      	add	sp, #116	@ 0x74
 800d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d292:	89ab      	ldrh	r3, [r5, #12]
 800d294:	0598      	lsls	r0, r3, #22
 800d296:	d4f7      	bmi.n	800d288 <_vfiprintf_r+0x44>
 800d298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d29a:	f7ff fea5 	bl	800cfe8 <__retarget_lock_release_recursive>
 800d29e:	e7f3      	b.n	800d288 <_vfiprintf_r+0x44>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2a4:	2320      	movs	r3, #32
 800d2a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2aa:	2330      	movs	r3, #48	@ 0x30
 800d2ac:	f04f 0901 	mov.w	r9, #1
 800d2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d460 <_vfiprintf_r+0x21c>
 800d2b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2bc:	4623      	mov	r3, r4
 800d2be:	469a      	mov	sl, r3
 800d2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2c4:	b10a      	cbz	r2, 800d2ca <_vfiprintf_r+0x86>
 800d2c6:	2a25      	cmp	r2, #37	@ 0x25
 800d2c8:	d1f9      	bne.n	800d2be <_vfiprintf_r+0x7a>
 800d2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ce:	d00b      	beq.n	800d2e8 <_vfiprintf_r+0xa4>
 800d2d0:	465b      	mov	r3, fp
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	f7ff ffa1 	bl	800d21e <__sfputs_r>
 800d2dc:	3001      	adds	r0, #1
 800d2de:	f000 80a7 	beq.w	800d430 <_vfiprintf_r+0x1ec>
 800d2e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2e4:	445a      	add	r2, fp
 800d2e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 809f 	beq.w	800d430 <_vfiprintf_r+0x1ec>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2fc:	f10a 0a01 	add.w	sl, sl, #1
 800d300:	9304      	str	r3, [sp, #16]
 800d302:	9307      	str	r3, [sp, #28]
 800d304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d308:	931a      	str	r3, [sp, #104]	@ 0x68
 800d30a:	4654      	mov	r4, sl
 800d30c:	2205      	movs	r2, #5
 800d30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d312:	4853      	ldr	r0, [pc, #332]	@ (800d460 <_vfiprintf_r+0x21c>)
 800d314:	f000 fb8c 	bl	800da30 <memchr>
 800d318:	9a04      	ldr	r2, [sp, #16]
 800d31a:	b9d8      	cbnz	r0, 800d354 <_vfiprintf_r+0x110>
 800d31c:	06d1      	lsls	r1, r2, #27
 800d31e:	bf44      	itt	mi
 800d320:	2320      	movmi	r3, #32
 800d322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d326:	0713      	lsls	r3, r2, #28
 800d328:	bf44      	itt	mi
 800d32a:	232b      	movmi	r3, #43	@ 0x2b
 800d32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d330:	f89a 3000 	ldrb.w	r3, [sl]
 800d334:	2b2a      	cmp	r3, #42	@ 0x2a
 800d336:	d015      	beq.n	800d364 <_vfiprintf_r+0x120>
 800d338:	4654      	mov	r4, sl
 800d33a:	2000      	movs	r0, #0
 800d33c:	f04f 0c0a 	mov.w	ip, #10
 800d340:	9a07      	ldr	r2, [sp, #28]
 800d342:	4621      	mov	r1, r4
 800d344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d348:	3b30      	subs	r3, #48	@ 0x30
 800d34a:	2b09      	cmp	r3, #9
 800d34c:	d94b      	bls.n	800d3e6 <_vfiprintf_r+0x1a2>
 800d34e:	b1b0      	cbz	r0, 800d37e <_vfiprintf_r+0x13a>
 800d350:	9207      	str	r2, [sp, #28]
 800d352:	e014      	b.n	800d37e <_vfiprintf_r+0x13a>
 800d354:	eba0 0308 	sub.w	r3, r0, r8
 800d358:	fa09 f303 	lsl.w	r3, r9, r3
 800d35c:	4313      	orrs	r3, r2
 800d35e:	46a2      	mov	sl, r4
 800d360:	9304      	str	r3, [sp, #16]
 800d362:	e7d2      	b.n	800d30a <_vfiprintf_r+0xc6>
 800d364:	9b03      	ldr	r3, [sp, #12]
 800d366:	1d19      	adds	r1, r3, #4
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	9103      	str	r1, [sp, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	bfbb      	ittet	lt
 800d370:	425b      	neglt	r3, r3
 800d372:	f042 0202 	orrlt.w	r2, r2, #2
 800d376:	9307      	strge	r3, [sp, #28]
 800d378:	9307      	strlt	r3, [sp, #28]
 800d37a:	bfb8      	it	lt
 800d37c:	9204      	strlt	r2, [sp, #16]
 800d37e:	7823      	ldrb	r3, [r4, #0]
 800d380:	2b2e      	cmp	r3, #46	@ 0x2e
 800d382:	d10a      	bne.n	800d39a <_vfiprintf_r+0x156>
 800d384:	7863      	ldrb	r3, [r4, #1]
 800d386:	2b2a      	cmp	r3, #42	@ 0x2a
 800d388:	d132      	bne.n	800d3f0 <_vfiprintf_r+0x1ac>
 800d38a:	9b03      	ldr	r3, [sp, #12]
 800d38c:	3402      	adds	r4, #2
 800d38e:	1d1a      	adds	r2, r3, #4
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	9203      	str	r2, [sp, #12]
 800d394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d398:	9305      	str	r3, [sp, #20]
 800d39a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d464 <_vfiprintf_r+0x220>
 800d39e:	2203      	movs	r2, #3
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	7821      	ldrb	r1, [r4, #0]
 800d3a4:	f000 fb44 	bl	800da30 <memchr>
 800d3a8:	b138      	cbz	r0, 800d3ba <_vfiprintf_r+0x176>
 800d3aa:	2240      	movs	r2, #64	@ 0x40
 800d3ac:	9b04      	ldr	r3, [sp, #16]
 800d3ae:	eba0 000a 	sub.w	r0, r0, sl
 800d3b2:	4082      	lsls	r2, r0
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	3401      	adds	r4, #1
 800d3b8:	9304      	str	r3, [sp, #16]
 800d3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3be:	2206      	movs	r2, #6
 800d3c0:	4829      	ldr	r0, [pc, #164]	@ (800d468 <_vfiprintf_r+0x224>)
 800d3c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3c6:	f000 fb33 	bl	800da30 <memchr>
 800d3ca:	2800      	cmp	r0, #0
 800d3cc:	d03f      	beq.n	800d44e <_vfiprintf_r+0x20a>
 800d3ce:	4b27      	ldr	r3, [pc, #156]	@ (800d46c <_vfiprintf_r+0x228>)
 800d3d0:	bb1b      	cbnz	r3, 800d41a <_vfiprintf_r+0x1d6>
 800d3d2:	9b03      	ldr	r3, [sp, #12]
 800d3d4:	3307      	adds	r3, #7
 800d3d6:	f023 0307 	bic.w	r3, r3, #7
 800d3da:	3308      	adds	r3, #8
 800d3dc:	9303      	str	r3, [sp, #12]
 800d3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e0:	443b      	add	r3, r7
 800d3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3e4:	e76a      	b.n	800d2bc <_vfiprintf_r+0x78>
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	2001      	movs	r0, #1
 800d3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ee:	e7a8      	b.n	800d342 <_vfiprintf_r+0xfe>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f04f 0c0a 	mov.w	ip, #10
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	3401      	adds	r4, #1
 800d3fa:	9305      	str	r3, [sp, #20]
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d402:	3a30      	subs	r2, #48	@ 0x30
 800d404:	2a09      	cmp	r2, #9
 800d406:	d903      	bls.n	800d410 <_vfiprintf_r+0x1cc>
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d0c6      	beq.n	800d39a <_vfiprintf_r+0x156>
 800d40c:	9105      	str	r1, [sp, #20]
 800d40e:	e7c4      	b.n	800d39a <_vfiprintf_r+0x156>
 800d410:	4604      	mov	r4, r0
 800d412:	2301      	movs	r3, #1
 800d414:	fb0c 2101 	mla	r1, ip, r1, r2
 800d418:	e7f0      	b.n	800d3fc <_vfiprintf_r+0x1b8>
 800d41a:	ab03      	add	r3, sp, #12
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	462a      	mov	r2, r5
 800d420:	4630      	mov	r0, r6
 800d422:	4b13      	ldr	r3, [pc, #76]	@ (800d470 <_vfiprintf_r+0x22c>)
 800d424:	a904      	add	r1, sp, #16
 800d426:	f3af 8000 	nop.w
 800d42a:	4607      	mov	r7, r0
 800d42c:	1c78      	adds	r0, r7, #1
 800d42e:	d1d6      	bne.n	800d3de <_vfiprintf_r+0x19a>
 800d430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d432:	07d9      	lsls	r1, r3, #31
 800d434:	d405      	bmi.n	800d442 <_vfiprintf_r+0x1fe>
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	059a      	lsls	r2, r3, #22
 800d43a:	d402      	bmi.n	800d442 <_vfiprintf_r+0x1fe>
 800d43c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d43e:	f7ff fdd3 	bl	800cfe8 <__retarget_lock_release_recursive>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	065b      	lsls	r3, r3, #25
 800d446:	f53f af1f 	bmi.w	800d288 <_vfiprintf_r+0x44>
 800d44a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d44c:	e71e      	b.n	800d28c <_vfiprintf_r+0x48>
 800d44e:	ab03      	add	r3, sp, #12
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	462a      	mov	r2, r5
 800d454:	4630      	mov	r0, r6
 800d456:	4b06      	ldr	r3, [pc, #24]	@ (800d470 <_vfiprintf_r+0x22c>)
 800d458:	a904      	add	r1, sp, #16
 800d45a:	f000 f87d 	bl	800d558 <_printf_i>
 800d45e:	e7e4      	b.n	800d42a <_vfiprintf_r+0x1e6>
 800d460:	0800f91e 	.word	0x0800f91e
 800d464:	0800f924 	.word	0x0800f924
 800d468:	0800f928 	.word	0x0800f928
 800d46c:	00000000 	.word	0x00000000
 800d470:	0800d21f 	.word	0x0800d21f

0800d474 <_printf_common>:
 800d474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d478:	4616      	mov	r6, r2
 800d47a:	4698      	mov	r8, r3
 800d47c:	688a      	ldr	r2, [r1, #8]
 800d47e:	690b      	ldr	r3, [r1, #16]
 800d480:	4607      	mov	r7, r0
 800d482:	4293      	cmp	r3, r2
 800d484:	bfb8      	it	lt
 800d486:	4613      	movlt	r3, r2
 800d488:	6033      	str	r3, [r6, #0]
 800d48a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d48e:	460c      	mov	r4, r1
 800d490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d494:	b10a      	cbz	r2, 800d49a <_printf_common+0x26>
 800d496:	3301      	adds	r3, #1
 800d498:	6033      	str	r3, [r6, #0]
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	0699      	lsls	r1, r3, #26
 800d49e:	bf42      	ittt	mi
 800d4a0:	6833      	ldrmi	r3, [r6, #0]
 800d4a2:	3302      	addmi	r3, #2
 800d4a4:	6033      	strmi	r3, [r6, #0]
 800d4a6:	6825      	ldr	r5, [r4, #0]
 800d4a8:	f015 0506 	ands.w	r5, r5, #6
 800d4ac:	d106      	bne.n	800d4bc <_printf_common+0x48>
 800d4ae:	f104 0a19 	add.w	sl, r4, #25
 800d4b2:	68e3      	ldr	r3, [r4, #12]
 800d4b4:	6832      	ldr	r2, [r6, #0]
 800d4b6:	1a9b      	subs	r3, r3, r2
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	dc2b      	bgt.n	800d514 <_printf_common+0xa0>
 800d4bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4c0:	6822      	ldr	r2, [r4, #0]
 800d4c2:	3b00      	subs	r3, #0
 800d4c4:	bf18      	it	ne
 800d4c6:	2301      	movne	r3, #1
 800d4c8:	0692      	lsls	r2, r2, #26
 800d4ca:	d430      	bmi.n	800d52e <_printf_common+0xba>
 800d4cc:	4641      	mov	r1, r8
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4d4:	47c8      	blx	r9
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	d023      	beq.n	800d522 <_printf_common+0xae>
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	6922      	ldr	r2, [r4, #16]
 800d4de:	f003 0306 	and.w	r3, r3, #6
 800d4e2:	2b04      	cmp	r3, #4
 800d4e4:	bf14      	ite	ne
 800d4e6:	2500      	movne	r5, #0
 800d4e8:	6833      	ldreq	r3, [r6, #0]
 800d4ea:	f04f 0600 	mov.w	r6, #0
 800d4ee:	bf08      	it	eq
 800d4f0:	68e5      	ldreq	r5, [r4, #12]
 800d4f2:	f104 041a 	add.w	r4, r4, #26
 800d4f6:	bf08      	it	eq
 800d4f8:	1aed      	subeq	r5, r5, r3
 800d4fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d4fe:	bf08      	it	eq
 800d500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d504:	4293      	cmp	r3, r2
 800d506:	bfc4      	itt	gt
 800d508:	1a9b      	subgt	r3, r3, r2
 800d50a:	18ed      	addgt	r5, r5, r3
 800d50c:	42b5      	cmp	r5, r6
 800d50e:	d11a      	bne.n	800d546 <_printf_common+0xd2>
 800d510:	2000      	movs	r0, #0
 800d512:	e008      	b.n	800d526 <_printf_common+0xb2>
 800d514:	2301      	movs	r3, #1
 800d516:	4652      	mov	r2, sl
 800d518:	4641      	mov	r1, r8
 800d51a:	4638      	mov	r0, r7
 800d51c:	47c8      	blx	r9
 800d51e:	3001      	adds	r0, #1
 800d520:	d103      	bne.n	800d52a <_printf_common+0xb6>
 800d522:	f04f 30ff 	mov.w	r0, #4294967295
 800d526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52a:	3501      	adds	r5, #1
 800d52c:	e7c1      	b.n	800d4b2 <_printf_common+0x3e>
 800d52e:	2030      	movs	r0, #48	@ 0x30
 800d530:	18e1      	adds	r1, r4, r3
 800d532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d53c:	4422      	add	r2, r4
 800d53e:	3302      	adds	r3, #2
 800d540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d544:	e7c2      	b.n	800d4cc <_printf_common+0x58>
 800d546:	2301      	movs	r3, #1
 800d548:	4622      	mov	r2, r4
 800d54a:	4641      	mov	r1, r8
 800d54c:	4638      	mov	r0, r7
 800d54e:	47c8      	blx	r9
 800d550:	3001      	adds	r0, #1
 800d552:	d0e6      	beq.n	800d522 <_printf_common+0xae>
 800d554:	3601      	adds	r6, #1
 800d556:	e7d9      	b.n	800d50c <_printf_common+0x98>

0800d558 <_printf_i>:
 800d558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d55c:	7e0f      	ldrb	r7, [r1, #24]
 800d55e:	4691      	mov	r9, r2
 800d560:	2f78      	cmp	r7, #120	@ 0x78
 800d562:	4680      	mov	r8, r0
 800d564:	460c      	mov	r4, r1
 800d566:	469a      	mov	sl, r3
 800d568:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d56a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d56e:	d807      	bhi.n	800d580 <_printf_i+0x28>
 800d570:	2f62      	cmp	r7, #98	@ 0x62
 800d572:	d80a      	bhi.n	800d58a <_printf_i+0x32>
 800d574:	2f00      	cmp	r7, #0
 800d576:	f000 80d3 	beq.w	800d720 <_printf_i+0x1c8>
 800d57a:	2f58      	cmp	r7, #88	@ 0x58
 800d57c:	f000 80ba 	beq.w	800d6f4 <_printf_i+0x19c>
 800d580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d588:	e03a      	b.n	800d600 <_printf_i+0xa8>
 800d58a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d58e:	2b15      	cmp	r3, #21
 800d590:	d8f6      	bhi.n	800d580 <_printf_i+0x28>
 800d592:	a101      	add	r1, pc, #4	@ (adr r1, 800d598 <_printf_i+0x40>)
 800d594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d598:	0800d5f1 	.word	0x0800d5f1
 800d59c:	0800d605 	.word	0x0800d605
 800d5a0:	0800d581 	.word	0x0800d581
 800d5a4:	0800d581 	.word	0x0800d581
 800d5a8:	0800d581 	.word	0x0800d581
 800d5ac:	0800d581 	.word	0x0800d581
 800d5b0:	0800d605 	.word	0x0800d605
 800d5b4:	0800d581 	.word	0x0800d581
 800d5b8:	0800d581 	.word	0x0800d581
 800d5bc:	0800d581 	.word	0x0800d581
 800d5c0:	0800d581 	.word	0x0800d581
 800d5c4:	0800d707 	.word	0x0800d707
 800d5c8:	0800d62f 	.word	0x0800d62f
 800d5cc:	0800d6c1 	.word	0x0800d6c1
 800d5d0:	0800d581 	.word	0x0800d581
 800d5d4:	0800d581 	.word	0x0800d581
 800d5d8:	0800d729 	.word	0x0800d729
 800d5dc:	0800d581 	.word	0x0800d581
 800d5e0:	0800d62f 	.word	0x0800d62f
 800d5e4:	0800d581 	.word	0x0800d581
 800d5e8:	0800d581 	.word	0x0800d581
 800d5ec:	0800d6c9 	.word	0x0800d6c9
 800d5f0:	6833      	ldr	r3, [r6, #0]
 800d5f2:	1d1a      	adds	r2, r3, #4
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6032      	str	r2, [r6, #0]
 800d5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d600:	2301      	movs	r3, #1
 800d602:	e09e      	b.n	800d742 <_printf_i+0x1ea>
 800d604:	6833      	ldr	r3, [r6, #0]
 800d606:	6820      	ldr	r0, [r4, #0]
 800d608:	1d19      	adds	r1, r3, #4
 800d60a:	6031      	str	r1, [r6, #0]
 800d60c:	0606      	lsls	r6, r0, #24
 800d60e:	d501      	bpl.n	800d614 <_printf_i+0xbc>
 800d610:	681d      	ldr	r5, [r3, #0]
 800d612:	e003      	b.n	800d61c <_printf_i+0xc4>
 800d614:	0645      	lsls	r5, r0, #25
 800d616:	d5fb      	bpl.n	800d610 <_printf_i+0xb8>
 800d618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d61c:	2d00      	cmp	r5, #0
 800d61e:	da03      	bge.n	800d628 <_printf_i+0xd0>
 800d620:	232d      	movs	r3, #45	@ 0x2d
 800d622:	426d      	negs	r5, r5
 800d624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d628:	230a      	movs	r3, #10
 800d62a:	4859      	ldr	r0, [pc, #356]	@ (800d790 <_printf_i+0x238>)
 800d62c:	e011      	b.n	800d652 <_printf_i+0xfa>
 800d62e:	6821      	ldr	r1, [r4, #0]
 800d630:	6833      	ldr	r3, [r6, #0]
 800d632:	0608      	lsls	r0, r1, #24
 800d634:	f853 5b04 	ldr.w	r5, [r3], #4
 800d638:	d402      	bmi.n	800d640 <_printf_i+0xe8>
 800d63a:	0649      	lsls	r1, r1, #25
 800d63c:	bf48      	it	mi
 800d63e:	b2ad      	uxthmi	r5, r5
 800d640:	2f6f      	cmp	r7, #111	@ 0x6f
 800d642:	6033      	str	r3, [r6, #0]
 800d644:	bf14      	ite	ne
 800d646:	230a      	movne	r3, #10
 800d648:	2308      	moveq	r3, #8
 800d64a:	4851      	ldr	r0, [pc, #324]	@ (800d790 <_printf_i+0x238>)
 800d64c:	2100      	movs	r1, #0
 800d64e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d652:	6866      	ldr	r6, [r4, #4]
 800d654:	2e00      	cmp	r6, #0
 800d656:	bfa8      	it	ge
 800d658:	6821      	ldrge	r1, [r4, #0]
 800d65a:	60a6      	str	r6, [r4, #8]
 800d65c:	bfa4      	itt	ge
 800d65e:	f021 0104 	bicge.w	r1, r1, #4
 800d662:	6021      	strge	r1, [r4, #0]
 800d664:	b90d      	cbnz	r5, 800d66a <_printf_i+0x112>
 800d666:	2e00      	cmp	r6, #0
 800d668:	d04b      	beq.n	800d702 <_printf_i+0x1aa>
 800d66a:	4616      	mov	r6, r2
 800d66c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d670:	fb03 5711 	mls	r7, r3, r1, r5
 800d674:	5dc7      	ldrb	r7, [r0, r7]
 800d676:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d67a:	462f      	mov	r7, r5
 800d67c:	42bb      	cmp	r3, r7
 800d67e:	460d      	mov	r5, r1
 800d680:	d9f4      	bls.n	800d66c <_printf_i+0x114>
 800d682:	2b08      	cmp	r3, #8
 800d684:	d10b      	bne.n	800d69e <_printf_i+0x146>
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	07df      	lsls	r7, r3, #31
 800d68a:	d508      	bpl.n	800d69e <_printf_i+0x146>
 800d68c:	6923      	ldr	r3, [r4, #16]
 800d68e:	6861      	ldr	r1, [r4, #4]
 800d690:	4299      	cmp	r1, r3
 800d692:	bfde      	ittt	le
 800d694:	2330      	movle	r3, #48	@ 0x30
 800d696:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d69a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d69e:	1b92      	subs	r2, r2, r6
 800d6a0:	6122      	str	r2, [r4, #16]
 800d6a2:	464b      	mov	r3, r9
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	f8cd a000 	str.w	sl, [sp]
 800d6ac:	aa03      	add	r2, sp, #12
 800d6ae:	f7ff fee1 	bl	800d474 <_printf_common>
 800d6b2:	3001      	adds	r0, #1
 800d6b4:	d14a      	bne.n	800d74c <_printf_i+0x1f4>
 800d6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ba:	b004      	add	sp, #16
 800d6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	f043 0320 	orr.w	r3, r3, #32
 800d6c6:	6023      	str	r3, [r4, #0]
 800d6c8:	2778      	movs	r7, #120	@ 0x78
 800d6ca:	4832      	ldr	r0, [pc, #200]	@ (800d794 <_printf_i+0x23c>)
 800d6cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	6831      	ldr	r1, [r6, #0]
 800d6d4:	061f      	lsls	r7, r3, #24
 800d6d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6da:	d402      	bmi.n	800d6e2 <_printf_i+0x18a>
 800d6dc:	065f      	lsls	r7, r3, #25
 800d6de:	bf48      	it	mi
 800d6e0:	b2ad      	uxthmi	r5, r5
 800d6e2:	6031      	str	r1, [r6, #0]
 800d6e4:	07d9      	lsls	r1, r3, #31
 800d6e6:	bf44      	itt	mi
 800d6e8:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ec:	6023      	strmi	r3, [r4, #0]
 800d6ee:	b11d      	cbz	r5, 800d6f8 <_printf_i+0x1a0>
 800d6f0:	2310      	movs	r3, #16
 800d6f2:	e7ab      	b.n	800d64c <_printf_i+0xf4>
 800d6f4:	4826      	ldr	r0, [pc, #152]	@ (800d790 <_printf_i+0x238>)
 800d6f6:	e7e9      	b.n	800d6cc <_printf_i+0x174>
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	f023 0320 	bic.w	r3, r3, #32
 800d6fe:	6023      	str	r3, [r4, #0]
 800d700:	e7f6      	b.n	800d6f0 <_printf_i+0x198>
 800d702:	4616      	mov	r6, r2
 800d704:	e7bd      	b.n	800d682 <_printf_i+0x12a>
 800d706:	6833      	ldr	r3, [r6, #0]
 800d708:	6825      	ldr	r5, [r4, #0]
 800d70a:	1d18      	adds	r0, r3, #4
 800d70c:	6961      	ldr	r1, [r4, #20]
 800d70e:	6030      	str	r0, [r6, #0]
 800d710:	062e      	lsls	r6, r5, #24
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	d501      	bpl.n	800d71a <_printf_i+0x1c2>
 800d716:	6019      	str	r1, [r3, #0]
 800d718:	e002      	b.n	800d720 <_printf_i+0x1c8>
 800d71a:	0668      	lsls	r0, r5, #25
 800d71c:	d5fb      	bpl.n	800d716 <_printf_i+0x1be>
 800d71e:	8019      	strh	r1, [r3, #0]
 800d720:	2300      	movs	r3, #0
 800d722:	4616      	mov	r6, r2
 800d724:	6123      	str	r3, [r4, #16]
 800d726:	e7bc      	b.n	800d6a2 <_printf_i+0x14a>
 800d728:	6833      	ldr	r3, [r6, #0]
 800d72a:	2100      	movs	r1, #0
 800d72c:	1d1a      	adds	r2, r3, #4
 800d72e:	6032      	str	r2, [r6, #0]
 800d730:	681e      	ldr	r6, [r3, #0]
 800d732:	6862      	ldr	r2, [r4, #4]
 800d734:	4630      	mov	r0, r6
 800d736:	f000 f97b 	bl	800da30 <memchr>
 800d73a:	b108      	cbz	r0, 800d740 <_printf_i+0x1e8>
 800d73c:	1b80      	subs	r0, r0, r6
 800d73e:	6060      	str	r0, [r4, #4]
 800d740:	6863      	ldr	r3, [r4, #4]
 800d742:	6123      	str	r3, [r4, #16]
 800d744:	2300      	movs	r3, #0
 800d746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d74a:	e7aa      	b.n	800d6a2 <_printf_i+0x14a>
 800d74c:	4632      	mov	r2, r6
 800d74e:	4649      	mov	r1, r9
 800d750:	4640      	mov	r0, r8
 800d752:	6923      	ldr	r3, [r4, #16]
 800d754:	47d0      	blx	sl
 800d756:	3001      	adds	r0, #1
 800d758:	d0ad      	beq.n	800d6b6 <_printf_i+0x15e>
 800d75a:	6823      	ldr	r3, [r4, #0]
 800d75c:	079b      	lsls	r3, r3, #30
 800d75e:	d413      	bmi.n	800d788 <_printf_i+0x230>
 800d760:	68e0      	ldr	r0, [r4, #12]
 800d762:	9b03      	ldr	r3, [sp, #12]
 800d764:	4298      	cmp	r0, r3
 800d766:	bfb8      	it	lt
 800d768:	4618      	movlt	r0, r3
 800d76a:	e7a6      	b.n	800d6ba <_printf_i+0x162>
 800d76c:	2301      	movs	r3, #1
 800d76e:	4632      	mov	r2, r6
 800d770:	4649      	mov	r1, r9
 800d772:	4640      	mov	r0, r8
 800d774:	47d0      	blx	sl
 800d776:	3001      	adds	r0, #1
 800d778:	d09d      	beq.n	800d6b6 <_printf_i+0x15e>
 800d77a:	3501      	adds	r5, #1
 800d77c:	68e3      	ldr	r3, [r4, #12]
 800d77e:	9903      	ldr	r1, [sp, #12]
 800d780:	1a5b      	subs	r3, r3, r1
 800d782:	42ab      	cmp	r3, r5
 800d784:	dcf2      	bgt.n	800d76c <_printf_i+0x214>
 800d786:	e7eb      	b.n	800d760 <_printf_i+0x208>
 800d788:	2500      	movs	r5, #0
 800d78a:	f104 0619 	add.w	r6, r4, #25
 800d78e:	e7f5      	b.n	800d77c <_printf_i+0x224>
 800d790:	0800f92f 	.word	0x0800f92f
 800d794:	0800f940 	.word	0x0800f940

0800d798 <__sflush_r>:
 800d798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79e:	0716      	lsls	r6, r2, #28
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	d454      	bmi.n	800d850 <__sflush_r+0xb8>
 800d7a6:	684b      	ldr	r3, [r1, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dc02      	bgt.n	800d7b2 <__sflush_r+0x1a>
 800d7ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	dd48      	ble.n	800d844 <__sflush_r+0xac>
 800d7b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7b4:	2e00      	cmp	r6, #0
 800d7b6:	d045      	beq.n	800d844 <__sflush_r+0xac>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7be:	682f      	ldr	r7, [r5, #0]
 800d7c0:	6a21      	ldr	r1, [r4, #32]
 800d7c2:	602b      	str	r3, [r5, #0]
 800d7c4:	d030      	beq.n	800d828 <__sflush_r+0x90>
 800d7c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	0759      	lsls	r1, r3, #29
 800d7cc:	d505      	bpl.n	800d7da <__sflush_r+0x42>
 800d7ce:	6863      	ldr	r3, [r4, #4]
 800d7d0:	1ad2      	subs	r2, r2, r3
 800d7d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7d4:	b10b      	cbz	r3, 800d7da <__sflush_r+0x42>
 800d7d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7d8:	1ad2      	subs	r2, r2, r3
 800d7da:	2300      	movs	r3, #0
 800d7dc:	4628      	mov	r0, r5
 800d7de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7e0:	6a21      	ldr	r1, [r4, #32]
 800d7e2:	47b0      	blx	r6
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	d106      	bne.n	800d7f8 <__sflush_r+0x60>
 800d7ea:	6829      	ldr	r1, [r5, #0]
 800d7ec:	291d      	cmp	r1, #29
 800d7ee:	d82b      	bhi.n	800d848 <__sflush_r+0xb0>
 800d7f0:	4a28      	ldr	r2, [pc, #160]	@ (800d894 <__sflush_r+0xfc>)
 800d7f2:	410a      	asrs	r2, r1
 800d7f4:	07d6      	lsls	r6, r2, #31
 800d7f6:	d427      	bmi.n	800d848 <__sflush_r+0xb0>
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	6062      	str	r2, [r4, #4]
 800d7fc:	6922      	ldr	r2, [r4, #16]
 800d7fe:	04d9      	lsls	r1, r3, #19
 800d800:	6022      	str	r2, [r4, #0]
 800d802:	d504      	bpl.n	800d80e <__sflush_r+0x76>
 800d804:	1c42      	adds	r2, r0, #1
 800d806:	d101      	bne.n	800d80c <__sflush_r+0x74>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	b903      	cbnz	r3, 800d80e <__sflush_r+0x76>
 800d80c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d80e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d810:	602f      	str	r7, [r5, #0]
 800d812:	b1b9      	cbz	r1, 800d844 <__sflush_r+0xac>
 800d814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d818:	4299      	cmp	r1, r3
 800d81a:	d002      	beq.n	800d822 <__sflush_r+0x8a>
 800d81c:	4628      	mov	r0, r5
 800d81e:	f7ff fbf3 	bl	800d008 <_free_r>
 800d822:	2300      	movs	r3, #0
 800d824:	6363      	str	r3, [r4, #52]	@ 0x34
 800d826:	e00d      	b.n	800d844 <__sflush_r+0xac>
 800d828:	2301      	movs	r3, #1
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b0      	blx	r6
 800d82e:	4602      	mov	r2, r0
 800d830:	1c50      	adds	r0, r2, #1
 800d832:	d1c9      	bne.n	800d7c8 <__sflush_r+0x30>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d0c6      	beq.n	800d7c8 <__sflush_r+0x30>
 800d83a:	2b1d      	cmp	r3, #29
 800d83c:	d001      	beq.n	800d842 <__sflush_r+0xaa>
 800d83e:	2b16      	cmp	r3, #22
 800d840:	d11d      	bne.n	800d87e <__sflush_r+0xe6>
 800d842:	602f      	str	r7, [r5, #0]
 800d844:	2000      	movs	r0, #0
 800d846:	e021      	b.n	800d88c <__sflush_r+0xf4>
 800d848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d84c:	b21b      	sxth	r3, r3
 800d84e:	e01a      	b.n	800d886 <__sflush_r+0xee>
 800d850:	690f      	ldr	r7, [r1, #16]
 800d852:	2f00      	cmp	r7, #0
 800d854:	d0f6      	beq.n	800d844 <__sflush_r+0xac>
 800d856:	0793      	lsls	r3, r2, #30
 800d858:	bf18      	it	ne
 800d85a:	2300      	movne	r3, #0
 800d85c:	680e      	ldr	r6, [r1, #0]
 800d85e:	bf08      	it	eq
 800d860:	694b      	ldreq	r3, [r1, #20]
 800d862:	1bf6      	subs	r6, r6, r7
 800d864:	600f      	str	r7, [r1, #0]
 800d866:	608b      	str	r3, [r1, #8]
 800d868:	2e00      	cmp	r6, #0
 800d86a:	ddeb      	ble.n	800d844 <__sflush_r+0xac>
 800d86c:	4633      	mov	r3, r6
 800d86e:	463a      	mov	r2, r7
 800d870:	4628      	mov	r0, r5
 800d872:	6a21      	ldr	r1, [r4, #32]
 800d874:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d878:	47e0      	blx	ip
 800d87a:	2800      	cmp	r0, #0
 800d87c:	dc07      	bgt.n	800d88e <__sflush_r+0xf6>
 800d87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d886:	f04f 30ff 	mov.w	r0, #4294967295
 800d88a:	81a3      	strh	r3, [r4, #12]
 800d88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d88e:	4407      	add	r7, r0
 800d890:	1a36      	subs	r6, r6, r0
 800d892:	e7e9      	b.n	800d868 <__sflush_r+0xd0>
 800d894:	dfbffffe 	.word	0xdfbffffe

0800d898 <_fflush_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	690b      	ldr	r3, [r1, #16]
 800d89c:	4605      	mov	r5, r0
 800d89e:	460c      	mov	r4, r1
 800d8a0:	b913      	cbnz	r3, 800d8a8 <_fflush_r+0x10>
 800d8a2:	2500      	movs	r5, #0
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	bd38      	pop	{r3, r4, r5, pc}
 800d8a8:	b118      	cbz	r0, 800d8b2 <_fflush_r+0x1a>
 800d8aa:	6a03      	ldr	r3, [r0, #32]
 800d8ac:	b90b      	cbnz	r3, 800d8b2 <_fflush_r+0x1a>
 800d8ae:	f7ff fa8b 	bl	800cdc8 <__sinit>
 800d8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d0f3      	beq.n	800d8a2 <_fflush_r+0xa>
 800d8ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8bc:	07d0      	lsls	r0, r2, #31
 800d8be:	d404      	bmi.n	800d8ca <_fflush_r+0x32>
 800d8c0:	0599      	lsls	r1, r3, #22
 800d8c2:	d402      	bmi.n	800d8ca <_fflush_r+0x32>
 800d8c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8c6:	f7ff fb8e 	bl	800cfe6 <__retarget_lock_acquire_recursive>
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	f7ff ff63 	bl	800d798 <__sflush_r>
 800d8d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	07da      	lsls	r2, r3, #31
 800d8d8:	d4e4      	bmi.n	800d8a4 <_fflush_r+0xc>
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	059b      	lsls	r3, r3, #22
 800d8de:	d4e1      	bmi.n	800d8a4 <_fflush_r+0xc>
 800d8e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8e2:	f7ff fb81 	bl	800cfe8 <__retarget_lock_release_recursive>
 800d8e6:	e7dd      	b.n	800d8a4 <_fflush_r+0xc>

0800d8e8 <__swbuf_r>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	460e      	mov	r6, r1
 800d8ec:	4614      	mov	r4, r2
 800d8ee:	4605      	mov	r5, r0
 800d8f0:	b118      	cbz	r0, 800d8fa <__swbuf_r+0x12>
 800d8f2:	6a03      	ldr	r3, [r0, #32]
 800d8f4:	b90b      	cbnz	r3, 800d8fa <__swbuf_r+0x12>
 800d8f6:	f7ff fa67 	bl	800cdc8 <__sinit>
 800d8fa:	69a3      	ldr	r3, [r4, #24]
 800d8fc:	60a3      	str	r3, [r4, #8]
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	071a      	lsls	r2, r3, #28
 800d902:	d501      	bpl.n	800d908 <__swbuf_r+0x20>
 800d904:	6923      	ldr	r3, [r4, #16]
 800d906:	b943      	cbnz	r3, 800d91a <__swbuf_r+0x32>
 800d908:	4621      	mov	r1, r4
 800d90a:	4628      	mov	r0, r5
 800d90c:	f000 f82a 	bl	800d964 <__swsetup_r>
 800d910:	b118      	cbz	r0, 800d91a <__swbuf_r+0x32>
 800d912:	f04f 37ff 	mov.w	r7, #4294967295
 800d916:	4638      	mov	r0, r7
 800d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	6922      	ldr	r2, [r4, #16]
 800d91e:	b2f6      	uxtb	r6, r6
 800d920:	1a98      	subs	r0, r3, r2
 800d922:	6963      	ldr	r3, [r4, #20]
 800d924:	4637      	mov	r7, r6
 800d926:	4283      	cmp	r3, r0
 800d928:	dc05      	bgt.n	800d936 <__swbuf_r+0x4e>
 800d92a:	4621      	mov	r1, r4
 800d92c:	4628      	mov	r0, r5
 800d92e:	f7ff ffb3 	bl	800d898 <_fflush_r>
 800d932:	2800      	cmp	r0, #0
 800d934:	d1ed      	bne.n	800d912 <__swbuf_r+0x2a>
 800d936:	68a3      	ldr	r3, [r4, #8]
 800d938:	3b01      	subs	r3, #1
 800d93a:	60a3      	str	r3, [r4, #8]
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	6022      	str	r2, [r4, #0]
 800d942:	701e      	strb	r6, [r3, #0]
 800d944:	6962      	ldr	r2, [r4, #20]
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	429a      	cmp	r2, r3
 800d94a:	d004      	beq.n	800d956 <__swbuf_r+0x6e>
 800d94c:	89a3      	ldrh	r3, [r4, #12]
 800d94e:	07db      	lsls	r3, r3, #31
 800d950:	d5e1      	bpl.n	800d916 <__swbuf_r+0x2e>
 800d952:	2e0a      	cmp	r6, #10
 800d954:	d1df      	bne.n	800d916 <__swbuf_r+0x2e>
 800d956:	4621      	mov	r1, r4
 800d958:	4628      	mov	r0, r5
 800d95a:	f7ff ff9d 	bl	800d898 <_fflush_r>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d0d9      	beq.n	800d916 <__swbuf_r+0x2e>
 800d962:	e7d6      	b.n	800d912 <__swbuf_r+0x2a>

0800d964 <__swsetup_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4b29      	ldr	r3, [pc, #164]	@ (800da0c <__swsetup_r+0xa8>)
 800d968:	4605      	mov	r5, r0
 800d96a:	6818      	ldr	r0, [r3, #0]
 800d96c:	460c      	mov	r4, r1
 800d96e:	b118      	cbz	r0, 800d978 <__swsetup_r+0x14>
 800d970:	6a03      	ldr	r3, [r0, #32]
 800d972:	b90b      	cbnz	r3, 800d978 <__swsetup_r+0x14>
 800d974:	f7ff fa28 	bl	800cdc8 <__sinit>
 800d978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d97c:	0719      	lsls	r1, r3, #28
 800d97e:	d422      	bmi.n	800d9c6 <__swsetup_r+0x62>
 800d980:	06da      	lsls	r2, r3, #27
 800d982:	d407      	bmi.n	800d994 <__swsetup_r+0x30>
 800d984:	2209      	movs	r2, #9
 800d986:	602a      	str	r2, [r5, #0]
 800d988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d98c:	f04f 30ff 	mov.w	r0, #4294967295
 800d990:	81a3      	strh	r3, [r4, #12]
 800d992:	e033      	b.n	800d9fc <__swsetup_r+0x98>
 800d994:	0758      	lsls	r0, r3, #29
 800d996:	d512      	bpl.n	800d9be <__swsetup_r+0x5a>
 800d998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d99a:	b141      	cbz	r1, 800d9ae <__swsetup_r+0x4a>
 800d99c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9a0:	4299      	cmp	r1, r3
 800d9a2:	d002      	beq.n	800d9aa <__swsetup_r+0x46>
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	f7ff fb2f 	bl	800d008 <_free_r>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d9b4:	81a3      	strh	r3, [r4, #12]
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	6063      	str	r3, [r4, #4]
 800d9ba:	6923      	ldr	r3, [r4, #16]
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	f043 0308 	orr.w	r3, r3, #8
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	6923      	ldr	r3, [r4, #16]
 800d9c8:	b94b      	cbnz	r3, 800d9de <__swsetup_r+0x7a>
 800d9ca:	89a3      	ldrh	r3, [r4, #12]
 800d9cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9d4:	d003      	beq.n	800d9de <__swsetup_r+0x7a>
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	4628      	mov	r0, r5
 800d9da:	f000 f85c 	bl	800da96 <__smakebuf_r>
 800d9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e2:	f013 0201 	ands.w	r2, r3, #1
 800d9e6:	d00a      	beq.n	800d9fe <__swsetup_r+0x9a>
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	60a2      	str	r2, [r4, #8]
 800d9ec:	6962      	ldr	r2, [r4, #20]
 800d9ee:	4252      	negs	r2, r2
 800d9f0:	61a2      	str	r2, [r4, #24]
 800d9f2:	6922      	ldr	r2, [r4, #16]
 800d9f4:	b942      	cbnz	r2, 800da08 <__swsetup_r+0xa4>
 800d9f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9fa:	d1c5      	bne.n	800d988 <__swsetup_r+0x24>
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	0799      	lsls	r1, r3, #30
 800da00:	bf58      	it	pl
 800da02:	6962      	ldrpl	r2, [r4, #20]
 800da04:	60a2      	str	r2, [r4, #8]
 800da06:	e7f4      	b.n	800d9f2 <__swsetup_r+0x8e>
 800da08:	2000      	movs	r0, #0
 800da0a:	e7f7      	b.n	800d9fc <__swsetup_r+0x98>
 800da0c:	20000020 	.word	0x20000020

0800da10 <_sbrk_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	2300      	movs	r3, #0
 800da14:	4d05      	ldr	r5, [pc, #20]	@ (800da2c <_sbrk_r+0x1c>)
 800da16:	4604      	mov	r4, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	602b      	str	r3, [r5, #0]
 800da1c:	f7f3 f882 	bl	8000b24 <_sbrk>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d102      	bne.n	800da2a <_sbrk_r+0x1a>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	b103      	cbz	r3, 800da2a <_sbrk_r+0x1a>
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	20006ee4 	.word	0x20006ee4

0800da30 <memchr>:
 800da30:	4603      	mov	r3, r0
 800da32:	b510      	push	{r4, lr}
 800da34:	b2c9      	uxtb	r1, r1
 800da36:	4402      	add	r2, r0
 800da38:	4293      	cmp	r3, r2
 800da3a:	4618      	mov	r0, r3
 800da3c:	d101      	bne.n	800da42 <memchr+0x12>
 800da3e:	2000      	movs	r0, #0
 800da40:	e003      	b.n	800da4a <memchr+0x1a>
 800da42:	7804      	ldrb	r4, [r0, #0]
 800da44:	3301      	adds	r3, #1
 800da46:	428c      	cmp	r4, r1
 800da48:	d1f6      	bne.n	800da38 <memchr+0x8>
 800da4a:	bd10      	pop	{r4, pc}

0800da4c <__swhatbuf_r>:
 800da4c:	b570      	push	{r4, r5, r6, lr}
 800da4e:	460c      	mov	r4, r1
 800da50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da54:	4615      	mov	r5, r2
 800da56:	2900      	cmp	r1, #0
 800da58:	461e      	mov	r6, r3
 800da5a:	b096      	sub	sp, #88	@ 0x58
 800da5c:	da0c      	bge.n	800da78 <__swhatbuf_r+0x2c>
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	2100      	movs	r1, #0
 800da62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da66:	bf14      	ite	ne
 800da68:	2340      	movne	r3, #64	@ 0x40
 800da6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da6e:	2000      	movs	r0, #0
 800da70:	6031      	str	r1, [r6, #0]
 800da72:	602b      	str	r3, [r5, #0]
 800da74:	b016      	add	sp, #88	@ 0x58
 800da76:	bd70      	pop	{r4, r5, r6, pc}
 800da78:	466a      	mov	r2, sp
 800da7a:	f000 f849 	bl	800db10 <_fstat_r>
 800da7e:	2800      	cmp	r0, #0
 800da80:	dbed      	blt.n	800da5e <__swhatbuf_r+0x12>
 800da82:	9901      	ldr	r1, [sp, #4]
 800da84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da8c:	4259      	negs	r1, r3
 800da8e:	4159      	adcs	r1, r3
 800da90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da94:	e7eb      	b.n	800da6e <__swhatbuf_r+0x22>

0800da96 <__smakebuf_r>:
 800da96:	898b      	ldrh	r3, [r1, #12]
 800da98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da9a:	079d      	lsls	r5, r3, #30
 800da9c:	4606      	mov	r6, r0
 800da9e:	460c      	mov	r4, r1
 800daa0:	d507      	bpl.n	800dab2 <__smakebuf_r+0x1c>
 800daa2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	6123      	str	r3, [r4, #16]
 800daaa:	2301      	movs	r3, #1
 800daac:	6163      	str	r3, [r4, #20]
 800daae:	b003      	add	sp, #12
 800dab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dab2:	466a      	mov	r2, sp
 800dab4:	ab01      	add	r3, sp, #4
 800dab6:	f7ff ffc9 	bl	800da4c <__swhatbuf_r>
 800daba:	9f00      	ldr	r7, [sp, #0]
 800dabc:	4605      	mov	r5, r0
 800dabe:	4639      	mov	r1, r7
 800dac0:	4630      	mov	r0, r6
 800dac2:	f7ff fb0b 	bl	800d0dc <_malloc_r>
 800dac6:	b948      	cbnz	r0, 800dadc <__smakebuf_r+0x46>
 800dac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dacc:	059a      	lsls	r2, r3, #22
 800dace:	d4ee      	bmi.n	800daae <__smakebuf_r+0x18>
 800dad0:	f023 0303 	bic.w	r3, r3, #3
 800dad4:	f043 0302 	orr.w	r3, r3, #2
 800dad8:	81a3      	strh	r3, [r4, #12]
 800dada:	e7e2      	b.n	800daa2 <__smakebuf_r+0xc>
 800dadc:	89a3      	ldrh	r3, [r4, #12]
 800dade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dae6:	81a3      	strh	r3, [r4, #12]
 800dae8:	9b01      	ldr	r3, [sp, #4]
 800daea:	6020      	str	r0, [r4, #0]
 800daec:	b15b      	cbz	r3, 800db06 <__smakebuf_r+0x70>
 800daee:	4630      	mov	r0, r6
 800daf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daf4:	f000 f81e 	bl	800db34 <_isatty_r>
 800daf8:	b128      	cbz	r0, 800db06 <__smakebuf_r+0x70>
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	f023 0303 	bic.w	r3, r3, #3
 800db00:	f043 0301 	orr.w	r3, r3, #1
 800db04:	81a3      	strh	r3, [r4, #12]
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	431d      	orrs	r5, r3
 800db0a:	81a5      	strh	r5, [r4, #12]
 800db0c:	e7cf      	b.n	800daae <__smakebuf_r+0x18>
	...

0800db10 <_fstat_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	2300      	movs	r3, #0
 800db14:	4d06      	ldr	r5, [pc, #24]	@ (800db30 <_fstat_r+0x20>)
 800db16:	4604      	mov	r4, r0
 800db18:	4608      	mov	r0, r1
 800db1a:	4611      	mov	r1, r2
 800db1c:	602b      	str	r3, [r5, #0]
 800db1e:	f7f2 ffdb 	bl	8000ad8 <_fstat>
 800db22:	1c43      	adds	r3, r0, #1
 800db24:	d102      	bne.n	800db2c <_fstat_r+0x1c>
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	b103      	cbz	r3, 800db2c <_fstat_r+0x1c>
 800db2a:	6023      	str	r3, [r4, #0]
 800db2c:	bd38      	pop	{r3, r4, r5, pc}
 800db2e:	bf00      	nop
 800db30:	20006ee4 	.word	0x20006ee4

0800db34 <_isatty_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	2300      	movs	r3, #0
 800db38:	4d05      	ldr	r5, [pc, #20]	@ (800db50 <_isatty_r+0x1c>)
 800db3a:	4604      	mov	r4, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	602b      	str	r3, [r5, #0]
 800db40:	f7f2 ffd9 	bl	8000af6 <_isatty>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_isatty_r+0x1a>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_isatty_r+0x1a>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	20006ee4 	.word	0x20006ee4

0800db54 <_init>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	bf00      	nop
 800db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5a:	bc08      	pop	{r3}
 800db5c:	469e      	mov	lr, r3
 800db5e:	4770      	bx	lr

0800db60 <_fini>:
 800db60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db62:	bf00      	nop
 800db64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db66:	bc08      	pop	{r3}
 800db68:	469e      	mov	lr, r3
 800db6a:	4770      	bx	lr
